{"version":3,"file":"app.min.js","sources":["../../../../node_modules/photoswipe/dist/photoswipe-lightbox.esm.js","../../app/js/blocks/menu.js","../../app/js/blocks/totop.js","../../../../node_modules/photoswipe/dist/photoswipe.esm.js","../../app/js/blocks/pswp.js","../../app/vendor/magnific-popup/jquery.magnific-popup.js","../../app/js/blocks/mp.js"],"sourcesContent":["/*!\n  * PhotoSwipe Lightbox 5.1.7 - https://photoswipe.com\n  * (c) 2021 Dmitry Semenov\n  */\n/**\n  * Creates element and optionally appends it to another.\n  *\n  * @param {String} className\n  * @param {String|NULL} tagName\n  * @param {Element|NULL} appendToEl\n  */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName || 'div');\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n\n/**\n * Apply width and height CSS properties to element\n */\nfunction setWidthHeight(el, w, h) {\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\n}\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error',\n};\n\n\n/**\n * Check if click or keydown event was dispatched\n * with a special key or via mouse wheel.\n *\n * @param {Event} e\n */\nfunction specialKeyUsed(e) {\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\n    return true;\n  }\n}\n\n/**\n * Parse `gallery` or `children` options.\n *\n * @param {Element|NodeList|String} option\n * @param {String|null} legacySelector\n * @param {Element|null} parent\n * @returns Element[]\n */\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n\nfunction dynamicImportModule(module) {\n  return typeof module === 'string' ? import(/* webpackIgnore: true */ module) : module;\n}\n\n/**\n * Base PhotoSwipe event object\n */\nclass PhotoSwipeEvent {\n  constructor(type, details) {\n    this.type = type;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n\n/**\n * PhotoSwipe base class that can listen and dispatch for events.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\n */\nclass Eventable {\n  constructor() {\n    this._listeners = {};\n    this._filters = {};\n  }\n\n  addFilter(name, fn, priority = 100) {\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    this._filters[name].push({ fn, priority });\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\n\n    if (this.pswp) {\n      this.pswp.addFilter(name, fn, priority);\n    }\n  }\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n\n  applyFilters(name, ...args) {\n    if (this._filters[name]) {\n      this._filters[name].forEach((filter) => {\n        args[0] = filter.fn.apply(this, args);\n      });\n    }\n    return args[0];\n  }\n\n  on(name, fn) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    this._listeners[name].push(fn);\n\n    // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n    if (this.pswp) {\n      this.pswp.on(name, fn);\n    }\n  }\n\n  off(name, fn) {\n    if (this._listeners[name]) {\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\n    }\n\n    if (this.pswp) {\n      this.pswp.off(name, fn);\n    }\n  }\n\n  dispatch(name, details) {\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event = new PhotoSwipeEvent(name, details);\n\n    if (!this._listeners) {\n      return event;\n    }\n\n    if (this._listeners[name]) {\n      this._listeners[name].forEach((listener) => {\n        listener.call(this, event);\n      });\n    }\n\n    return event;\n  }\n}\n\nclass Content {\n  /**\n   * @param {Object} itemData Slide data\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\n   * @param {Slide|undefined} slide Slide that requested the image,\n   *                                can be undefined if image was requested by something else\n   *                                (for example by lazy-loader)\n   */\n  constructor(itemData, instance) {\n    this.options = instance.options;\n    this.instance = instance;\n    this.data = itemData;\n\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n\n    this.isAttached = false;\n    this.state = LOAD_STATE.IDLE;\n  }\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.pswp = slide.pswp;\n  }\n\n  /**\n   * Load the content\n   *\n   * @param {Boolean} isLazy If method is executed by lazy-loader\n   */\n  load(/* isLazy */) {\n    if (!this.element) {\n      this.element = createElement('pswp__content');\n      this.element.style.position = 'absolute';\n      this.element.style.left = 0;\n      this.element.style.top = 0;\n      this.element.innerHTML = this.data.html || '';\n    }\n  }\n\n  isZoomable() {\n    return false;\n  }\n\n  usePlaceholder() {\n    return false;\n  }\n\n  activate() {\n\n  }\n\n  deactivate() {\n\n  }\n\n  setDisplayedSize(width, height) {\n    if (this.element) {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide });\n    }\n  }\n\n  // If the placeholder should be kept in DOM\n  keepPlaceholder() {\n    return (this.state === LOAD_STATE.LOADING);\n  }\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide, isError: true });\n      this.pswp.dispatch('loadError', { slide: this.slide });\n    }\n  }\n\n  getErrorElement() {\n    return false;\n  }\n\n\n  remove() {\n    this.isAttached = false;\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n  }\n\n  appendTo(container) {\n    this.isAttached = true;\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n\n  destroy() {\n\n  }\n}\n\nclass ImageContent extends Content {\n  load(/* isLazy */) {\n    if (this.element) {\n      return;\n    }\n\n    const imageSrc = this.data.src;\n\n    if (!imageSrc) {\n      return;\n    }\n\n    this.element = createElement('pswp__img', 'img');\n\n    if (this.data.srcset) {\n      this.element.srcset = this.data.srcset;\n    }\n\n    this.element.src = imageSrc;\n\n    this.element.alt = this.data.alt || '';\n\n    this.state = LOAD_STATE.LOADING;\n\n    if (this.element.complete) {\n      this.onLoaded();\n    } else {\n      this.element.onload = () => {\n        this.onLoaded();\n      };\n\n      this.element.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n\n  setDisplayedSize(width, height) {\n    const image = this.element;\n    if (image) {\n      setWidthHeight(image, width, 'auto');\n\n      // Handle srcset sizes attribute.\n      //\n      // Never lower quality, if it was increased previously.\n      // Chrome does this automatically, Firefox and Safari do not,\n      // so we store largest used size in dataset.\n      if (image.srcset\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\n        image.sizes = width + 'px';\n        image.dataset.largestUsedSize = width;\n      }\n\n      if (this.slide) {\n        this.pswp.dispatch('imageSizeChange', { slide: this.slide, width, height });\n      }\n    }\n  }\n\n  isZoomable() {\n    return (this.state !== LOAD_STATE.ERROR);\n  }\n\n  usePlaceholder() {\n    return true;\n  }\n\n  lazyLoad() {\n    this.load();\n  }\n\n  destroy() {\n    if (this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = null;\n    }\n  }\n\n  appendTo(container) {\n    this.isAttached = true;\n\n    // Use decode() on nearby slides\n    //\n    // Nearby slide images are in DOM and not hidden via display:none.\n    // However, they are placed offscreen (to the left and right side).\n    //\n    // Some browsers do not composite the image until it's actually visible,\n    // using decode() helps.\n    //\n    // You might ask \"why dont you just decode() and then append all images\",\n    // that's because I want to show image before it's fully loaded,\n    // as browser can render parts of image while it is loading.\n    if (this.slide && !this.slide.isActive && ('decode' in this.element)) {\n      this.isDecoding = true;\n      // Make sure that we start decoding on the next frame\n      requestAnimationFrame(() => {\n        if (this.element) {\n          this.element.decode().then(() => {\n            this.isDecoding = false;\n            requestAnimationFrame(() => {\n              this.appendImageTo(container);\n            });\n          }).catch(() => {});\n        }\n      });\n    } else {\n      this.appendImageTo(container);\n    }\n  }\n\n  activate() {\n    if (this.slide && this.slide.container && this.isDecoding) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImageTo(this.slide.container);\n    }\n  }\n\n  getErrorElement() {\n    const el = createElement('pswp__error-msg-container');\n    el.innerHTML = this.options.errorMsg;\n    const linkEl = el.querySelector('a');\n    if (linkEl) {\n      linkEl.href = this.data.src;\n    }\n    return el;\n  }\n\n  appendImageTo(container) {\n    // ensure that element exists and is not already appended\n    if (this.element && !this.element.parentNode && this.isAttached) {\n      container.appendChild(this.element);\n    }\n  }\n}\n\n/**\n * PhotoSwipe base class that can retrieve data about every slide.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\n */\n\nclass PhotoSwipeBase extends Eventable {\n  constructor() {\n    super();\n    this.contentTypes = {\n      image: ImageContent,\n      html: Content\n    };\n  }\n\n  /**\n   * Get total number of slides\n   */\n  getNumItems() {\n    let numItems;\n    const { dataSource } = this.options;\n    if (!dataSource) {\n      numItems = 0;\n    } else if (dataSource.length) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource.gallery) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    }\n\n    // legacy event, before filters were introduced\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n\n  /**\n   * Add or set slide content type\n   *\n   * @param {String} type\n   * @param {Class} ContentClass\n   */\n  addContentType(type, ContentClass) {\n    this.contentTypes[type] = ContentClass;\n  }\n\n  /**\n   * Get slide content class based on its data\n   *\n   * @param {Object} slideData\n   * @param {Integer} slideIndex\n   * @returns Class\n   */\n  getContentClass(slideData) {\n    if (slideData.type) {\n      return this.contentTypes[slideData.type];\n    } else if (slideData.src) {\n      return this.contentTypes.image;\n    } else if (slideData.html) {\n      return this.contentTypes.html;\n    }\n  }\n\n  createContentFromData(slideData) {\n    const ContentClass = this.getContentClass(slideData);\n    const content = new ContentClass(slideData, this);\n    return content;\n  }\n\n  /**\n   * Get item data by index.\n   *\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\n   * For example, it may contain properties like\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\n   *\n   * @param {Integer} index\n   */\n  getItemData(index) {\n    const { dataSource } = this.options;\n    let dataSourceItem;\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && dataSource.gallery) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallerySelecor and childSelector options\n\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    }\n\n    // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n\n  /**\n   * Get array of gallery DOM elements,\n   * based on childSelector and gallery element.\n   *\n   * @param {Element} galleryElement\n   */\n  _getGalleryDOMElements(galleryElement) {\n    if (this.options.children || this.options.childSelector) {\n      return getElementsFromOption(\n        this.options.children,\n        this.options.childSelector,\n        galleryElement\n      ) || [];\n    }\n\n    return [galleryElement];\n  }\n\n  /**\n   * Converts DOM element to item data object.\n   *\n   * @param {Element} element DOM element\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _domElementToItemData(element) {\n    const itemData = {\n      element\n    };\n\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      itemData.srcset = linkEl.dataset.pswpSrcset;\n\n      itemData.w = parseInt(linkEl.dataset.pswpWidth, 10);\n      itemData.h = parseInt(linkEl.dataset.pswpHeight, 10);\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        // define msrc only if it's the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = thumbnailEl.getAttribute('alt');\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    this.applyFilters('domItemData', itemData, element, linkEl);\n\n    return itemData;\n  }\n}\n\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n\n/**\n * Parses padding option.\n * Supported formats:\n *\n * // Object\n * padding: {\n *  top: 0,\n *  bottom: 0,\n *  left: 0,\n *  right: 0\n * }\n *\n * // A function that returns the object\n * paddingFn: (viewportSize) => {\n *  return {\n *    top: 0,\n *    bottom: 0,\n *    left: 0,\n *    right: 0\n *  };\n * }\n *\n * // Legacy variant\n * paddingLeft: 0,\n * paddingRight: 0,\n * paddingTop: 0,\n * paddingBottom: 0,\n *\n * @param {String} prop 'left', 'top', 'bottom', 'right'\n * @param {Object} options PhotoSwipe options\n * @param {Object} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\n * @returns {Number}\n */\nfunction parsePaddingOption(prop, options, viewportSize) {\n  let paddingValue;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\n    if (options[legacyPropName]) {\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return paddingValue || 0;\n}\n\n\nfunction getPanAreaSize(options, viewportSize/*, pswp*/) {\n  return {\n    x: viewportSize.x\n      - parsePaddingOption('left', options, viewportSize)\n      - parsePaddingOption('right', options, viewportSize),\n    y: viewportSize.y\n      - parsePaddingOption('top', options, viewportSize)\n      - parsePaddingOption('bottom', options, viewportSize)\n  };\n}\n\n/**\n * Calculates zoom levels for specific slide.\n * Depends on viewport size and image size.\n */\n\nconst MAX_IMAGE_WIDTH = 4000;\n\nclass ZoomLevel {\n  /**\n   * @param {Object} options PhotoSwipe options\n   * @param {Object} itemData Slide data\n   * @param {Integer} index Slide index\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n  }\n\n  /**\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\n   *\n   * It should be called when either image or viewport size changes.\n   *\n   * @param {Slide} slide\n   */\n  update(maxWidth, maxHeight, panAreaSize) {\n    this.elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n\n    this.panAreaSize = panAreaSize;\n\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\n\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\n\n    // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n    this.vFill = Math.min(1, vRatio);\n\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(\n      this.initial,\n      this.secondary,\n      this._getMax()\n    );\n\n    this.min = Math.min(\n      this.fit,\n      this.initial,\n      this.secondary\n    );\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\n    }\n  }\n\n  /**\n   * Parses user-defined zoom option.\n   *\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\n   */\n  _parseZoomLevelOption(optionPrefix) {\n    // zoom.initial\n    // zoom.secondary\n    // zoom.max\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n\n  /**\n   * Get zoom level to which image will be zoomed after double-tap gesture,\n   * or when user clicks on zoom icon,\n   * or mouse-click on image itself.\n   * If you return 1 image will be zoomed to its original size.\n   *\n   * @return {Number}\n   */\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // 3x of \"fit\" state, but not larger than original\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n\n  /**\n   * Get initial image zoom level.\n   *\n   * @return {Number}\n   */\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n\n  /**\n   * Maximum zoom level when user zooms\n   * via zoom/pinch gesture,\n   * via cmd/ctrl-wheel or via trackpad.\n   *\n   * @return {Number}\n   */\n  _getMax() {\n    const currZoomLevel = this._parseZoomLevelOption('max');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return Math.max(1, this.fit * 4);\n  }\n}\n\n/**\n * Returns cache key by slide index and data\n *\n * @param {Object} itemData\n * @param {Integer} index\n * @returns {String}\n */\nfunction getKey(itemData, index) {\n  if (itemData && itemData.src) {\n    return itemData.src + '_' + index;\n  }\n  return index;\n}\n\n\n/**\n * Lazy-load an image\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * @param {Object} itemData Data about the slide\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\n * @param {Integer} index\n * @returns {Object|Boolean} Image that is being decoded or false.\n */\nfunction lazyLoadData(itemData, instance, index) {\n  // src/slide/content/content.js\n  const content = instance.createContentFromData(itemData);\n\n  if (!content || !content.lazyLoad) {\n    return;\n  }\n\n  content.key = getKey(itemData, index);\n\n  const { options } = instance;\n\n  // We need to know dimensions of the image to preload it,\n  // as it might use srcset and we need to define sizes\n  const viewportSize = instance.viewportSize || getViewportSize(options);\n  const panAreaSize = getPanAreaSize(options, viewportSize);\n\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\n  zoomLevel.update(content.width, content.height, panAreaSize);\n\n  content.lazyLoad();\n  content.setDisplayedSize(\n    Math.ceil(content.width * zoomLevel.initial),\n    Math.ceil(content.height * zoomLevel.initial)\n  );\n\n  return content;\n}\n\n\n/**\n * Lazy-loads specific slide.\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * By default it loads image based on viewport size and initial zoom level.\n *\n * @param {Integer} index Slide index\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\n */\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\n/**\n * PhotoSwipe lightbox\n *\n * - If user has unsupported browser it falls back to default browser action (just opens URL)\n * - Binds click event to links that should open PhotoSwipe\n * - parses DOM strcture for PhotoSwipe (retrieves large image URLs and sizes)\n * - Initializes PhotoSwipe\n *\n *\n * Loader options use the same object as PhotoSwipe, and supports such options:\n *\n * gallery - Element | Element[] | NodeList | string selector for the gallery element\n * children - Element | Element[] | NodeList | string selector for the gallery children\n *\n */\n\nclass PhotoSwipeLightbox extends PhotoSwipeBase {\n  constructor(options) {\n    super();\n    this.options = options || {};\n    this._uid = 0;\n  }\n\n  init() {\n    this.onThumbnailsClick = this.onThumbnailsClick.bind(this);\n\n    // Bind click events to each gallery\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\n      .forEach((galleryElement) => {\n        galleryElement.addEventListener('click', this.onThumbnailsClick, false);\n      });\n  }\n\n  onThumbnailsClick(e) {\n    // Exit and allow default browser action if:\n    if (specialKeyUsed(e) // ... if clicked with a special key (ctrl/cmd...)\n        || window.pswp // ... if PhotoSwipe is already open\n        || window.navigator.onLine === false) { // ... if offline\n      return;\n    }\n\n    // If both clientX and clientY are 0 or not defined,\n    // the event is likely triggered by keyboard,\n    // so we do not pass the initialPoint\n    //\n    // Note that some screen readers emulate the mouse position,\n    // so it's not ideal way to detect them.\n    //\n    let initialPoint = { x: e.clientX, y: e.clientY };\n\n    if (!initialPoint.x && !initialPoint.y) {\n      initialPoint = null;\n    }\n\n    const clickedIndex = this.getClickedIndex(e);\n    const dataSource = {\n      gallery: e.currentTarget\n    };\n\n    if (clickedIndex >= 0) {\n      e.preventDefault();\n      this.loadAndOpen(clickedIndex, dataSource, initialPoint);\n    }\n  }\n\n  /**\n   * Get index of gallery item that was clicked.\n   *\n   * @param {Event} e click event\n   */\n  getClickedIndex(e) {\n    if (this.options.getClickedIndexFn) {\n      return this.options.getClickedIndexFn.call(this, e);\n    }\n\n    const clickedTarget = e.target;\n    const childElements = getElementsFromOption(\n      this.options.children,\n      this.options.childSelector,\n      e.currentTarget\n    );\n    const clickedChildIndex = childElements.findIndex(\n      child => child === clickedTarget || child.contains(clickedTarget)\n    );\n\n    if (clickedChildIndex !== -1) {\n      return clickedChildIndex;\n    } else if (this.options.children || this.options.childSelector) {\n      // click wasn't on a child element\n      return -1;\n    }\n\n    // There is only one item (which is the gallery)\n    return 0;\n  }\n\n  /**\n   * Load and open PhotoSwipe\n   *\n   * @param {Integer} index\n   * @param {Array|Object|null} dataSource\n   * @param {Point|null} initialPoint\n   */\n  loadAndOpen(index, dataSource, initialPoint) {\n    // Check if the gallery is already open\n    if (window.pswp) {\n      return false;\n    }\n\n    // set initial index\n    this.options.index = index;\n\n    // define options for PhotoSwipe constructor\n    this.options.initialPointerPos = initialPoint;\n\n    this.shouldOpen = true;\n    this.preload(index, dataSource);\n    return true;\n  }\n\n  /**\n   * Load the main module and the slide content by index\n   *\n   * @param {Integer} index\n   */\n  preload(index, dataSource) {\n    const { options } = this;\n\n    if (dataSource) {\n      options.dataSource = dataSource;\n    }\n\n    // Add the main module\n    const promiseArray = [dynamicImportModule(options.pswpModule)];\n\n    // Add custom-defined promise, if any\n    if (typeof options.openPromise === 'function') {\n      // allow developers to perform some task before opening\n      promiseArray.push(options.openPromise());\n    }\n\n    if (options.preloadFirstSlide !== false && index >= 0) {\n      this._preloadedContent = lazyLoadSlide(index, this);\n    }\n\n    // Wait till all promises resolve and open PhotoSwipe\n    const uid = ++this._uid;\n    Promise.all(promiseArray).then((iterableModules) => {\n      if (this.shouldOpen) {\n        const mainModule = iterableModules[0];\n        this._openPhotoswipe(mainModule, uid);\n      }\n    });\n  }\n\n  _openPhotoswipe(module, uid) {\n    // Cancel opening if UID doesn't match the current one\n    // (if user clicked on another gallery item before current was loaded).\n    //\n    // Or if shouldOpen flag is set to false\n    // (developer may modify it via public API)\n    if (uid !== this._uid && this.shouldOpen) {\n      return;\n    }\n\n    this.shouldOpen = false;\n\n    // PhotoSwipe is already open\n    if (window.pswp) {\n      return;\n    }\n\n    // Pass data to PhotoSwipe and open init\n    const pswp = typeof module === 'object'\n        ? new module.default(null, this.options) // eslint-disable-line\n        : new module(null, this.options); // eslint-disable-line\n\n    this.pswp = pswp;\n    window.pswp = pswp;\n\n    // map listeners from Lightbox to PhotoSwipe Core\n    Object.keys(this._listeners).forEach((name) => {\n      this._listeners[name].forEach((fn) => {\n        pswp.on(name, fn);\n      });\n    });\n\n    // same with filters\n    Object.keys(this._filters).forEach((name) => {\n      this._filters[name].forEach((filter) => {\n        pswp.addFilter(name, filter.fn, filter.priority);\n      });\n    });\n\n    // same with content types\n    pswp.contentTypes = { ...this.contentTypes };\n\n    if (this._preloadedContent) {\n      pswp.contentLoader.addToCache(this._preloadedContent);\n      this._preloadedContent = null;\n    }\n\n    pswp.on('destroy', () => {\n      // clean up public variables\n      this.pswp = null;\n      window.pswp = null;\n    });\n\n    pswp.init();\n  }\n\n  destroy() {\n    if (this.pswp) {\n      this.pswp.close();\n    }\n\n    this.shouldOpen = false;\n    this._listeners = null;\n\n    getElementsFromOption(this.options.gallery, this.options.gallerySelector)\n      .forEach((galleryElement) => {\n        galleryElement.removeEventListener('click', this.onThumbnailsClick, false);\n      });\n  }\n}\n\nexport { Content, ImageContent, PhotoSwipeLightbox as default };\n//# sourceMappingURL=photoswipe-lightbox.esm.js.map\n","// menu.js ... Auto hide navbar\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const header = document.querySelector('.nav-autohide')\n  let scrolling = false\n  let previousTop = 0\n  let scrollDelta = 10\n  let scrollOffset = 250\n\n  document.addEventListener('scroll', () => {\n    if (!scrolling) {\n      scrolling = true\n\n      if (!window.requestAnimationFrame) {\n        setTimeout(autoHideHeader, 250)\n      } else {\n        requestAnimationFrame(autoHideHeader)\n      }\n    }\n  })\n\n  function autoHideHeader() {\n    let currentTop = (document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop\n\n    // Scrolling up\n    if (previousTop - currentTop > scrollDelta || currentTop === 0) {\n      header.classList.remove('is-hidden')\n    } else if (currentTop - previousTop > scrollDelta && currentTop > scrollOffset) {\n      // Scrolling down\n      header.classList.add('is-hidden')\n    }\n\n    previousTop = currentTop\n    scrolling = false\n  }\n})\n","// totop.js ... back to top button\n\nfunction eventScrollToTop() {\n  let flag = false\n  const metka = 300\n  const arrowUp = document.getElementById('scrolltotop')\n\n  window.addEventListener('scroll', function () {\n    let counter = this.scrollY\n    if (counter > metka) {\n      arrowUp.classList.add('on')\n      arrowUp.classList.remove('down')\n      flag = true\n    }\n    if (counter <= metka && flag == true) {\n      arrowUp.classList.add('down')\n      arrowUp.classList.remove('on')\n      flag = false\n    }\n  })\n\n  arrowUp.onclick = function (event) {\n    // event.preventDefault();\n    window.scrollTo({\n      left: this.scrollX,\n      top: 0,\n      behavior: 'smooth',\n    })\n  }\n}\n\n// Блок загрузки кода scrol to top\nfunction scrollToTopLoader() {\n  let codScroll = `\n  <div id=\"scrolltotop\">\n    <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M12 22V2M12 2L2 12M12 2L22 12\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n    </svg>\n  </div>\n  `\n  let el = document.getElementsByTagName('script')\n  el[el.length - 1].insertAdjacentHTML('afterend', codScroll)\n}\n\n// Запуск кнопки scrollToTop после полной загрузки DOM для экранов с viwport более 340px\ndocument.addEventListener('DOMContentLoaded', () => {\n  let intViewportWidth = window.innerWidth // viwport X\n  let intViewportHeight = window.innerHeight // viewport Y\n  if (intViewportWidth >= 340) {\n    scrollToTopLoader()\n    eventScrollToTop()\n  }\n})\n","/*!\n  * PhotoSwipe 5.1.7 - https://photoswipe.com\n  * (c) 2021 Dmitry Semenov\n  */\n/**\n  * Creates element and optionally appends it to another.\n  *\n  * @param {String} className\n  * @param {String|NULL} tagName\n  * @param {Element|NULL} appendToEl\n  */\nfunction createElement(className, tagName, appendToEl) {\n  const el = document.createElement(tagName || 'div');\n  if (className) {\n    el.className = className;\n  }\n  if (appendToEl) {\n    appendToEl.appendChild(el);\n  }\n  return el;\n}\n\nfunction equalizePoints(p1, p2) {\n  p1.x = p2.x;\n  p1.y = p2.y;\n  if (p2.id !== undefined) {\n    p1.id = p2.id;\n  }\n  return p1;\n}\n\n\nfunction roundPoint(p) {\n  p.x = Math.round(p.x);\n  p.y = Math.round(p.y);\n}\n\n/**\n * Returns distance between two points.\n *\n * @param {Object} p1 Point\n * @param {Object} p2 Point\n */\nfunction getDistanceBetween(p1, p2) {\n  const x = Math.abs(p1.x - p2.x);\n  const y = Math.abs(p1.y - p2.y);\n  return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * Whether X and Y positions of points are qual\n *\n * @param {Object} p1\n * @param {Object} p2\n */\nfunction pointsEqual(p1, p2) {\n  return p1.x === p2.x && p1.y === p2.y;\n}\n\n/**\n * The float result between the min and max values.\n *\n * @param {Number} val\n * @param {Number} min\n * @param {Number} max\n */\nfunction clamp(val, min, max) {\n  return Math.min(Math.max(val, min), max);\n}\n\n/**\n * Get transform string\n *\n * @param {Number} x\n * @param {Number|null} y\n * @param {Number|null} scale\n */\nfunction toTransformString(x, y, scale) {\n  let propValue = 'translate3d('\n    + x + 'px,' + (y || 0) + 'px'\n    + ',0)';\n\n  if (scale !== undefined) {\n    propValue += ' scale3d('\n      + scale + ',' + scale\n      + ',1)';\n  }\n\n  return propValue;\n}\n\n/**\n * Apply transform:translate(x, y) scale(scale) to element\n *\n * @param {DOMElement} el\n * @param {Number} x\n * @param {Number|null} y\n * @param {Number|null} scale\n */\nfunction setTransform(el, x, y, scale) {\n  el.style.transform = toTransformString(x, y, scale);\n}\n\nconst defaultCSSEasing = 'cubic-bezier(.4,0,.22,1)';\n\n/**\n * Apply CSS transition to element\n *\n * @param {Element} el\n * @param {String} prop CSS property to animate\n * @param {Number} duration in ms\n * @param {String|NULL} ease CSS easing function\n */\nfunction setTransitionStyle(el, prop, duration, ease) {\n  // inOut: 'cubic-bezier(.4, 0, .22, 1)', // for \"toggle state\" transitions\n  // out: 'cubic-bezier(0, 0, .22, 1)', // for \"show\" transitions\n  // in: 'cubic-bezier(.4, 0, 1, 1)'// for \"hide\" transitions\n  el.style.transition = prop\n    ? (prop + ' ' + duration + 'ms ' + (ease || defaultCSSEasing))\n    : 'none';\n}\n\n/**\n * Apply width and height CSS properties to element\n */\nfunction setWidthHeight(el, w, h) {\n  el.style.width = (typeof w === 'number') ? (w + 'px') : w;\n  el.style.height = (typeof h === 'number') ? (h + 'px') : h;\n}\n\nfunction removeTransitionStyle(el) {\n  setTransitionStyle(el);\n}\n\nfunction decodeImage(img) {\n  if ('decode' in img) {\n    return img.decode();\n  }\n\n  if (img.complete) {\n    return Promise.resolve(img);\n  }\n\n  return new Promise((resolve, reject) => {\n    img.onload = () => resolve(img);\n    img.onerror = reject;\n  });\n}\n\nconst LOAD_STATE = {\n  IDLE: 'idle',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  ERROR: 'error',\n};\n\n\n/**\n * Check if click or keydown event was dispatched\n * with a special key or via mouse wheel.\n *\n * @param {Event} e\n */\nfunction specialKeyUsed(e) {\n  if (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey) {\n    return true;\n  }\n}\n\n/**\n * Parse `gallery` or `children` options.\n *\n * @param {Element|NodeList|String} option\n * @param {String|null} legacySelector\n * @param {Element|null} parent\n * @returns Element[]\n */\nfunction getElementsFromOption(option, legacySelector, parent = document) {\n  let elements = [];\n\n  if (option instanceof Element) {\n    elements = [option];\n  } else if (option instanceof NodeList || Array.isArray(option)) {\n    elements = Array.from(option);\n  } else {\n    const selector = typeof option === 'string' ? option : legacySelector;\n    if (selector) {\n      elements = Array.from(parent.querySelectorAll(selector));\n    }\n  }\n\n  return elements;\n}\n\n// Detect passive event listener support\nlet supportsPassive = false;\n/* eslint-disable */\ntry {\n  window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n    get: () => {\n      supportsPassive = true;\n    }\n  }));\n} catch (e) {}\n/* eslint-enable */\n\nclass DOMEvents {\n  constructor() {\n    this._pool = [];\n  }\n\n  /**\n   * Adds event listeners\n   *\n   * @param {DOMElement} target\n   * @param {String} type Can be multiple, separated by space.\n   * @param {Function} listener\n   * @param {Boolean} passive\n   */\n  add(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive);\n  }\n\n  /**\n   * Removes event listeners\n   *\n   * @param {DOMElement} target\n   * @param {String} type\n   * @param {Function} listener\n   * @param {Boolean} passive\n   */\n  remove(target, type, listener, passive) {\n    this._toggleListener(target, type, listener, passive, true);\n  }\n\n  /**\n   * Removes all bound events\n   */\n  removeAll() {\n    this._pool.forEach((poolItem) => {\n      this._toggleListener(\n        poolItem.target,\n        poolItem.type,\n        poolItem.listener,\n        poolItem.passive,\n        true,\n        true\n      );\n    });\n    this._pool = [];\n  }\n\n  /**\n   * Adds or removes event\n   *\n   * @param {DOMElement} target\n   * @param {String} type\n   * @param {Function} listener\n   * @param {Boolean} passive\n   * @param {Boolean} unbind Whether the event should be added or removed\n   * @param {Boolean} skipPool Whether events pool should be skipped\n   */\n  _toggleListener(target, type, listener, passive, unbind, skipPool) {\n    if (!target) {\n      return;\n    }\n\n    const methodName = (unbind ? 'remove' : 'add') + 'EventListener';\n    type = type.split(' ');\n    type.forEach((eType) => {\n      if (eType) {\n        // Events pool is used to easily unbind all events when PhotoSwipe is closed,\n        // so developer doesn't need to do this manually\n        if (!skipPool) {\n          if (unbind) {\n            // Remove from the events pool\n            this._pool = this._pool.filter((poolItem) => {\n              return poolItem.type !== eType\n                || poolItem.listener !== listener\n                || poolItem.target !== target;\n            });\n          } else {\n            // Add to the events pool\n            this._pool.push({\n              target,\n              type: eType,\n              listener,\n              passive\n            });\n          }\n        }\n\n\n        // most PhotoSwipe events call preventDefault,\n        // and we do not need browser to scroll the page\n        const eventOptions = supportsPassive ? { passive: (passive || false) } : false;\n\n        target[methodName](\n          eType,\n          listener,\n          eventOptions\n        );\n      }\n    });\n  }\n}\n\nfunction getViewportSize(options, pswp) {\n  if (options.getViewportSizeFn) {\n    const newViewportSize = options.getViewportSizeFn(options, pswp);\n    if (newViewportSize) {\n      return newViewportSize;\n    }\n  }\n\n  return {\n    x: document.documentElement.clientWidth,\n\n    // TODO: height on mobile is very incosistent due to toolbar\n    // find a way to improve this\n    //\n    // document.documentElement.clientHeight - doesn't seem to work well\n    y: window.innerHeight\n  };\n}\n\n/**\n * Parses padding option.\n * Supported formats:\n *\n * // Object\n * padding: {\n *  top: 0,\n *  bottom: 0,\n *  left: 0,\n *  right: 0\n * }\n *\n * // A function that returns the object\n * paddingFn: (viewportSize) => {\n *  return {\n *    top: 0,\n *    bottom: 0,\n *    left: 0,\n *    right: 0\n *  };\n * }\n *\n * // Legacy variant\n * paddingLeft: 0,\n * paddingRight: 0,\n * paddingTop: 0,\n * paddingBottom: 0,\n *\n * @param {String} prop 'left', 'top', 'bottom', 'right'\n * @param {Object} options PhotoSwipe options\n * @param {Object} viewportSize PhotoSwipe viewport size, for example: { x:800, y:600 }\n * @returns {Number}\n */\nfunction parsePaddingOption(prop, options, viewportSize) {\n  let paddingValue;\n\n  if (options.paddingFn) {\n    paddingValue = options.paddingFn(viewportSize)[prop];\n  } else if (options.padding) {\n    paddingValue = options.padding[prop];\n  } else {\n    const legacyPropName = 'padding' + prop[0].toUpperCase() + prop.slice(1);\n    if (options[legacyPropName]) {\n      paddingValue = options[legacyPropName];\n    }\n  }\n\n  return paddingValue || 0;\n}\n\n\nfunction getPanAreaSize(options, viewportSize/*, pswp*/) {\n  return {\n    x: viewportSize.x\n      - parsePaddingOption('left', options, viewportSize)\n      - parsePaddingOption('right', options, viewportSize),\n    y: viewportSize.y\n      - parsePaddingOption('top', options, viewportSize)\n      - parsePaddingOption('bottom', options, viewportSize)\n  };\n}\n\n/**\n * Calculates minimum, maximum and initial (center) bounds of a slide\n */\n\nclass PanBounds {\n  constructor(slide) {\n    this.slide = slide;\n\n    this.currZoomLevel = 1;\n\n    this.center = {};\n    this.max = {};\n    this.min = {};\n\n    this.reset();\n  }\n\n  // _getItemBounds\n  update(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n\n    if (!this.slide.width) {\n      this.reset();\n    } else {\n      this._updateAxis('x');\n      this._updateAxis('y');\n      this.slide.pswp.dispatch('calcBounds', { slide: this.slide });\n    }\n  }\n\n  // _calculateItemBoundsForAxis\n  _updateAxis(axis) {\n    const { pswp } = this.slide;\n    const elSize = this.slide[axis === 'x' ? 'width' : 'height'] * this.currZoomLevel;\n    const paddingProp = axis === 'x' ? 'left' : 'top';\n    const padding = parsePaddingOption(paddingProp, pswp.options, pswp.viewportSize);\n\n    const panAreaSize = this.slide.panAreaSize[axis];\n\n    // Default position of element.\n    // By defaul it is center of viewport:\n    this.center[axis] = Math.round((panAreaSize - elSize) / 2) + padding;\n\n    // maximum pan position\n    this.max[axis] = (elSize > panAreaSize)\n      ? Math.round(panAreaSize - elSize) + padding\n      : this.center[axis];\n\n    // minimum pan position\n    this.min[axis] = (elSize > panAreaSize)\n      ? padding\n      : this.center[axis];\n  }\n\n  // _getZeroBounds\n  reset() {\n    this.center.x = 0;\n    this.center.y = 0;\n    this.max.x = 0;\n    this.max.y = 0;\n    this.min.x = 0;\n    this.min.y = 0;\n  }\n\n  /**\n   * Correct pan position if it's beyond the bounds\n   *\n   * @param {String} axis x or y\n   * @param {Object} panOffset\n   */\n  correctPan(axis, panOffset) { // checkPanBounds\n    return clamp(panOffset, this.max[axis], this.min[axis]);\n  }\n}\n\n/**\n * Calculates zoom levels for specific slide.\n * Depends on viewport size and image size.\n */\n\nconst MAX_IMAGE_WIDTH = 4000;\n\nclass ZoomLevel {\n  /**\n   * @param {Object} options PhotoSwipe options\n   * @param {Object} itemData Slide data\n   * @param {Integer} index Slide index\n   * @param {PhotoSwipe|undefined} pswp PhotoSwipe instance, can be undefined if not initialized yet\n   */\n  constructor(options, itemData, index, pswp) {\n    this.pswp = pswp;\n    this.options = options;\n    this.itemData = itemData;\n    this.index = index;\n  }\n\n  /**\n   * Calculate initial, secondary and maximum zoom level for the specified slide.\n   *\n   * It should be called when either image or viewport size changes.\n   *\n   * @param {Slide} slide\n   */\n  update(maxWidth, maxHeight, panAreaSize) {\n    this.elementSize = {\n      x: maxWidth,\n      y: maxHeight\n    };\n\n    this.panAreaSize = panAreaSize;\n\n    const hRatio = this.panAreaSize.x / this.elementSize.x;\n    const vRatio = this.panAreaSize.y / this.elementSize.y;\n\n    this.fit = Math.min(1, hRatio < vRatio ? hRatio : vRatio);\n    this.fill = Math.min(1, hRatio > vRatio ? hRatio : vRatio);\n\n    // zoom.vFill defines zoom level of the image\n    // when it has 100% of viewport vertical space (height)\n    this.vFill = Math.min(1, vRatio);\n\n    this.initial = this._getInitial();\n    this.secondary = this._getSecondary();\n    this.max = Math.max(\n      this.initial,\n      this.secondary,\n      this._getMax()\n    );\n\n    this.min = Math.min(\n      this.fit,\n      this.initial,\n      this.secondary\n    );\n\n    if (this.pswp) {\n      this.pswp.dispatch('zoomLevelsUpdate', { zoomLevels: this, slideData: this.itemData });\n    }\n  }\n\n  /**\n   * Parses user-defined zoom option.\n   *\n   * @param {Mixed} optionPrefix Zoom level option prefix (initial, secondary, max)\n   */\n  _parseZoomLevelOption(optionPrefix) {\n    // zoom.initial\n    // zoom.secondary\n    // zoom.max\n    const optionValue = this.options[optionPrefix + 'ZoomLevel'];\n\n    if (!optionValue) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      return optionValue(this);\n    }\n\n    if (optionValue === 'fill') {\n      return this.fill;\n    }\n\n    if (optionValue === 'fit') {\n      return this.fit;\n    }\n\n    return Number(optionValue);\n  }\n\n  /**\n   * Get zoom level to which image will be zoomed after double-tap gesture,\n   * or when user clicks on zoom icon,\n   * or mouse-click on image itself.\n   * If you return 1 image will be zoomed to its original size.\n   *\n   * @return {Number}\n   */\n  _getSecondary() {\n    let currZoomLevel = this._parseZoomLevelOption('secondary');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // 3x of \"fit\" state, but not larger than original\n    currZoomLevel = Math.min(1, this.fit * 3);\n\n    if (currZoomLevel * this.elementSize.x > MAX_IMAGE_WIDTH) {\n      currZoomLevel = MAX_IMAGE_WIDTH / this.elementSize.x;\n    }\n\n    return currZoomLevel;\n  }\n\n  /**\n   * Get initial image zoom level.\n   *\n   * @return {Number}\n   */\n  _getInitial() {\n    return this._parseZoomLevelOption('initial') || this.fit;\n  }\n\n  /**\n   * Maximum zoom level when user zooms\n   * via zoom/pinch gesture,\n   * via cmd/ctrl-wheel or via trackpad.\n   *\n   * @return {Number}\n   */\n  _getMax() {\n    const currZoomLevel = this._parseZoomLevelOption('max');\n\n    if (currZoomLevel) {\n      return currZoomLevel;\n    }\n\n    // max zoom level is x4 from \"fit state\",\n    // used for zoom gesture and ctrl/trackpad zoom\n    return Math.max(1, this.fit * 4);\n  }\n}\n\nclass Placeholder {\n  /**\n   * @param {String|false} imageSrc\n   * @param {Element} container\n   */\n  constructor(imageSrc, container) {\n    // Create placeholder\n    // (stretched thumbnail or simple div behind the main image)\n    this.element = createElement(\n      'pswp__img pswp__img--placeholder',\n      imageSrc ? 'img' : '',\n      container\n    );\n\n    if (imageSrc) {\n      this.element.decoding = 'async';\n      this.element.alt = '';\n      this.element.src = imageSrc;\n      this.element.setAttribute('role', 'presentation');\n    }\n\n    this.element.setAttribute('aria-hiden', 'true');\n  }\n\n  setDisplayedSize(width, height) {\n    if (!this.element) {\n      return;\n    }\n\n    if (this.element.tagName === 'IMG') {\n      // Use transform scale() to modify img placeholder size\n      // (instead of changing width/height directly).\n      // This helps with performance, specifically in iOS15 Safari.\n      setWidthHeight(this.element, 250, 'auto');\n      this.element.style.transformOrigin = '0 0';\n      this.element.style.transform = toTransformString(0, 0, width / 250);\n    } else {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  destroy() {\n    if (this.element.parentNode) {\n      this.element.remove();\n    }\n    this.element = null;\n  }\n}\n\n/**\n * Renders and allows to control a single slide\n */\n\nclass Slide {\n  constructor(data, index, pswp) {\n    this.data = data;\n    this.index = index;\n    this.pswp = pswp;\n    this.isActive = (index === pswp.currIndex);\n    this.currentResolution = 0;\n    this.panAreaSize = {};\n\n    this.isFirstSlide = (this.isActive && !pswp.opener.isOpen);\n\n    this.zoomLevels = new ZoomLevel(pswp.options, data, index, pswp);\n\n    this.pswp.dispatch('gettingData', {\n      slide: this,\n      data: this.data,\n      index\n    });\n\n    this.pan = {\n      x: 0,\n      y: 0\n    };\n\n    this.content = this.pswp.contentLoader.getContentBySlide(this);\n\n    this.currZoomLevel = 1;\n    this.width = this.content.width;\n    this.height = this.content.height;\n\n    this.bounds = new PanBounds(this);\n\n    this.prevDisplayedWidth = -1;\n    this.prevDisplayedHeight = -1;\n\n    this.pswp.dispatch('slideInit', { slide: this });\n  }\n\n  /**\n   * If this slide is active/current/visible\n   *\n   * @param {Boolean} isActive\n   */\n  setIsActive(isActive) {\n    if (isActive && !this.isActive) {\n      // slide just became active\n      this.activate();\n    } else if (!isActive && this.isActive) {\n      // slide just became non-active\n      this.deactivate();\n    }\n  }\n\n  /**\n   * Appends slide content to DOM\n   */\n  append(holderElement) {\n    this.holderElement = holderElement;\n\n    // Slide appended to DOM\n    if (!this.data) {\n      this.holderElement.innerHTML = '';\n      return;\n    }\n\n    this.calculateSize();\n\n    this.container = createElement('pswp__zoom-wrap');\n    this.container.transformOrigin = '0 0';\n\n    this.load();\n    this.appendHeavy();\n    this.updateContentSize();\n\n    this.holderElement.innerHTML = '';\n    this.holderElement.appendChild(this.container);\n\n    this.zoomAndPanToInitial();\n\n    this.pswp.dispatch('firstZoomPan', { slide: this });\n\n    this.applyCurrentZoomPan();\n\n    this.pswp.dispatch('afterSetContent', { slide: this });\n\n    if (this.isActive) {\n      this.activate();\n    }\n  }\n\n  removePlaceholder() {\n    if (this.placeholder && this.content && !this.content.keepPlaceholder()) {\n      // With delay, as image might be loaded, but not decoded\n      setTimeout(() => {\n        if (this.placeholder) {\n          this.placeholder.destroy();\n          this.placeholder = null;\n        }\n      }, 500);\n    }\n  }\n\n  load() {\n    if (this.usePlaceholder() && !this.placeholder) {\n      const placeholderSrc = this.pswp.applyFilters(\n        'placeholderSrc',\n        (this.data.msrc && this.isFirstSlide) ? this.data.msrc : false,\n        this\n      );\n      this.placeholder = new Placeholder(\n        placeholderSrc,\n        this.container\n      );\n    }\n\n    this.content.load();\n    this.pswp.dispatch('slideLoad', { slide: this });\n  }\n\n  /**\n   * Append \"heavy\" DOM elements\n   *\n   * This may depend on a type of slide,\n   * but generally these are large images.\n   */\n  appendHeavy() {\n    const { pswp } = this;\n    const appendHeavyNearby = true;\n\n    // Avoid appending heavy elements during animations\n    if (this.heavyAppended\n        || !pswp.opener.isOpen\n        || pswp.mainScroll.isShifted()\n        || (!this.isActive && !appendHeavyNearby)) {\n      return;\n    }\n\n    if (this.pswp.dispatch('appendHeavy', { slide: this }).defaultPrevented) {\n      return;\n    }\n\n    this.heavyAppended = true;\n\n    if (this.content.state === LOAD_STATE.ERROR) {\n      this.displayError();\n    } else {\n      this.content.appendTo(this.container);\n      if (this.placeholder && this.content.state === LOAD_STATE.LOADED) {\n        this.removePlaceholder();\n      }\n    }\n\n    this.pswp.dispatch('appendHeavyContent', { slide: this });\n  }\n\n  /**\n   * Append HTML content to slide container\n   * (usually item.html or error message)\n   *\n   * @param {DOMElement} containerEl\n   * @param {String} html\n   */\n  setSlideHTML(html) {\n    const { container } = this;\n    if (html.tagName) {\n      container.appendChild(html);\n    } else {\n      container.innerHTML = html;\n    }\n  }\n\n  displayError() {\n    const errorElement = this.content.getErrorElement();\n    errorElement.style.position = 'absolute';\n    errorElement.style.left = 0;\n    errorElement.style.top = 0;\n    this.activeErrorElement = errorElement;\n    this.setSlideHTML(errorElement);\n    this.updateContentSize(true);\n  }\n\n  /**\n   * Triggered when this slide is active (selected).\n   *\n   * If it's part of opening/closing transition -\n   * activate() will trigger after the transition is ended.\n   */\n  activate() {\n    this.isActive = true;\n    this.appendHeavy();\n    this.content.activate();\n    this.pswp.dispatch('slideActivate', { slide: this });\n  }\n\n  /**\n   * Triggered when this slide becomes inactive.\n   *\n   * Slide can become inactive only after it was active.\n   */\n  deactivate() {\n    this.isActive = false;\n    this.content.deactivate();\n\n    // reset zoom level\n    this.currentResolution = 0;\n    this.zoomAndPanToInitial();\n    this.applyCurrentZoomPan();\n    this.updateContentSize();\n\n    this.pswp.dispatch('slideDeactivate', { slide: this });\n  }\n\n  /**\n   * The slide should destroy itself, it will never be used again.\n   * (unbind all events and destroy internal components)\n   */\n  destroy() {\n    this.content.remove();\n    this.pswp.dispatch('slideDestroy', { slide: this });\n  }\n\n  resize() {\n    if (this.currZoomLevel === this.zoomLevels.initial || !this.isActive) {\n      // Keep initial zoom level if it was before the resize,\n      // as well as when this slide is not active\n\n      // Reset position and scale to original state\n      this.calculateSize();\n      this.currentResolution = 0;\n      this.zoomAndPanToInitial();\n      this.applyCurrentZoomPan();\n      this.updateContentSize();\n    } else {\n      // readjust pan position if it's beyond the bounds\n      this.calculateSize();\n      this.bounds.update(this.currZoomLevel);\n      this.panTo(this.pan.x, this.pan.y);\n    }\n  }\n\n\n  /**\n   * Apply size to current slide content,\n   * based on the current resolution and scale.\n   *\n   * @param {Boolean} force if size should be updated even if dimensions weren't changed\n   */\n  updateContentSize(force) {\n    // Use initial zoom level\n    // if resolution is not defined (user didn't zoom yet)\n    const scaleMultiplier = this.currentResolution || this.zoomLevels.initial;\n\n    if (!scaleMultiplier) {\n      return;\n    }\n\n    const width = Math.round(this.width * scaleMultiplier) || this.pswp.viewportSize.x;\n    const height = Math.round(this.height * scaleMultiplier) || this.pswp.viewportSize.y;\n\n    if (!this.sizeChanged(width, height) && !force) {\n      return;\n    }\n\n    if (this.placeholder) {\n      this.placeholder.setDisplayedSize(width, height);\n    }\n\n    if (this.activeErrorElement) {\n      setWidthHeight(this.activeErrorElement, width, height);\n    }\n\n    this.content.setDisplayedSize(width, height);\n  }\n\n  sizeChanged(width, height) {\n    if (width !== this.prevDisplayedWidth\n        || height !== this.prevDisplayedHeight) {\n      this.prevDisplayedWidth = width;\n      this.prevDisplayedHeight = height;\n      return true;\n    }\n\n    return false;\n  }\n\n  getPlaceholderElement() {\n    if (this.placeholder) {\n      return this.placeholder.element;\n    }\n  }\n\n  /**\n   * Zoom current slide image to...\n   *\n   * @param  {Number} destZoomLevel      Destination zoom level.\n   * @param  {Object|false} centerPoint  Transform origin center point,\n   *                                     or false if viewport center should be used.\n   * @param  {Number} transitionDuration Transition duration, may be set to 0.\n   * @param  {Boolean|null} ignoreBounds Minimum and maximum zoom levels will be ignored.\n   * @return {Boolean|null}              Returns true if animated.\n   */\n  zoomTo(destZoomLevel, centerPoint, transitionDuration, ignoreBounds) {\n    const { pswp } = this;\n    if (!this.isZoomable()\n        || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    pswp.dispatch('beforeZoomTo', {\n      destZoomLevel, centerPoint, transitionDuration\n    });\n\n    // stop all pan and zoom transitions\n    pswp.animations.stopAllPan();\n\n    // if (!centerPoint) {\n    //   centerPoint = pswp.getViewportCenterPoint();\n    // }\n\n    const prevZoomLevel = this.currZoomLevel;\n\n    if (!ignoreBounds) {\n      destZoomLevel = clamp(destZoomLevel, this.zoomLevels.min, this.zoomLevels.max);\n    }\n\n    // if (transitionDuration === undefined) {\n    //   transitionDuration = this.pswp.options.zoomAnimationDuration;\n    // }\n\n    this.setZoomLevel(destZoomLevel);\n    this.pan.x = this.calculateZoomToPanOffset('x', centerPoint, prevZoomLevel);\n    this.pan.y = this.calculateZoomToPanOffset('y', centerPoint, prevZoomLevel);\n    roundPoint(this.pan);\n\n    const finishTransition = () => {\n      this._setResolution(destZoomLevel);\n      this.applyCurrentZoomPan();\n    };\n\n    if (!transitionDuration) {\n      finishTransition();\n    } else {\n      pswp.animations.startTransition({\n        isPan: true,\n        name: 'zoomTo',\n        target: this.container,\n        transform: this.getCurrentTransform(),\n        onComplete: finishTransition,\n        duration: transitionDuration,\n        easing: pswp.options.easing\n      });\n    }\n  }\n\n  toggleZoom(centerPoint) {\n    this.zoomTo(\n      this.currZoomLevel === this.zoomLevels.initial\n        ? this.zoomLevels.secondary : this.zoomLevels.initial,\n      centerPoint,\n      this.pswp.options.zoomAnimationDuration\n    );\n  }\n\n  /**\n   * Updates zoom level property and recalculates new pan bounds,\n   * unlike zoomTo it does not apply transform (use applyCurrentZoomPan)\n   *\n   * @param {Number} currZoomLevel\n   */\n  setZoomLevel(currZoomLevel) {\n    this.currZoomLevel = currZoomLevel;\n    this.bounds.update(this.currZoomLevel);\n  }\n\n  /**\n   * Get pan position after zoom at a given `point`.\n   *\n   * Always call setZoomLevel(newZoomLevel) beforehand to recalculate\n   * pan bounds according to the new zoom level.\n   *\n   * @param {String} axis\n   * @param {Object|null} centerPoint point based on which zoom is performed,\n   *                                  usually refers to the current mouse position,\n   *                                  if false - viewport center will be used.\n   * @param {Number|null} prevZoomLevel Zoom level before new zoom was applied.\n   */\n  calculateZoomToPanOffset(axis, point, prevZoomLevel) {\n    const totalPanDistance = this.bounds.max[axis] - this.bounds.min[axis];\n    if (totalPanDistance === 0) {\n      return this.bounds.center[axis];\n    }\n\n    if (!point) {\n      point = this.pswp.getViewportCenterPoint();\n    }\n\n    const zoomFactor = this.currZoomLevel / prevZoomLevel;\n    return this.bounds.correctPan(\n      axis,\n      (this.pan[axis] - point[axis]) * zoomFactor + point[axis]\n    );\n  }\n\n  /**\n   * Apply pan and keep it within bounds.\n   *\n   * @param {Number} panX\n   * @param {Number} panY\n   */\n  panTo(panX, panY) {\n    this.pan.x = this.bounds.correctPan('x', panX);\n    this.pan.y = this.bounds.correctPan('y', panY);\n    this.applyCurrentZoomPan();\n  }\n\n  /**\n   * If the slide in the current state can be panned by the user\n   */\n  isPannable() {\n    return this.width && (this.currZoomLevel > this.zoomLevels.fit);\n  }\n\n  /**\n   * If the slide can be zoomed\n   */\n  isZoomable() {\n    return this.width && this.content.isZoomable();\n  }\n\n  usePlaceholder() {\n    return this.content.usePlaceholder();\n  }\n\n  /**\n   * Apply transform and scale based on\n   * the current pan position (this.pan) and zoom level (this.currZoomLevel)\n   */\n  applyCurrentZoomPan() {\n    this._applyZoomTransform(this.pan.x, this.pan.y, this.currZoomLevel);\n    if (this === this.pswp.currSlide) {\n      this.pswp.dispatch('zoomPanUpdate', { slide: this });\n    }\n  }\n\n  zoomAndPanToInitial() {\n    this.currZoomLevel = this.zoomLevels.initial;\n\n    // pan according to the zoom level\n    this.bounds.update(this.currZoomLevel);\n    equalizePoints(this.pan, this.bounds.center);\n    this.pswp.dispatch('initialZoomPan', { slide: this });\n  }\n\n  /**\n   * Set translate and scale based on current resolution\n   *\n   * @param {Number} x\n   * @param {Number} y\n   * @param {Number} zoom\n   */\n  _applyZoomTransform(x, y, zoom) {\n    zoom /= this.currentResolution || this.zoomLevels.initial;\n    setTransform(this.container, x, y, zoom);\n  }\n\n  calculateSize() {\n    // this.zoomLevels.fit = 1;\n    // this.zoomLevels.vFill = 1;\n    // this.zoomLevels.initial = 1;\n\n    const { pswp } = this;\n\n    equalizePoints(\n      this.panAreaSize,\n      getPanAreaSize(pswp.options, pswp.viewportSize)\n    );\n\n    this.zoomLevels.update(this.width, this.height, this.panAreaSize);\n\n    pswp.dispatch('calcSlideSize', {\n      slide: this\n    });\n  }\n\n  getCurrentTransform() {\n    const scale = this.currZoomLevel / (this.currentResolution || this.zoomLevels.initial);\n    return toTransformString(this.pan.x, this.pan.y, scale);\n  }\n\n  /**\n   * Set resolution and re-render the image.\n   *\n   * For example, if the real image size is 2000x1500,\n   * and resolution is 0.5 - it will be rendered as 1000x750.\n   *\n   * Image with zoom level 2 and resolution 0.5 is\n   * the same as image with zoom level 1 and resolution 1.\n   *\n   * Used to optimize animations and make\n   * sure that browser renders image in highest quality.\n   * Also used by responsive images to load the correct one.\n   *\n   * @param {Number} newResolution\n   */\n  _setResolution(newResolution) {\n    if (newResolution === this.currentResolution) {\n      return;\n    }\n\n    this.currentResolution = newResolution;\n    this.updateContentSize();\n\n    this.pswp.dispatch('resolutionChanged');\n  }\n}\n\n/**\n * Handles single pointer dragging\n */\n\nconst PAN_END_FRICTION = 0.35;\nconst VERTICAL_DRAG_FRICTION = 0.6;\n\n// 1 corresponds to the third of viewport height\nconst MIN_RATIO_TO_CLOSE = 0.4;\n\n// Minimum speed required to navigate\n// to next or previous slide\nconst MIN_NEXT_SLIDE_SPEED = 0.5;\n\nfunction project(initialVelocity, decelerationRate) {\n  return initialVelocity * decelerationRate / (1 - decelerationRate);\n}\n\nclass DragHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = gestures.pswp;\n    this.startPan = {};\n  }\n\n  start() {\n    equalizePoints(this.startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAll();\n  }\n\n  change() {\n    const { p1, prevP1, dragAxis, pswp } = this.gestures;\n    const { currSlide } = pswp;\n\n    if (dragAxis === 'y'\n        && pswp.options.closeOnVerticalDrag\n        && currSlide.currZoomLevel <= currSlide.zoomLevels.fit\n        && !this.gestures.isMultitouch) {\n      // Handle vertical drag to close\n      const panY = currSlide.pan.y + (p1.y - prevP1.y);\n      if (!pswp.dispatch('verticalDrag', { panY }).defaultPrevented) {\n        this._setPanWithFriction('y', panY, VERTICAL_DRAG_FRICTION);\n        const bgOpacity = 1 - Math.abs(this._getVerticalDragRatio(currSlide.pan.y));\n        pswp.applyBgOpacity(bgOpacity);\n        currSlide.applyCurrentZoomPan();\n      }\n    } else {\n      const mainScrollChanged = this._panOrMoveMainScroll('x');\n      if (!mainScrollChanged) {\n        this._panOrMoveMainScroll('y');\n\n        roundPoint(currSlide.pan);\n        currSlide.applyCurrentZoomPan();\n      }\n    }\n  }\n\n  end() {\n    const { pswp, velocity } = this.gestures;\n    const { mainScroll } = pswp;\n    let indexDiff = 0;\n\n    pswp.animations.stopAll();\n\n    // Handle main scroll if it's shifted\n    if (mainScroll.isShifted()) {\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - mainScroll.getCurrSlideX();\n\n      // Ratio between 0 and 1:\n      // 0 - slide is not visible at all,\n      // 0.5 - half of the slide is vicible\n      // 1 - slide is fully visible\n      const currentSlideVisibilityRatio = (mainScrollShiftDiff / pswp.viewportSize.x);\n\n      // Go next slide.\n      //\n      // - if velocity and its direction is matched\n      //   and we see at least tiny part of the next slide\n      //\n      // - or if we see less than 50% of the current slide\n      //   and velocity is close to 0\n      //\n      if ((velocity.x < -MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio < 0)\n          || (velocity.x < 0.1 && currentSlideVisibilityRatio < -0.5)) {\n        // Go to next slide\n        indexDiff = 1;\n        velocity.x = Math.min(velocity.x, 0);\n      } else if ((velocity.x > MIN_NEXT_SLIDE_SPEED && currentSlideVisibilityRatio > 0)\n          || (velocity.x > -0.1 && currentSlideVisibilityRatio > 0.5)) {\n        // Go to prev slide\n        indexDiff = -1;\n        velocity.x = Math.max(velocity.x, 0);\n      }\n\n      mainScroll.moveIndexBy(indexDiff, true, velocity.x);\n    }\n\n    // Restore zoom level\n    if ((pswp.currSlide.currZoomLevel > pswp.currSlide.zoomLevels.max\n        && this.pswp.options.limitMaxZoom)\n        || this.gestures.isMultitouch) {\n      this.gestures.zoomLevels.correctZoomPan(true);\n    } else {\n      // we run two animations instead of one,\n      // as each axis has own pan boundaries and thus different spring function\n      // (correctZoomPan does not have this functionality,\n      //  it animates all properties with single timing function)\n      this._finishPanGestureForAxis('x');\n      this._finishPanGestureForAxis('y');\n    }\n  }\n\n  _finishPanGestureForAxis(axis) {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n    const { velocity } = this.gestures;\n    const { pan, bounds } = currSlide;\n    const panPos = pan[axis];\n    const restoreBgOpacity = (pswp.bgOpacity < 1 && axis === 'y');\n\n    // 0.995 means - scroll view loses 0.5% of its velocity per millisecond\n    // Inceasing this number will reduce travel distance\n    const decelerationRate = 0.995; // 0.99\n\n    // Pan position if there is no bounds\n    const projectedPosition = panPos + project(velocity[axis], decelerationRate);\n\n    if (restoreBgOpacity) {\n      const vDragRatio = this._getVerticalDragRatio(panPos);\n      const projectedVDragRatio = this._getVerticalDragRatio(projectedPosition);\n\n      // If we are above and moving upwards,\n      // or if we are below and moving downwards\n      if ((vDragRatio < 0 && projectedVDragRatio < -MIN_RATIO_TO_CLOSE)\n          || (vDragRatio > 0 && projectedVDragRatio > MIN_RATIO_TO_CLOSE)) {\n        pswp.close();\n        return;\n      }\n    }\n\n    // Pan position with corrected bounds\n    const correctedPanPosition = bounds.correctPan(axis, projectedPosition);\n\n    // Exit if pan position should not be changed\n    // or if speed it too low\n    if (panPos === correctedPanPosition) {\n      return;\n    }\n\n    // Overshoot if the final position is out of pan bounds\n    const dampingRatio = (correctedPanPosition === projectedPosition) ? 1 : 0.82;\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const totalPanDist = correctedPanPosition - panPos;\n\n    pswp.animations.startSpring({\n      name: 'panGesture' + axis,\n      isPan: true,\n      start: panPos,\n      end: correctedPanPosition,\n      velocity: velocity[axis],\n      dampingRatio,\n      onUpdate: (pos) => {\n        // Animate opacity of background relative to Y pan position of an image\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // 0 - start of animation, 1 - end of animation\n          const animationProgressRatio = 1 - (correctedPanPosition - pos) / totalPanDist;\n\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(\n            initialBgOpacity + (1 - initialBgOpacity) * animationProgressRatio,\n            0,\n            1\n          ));\n        }\n\n        pan[axis] = Math.floor(pos);\n        currSlide.applyCurrentZoomPan();\n      },\n    });\n  }\n\n  /**\n   * Update position of the main scroll,\n   * or/and update pan position of the current slide.\n   *\n   * Should return true if it changes (or can change) main scroll.\n   *\n   * @param {String} axis\n   */\n  _panOrMoveMainScroll(axis) {\n    const { p1, pswp, dragAxis, prevP1, isMultitouch } = this.gestures;\n    const { currSlide, mainScroll } = pswp;\n    const delta = (p1[axis] - prevP1[axis]);\n    const newMainScrollX = mainScroll.x + delta;\n\n    if (!delta) {\n      return;\n    }\n\n    // Always move main scroll if image can not be panned\n    if (axis === 'x' && !currSlide.isPannable() && !isMultitouch) {\n      mainScroll.moveTo(newMainScrollX, true);\n      return true; // changed main scroll\n    }\n\n    const { bounds } = currSlide;\n    const newPan = currSlide.pan[axis] + delta;\n\n    if (pswp.options.allowPanToNext\n        && dragAxis === 'x'\n        && axis === 'x'\n        && !isMultitouch) {\n      const currSlideMainScrollX = mainScroll.getCurrSlideX();\n\n      // Position of the main scroll relative to the viewport\n      const mainScrollShiftDiff = mainScroll.x - currSlideMainScrollX;\n\n      const isLeftToRight = delta > 0;\n      const isRightToLeft = !isLeftToRight;\n\n      if (newPan > bounds.min[axis] && isLeftToRight) {\n        // Panning from left to right, beyond the left edge\n\n        // Wether the image was at minimum pan position (or less)\n        // when this drag gesture started.\n        // Minimum pan position refers to the left edge of the image.\n        const wasAtMinPanPosition = (bounds.min[axis] <= this.startPan[axis]);\n\n        if (wasAtMinPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan);\n          //currSlide.pan[axis] = newPan;\n        }\n      } else if (newPan < bounds.max[axis] && isRightToLeft) {\n        // Paning from right to left, beyond the right edge\n\n        // Maximum pan position refers to the right edge of the image.\n        const wasAtMaxPanPosition = (this.startPan[axis] <= bounds.max[axis]);\n\n        if (wasAtMaxPanPosition) {\n          mainScroll.moveTo(newMainScrollX, true);\n          return true;\n        } else {\n          this._setPanWithFriction(axis, newPan);\n          //currSlide.pan[axis] = newPan;\n        }\n      } else {\n        // If main scroll is shifted\n        if (mainScrollShiftDiff !== 0) {\n          // If main scroll is shifted right\n          if (mainScrollShiftDiff > 0 /*&& isRightToLeft*/) {\n            mainScroll.moveTo(Math.max(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          } else if (mainScrollShiftDiff < 0 /*&& isLeftToRight*/) {\n            // Main scroll is shifted left (Position is less than 0 comparing to the viewport 0)\n            mainScroll.moveTo(Math.min(newMainScrollX, currSlideMainScrollX), true);\n            return true;\n          }\n        } else {\n          // We are within pan bounds, so just pan\n          this._setPanWithFriction(axis, newPan);\n        }\n      }\n    } else {\n      if (axis === 'y') {\n        // Do not pan vertically if main scroll is shifted o\n        if (!mainScroll.isShifted() && bounds.min.y !== bounds.max.y) {\n          this._setPanWithFriction(axis, newPan);\n        }\n      } else {\n        this._setPanWithFriction(axis, newPan);\n      }\n    }\n  }\n  //\n  // If we move above - the ratio is negative\n  // If we move below the ratio is positive\n\n  /**\n   * Relation between pan Y position and third of viewport height.\n   *\n   * When we are at initial position (center bounds) - the ratio is 0,\n   * if position is shifted upwards - the ratio is negative,\n   * if position is shifted downwards - the ratio is positive.\n   *\n   * @param {Number} panY The current pan Y position.\n   */\n  _getVerticalDragRatio(panY) {\n    return (panY - this.pswp.currSlide.bounds.center.y)\n            / (this.pswp.viewportSize.y / 3);\n  }\n\n  /**\n   * Set pan position of the current slide.\n   * Apply friction if the position is beyond the pan bounds,\n   * or if custom friction is defined.\n   *\n   * @param {String} axis\n   * @param {Number} potentialPan\n   * @param {Number|null} customFriction (0.1 - 1)\n   */\n  _setPanWithFriction(axis, potentialPan, customFriction) {\n    const { pan, bounds } = this.pswp.currSlide;\n    const correctedPan = bounds.correctPan(axis, potentialPan);\n    // If we are out of pan bounds\n    if (correctedPan !== potentialPan || customFriction) {\n      const delta = Math.round(potentialPan - pan[axis]);\n      pan[axis] += delta * (customFriction || PAN_END_FRICTION);\n    } else {\n      pan[axis] = potentialPan;\n    }\n  }\n}\n\nconst UPPER_ZOOM_FRICTION = 0.05;\nconst LOWER_ZOOM_FRICTION = 0.15;\n\n\n/**\n * Get center point between two points\n *\n * @param {Point} p\n * @param {Point} p1\n * @param {Point} p2\n */\nfunction getZoomPointsCenter(p, p1, p2) {\n  p.x = (p1.x + p2.x) / 2;\n  p.y = (p1.y + p2.y) / 2;\n  return p;\n}\n\nclass ZoomHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n    this.pswp = this.gestures.pswp;\n    this._startPan = {};\n\n    this._startZoomPoint = {};\n    this._zoomPoint = {};\n  }\n\n  start() {\n    this._startZoomLevel = this.pswp.currSlide.currZoomLevel;\n    equalizePoints(this._startPan, this.pswp.currSlide.pan);\n    this.pswp.animations.stopAllPan();\n    this._wasOverFitZoomLevel = false;\n  }\n\n  change() {\n    const { p1, startP1, p2, startP2, pswp } = this.gestures;\n    const { currSlide } = pswp;\n    const minZoomLevel = currSlide.zoomLevels.min;\n    const maxZoomLevel = currSlide.zoomLevels.max;\n\n    if (!currSlide.isZoomable() || pswp.mainScroll.isShifted()) {\n      return;\n    }\n\n    getZoomPointsCenter(this._startZoomPoint, startP1, startP2);\n    getZoomPointsCenter(this._zoomPoint, p1, p2);\n\n    let currZoomLevel = (1 / getDistanceBetween(startP1, startP2))\n                      * getDistanceBetween(p1, p2)\n                      * this._startZoomLevel;\n\n    // if (!this.zoomStarted) {\n    //   this.zoomStarted = true;\n    //   pswp.dispatch('zoomGestureStarted');\n    // }\n\n    // slightly over the zoom.fit\n    if (currZoomLevel > currSlide.zoomLevels.initial + (currSlide.zoomLevels.initial / 15)) {\n      this._wasOverFitZoomLevel = true;\n    }\n\n    if (currZoomLevel < minZoomLevel) {\n      if (pswp.options.pinchToClose\n          && !this._wasOverFitZoomLevel\n          && this._startZoomLevel <= currSlide.zoomLevels.initial) {\n        // fade out background if zooming out\n        const bgOpacity = 1 - ((minZoomLevel - currZoomLevel) / (minZoomLevel / 1.2));\n        if (!pswp.dispatch('pinchClose', { bgOpacity }).defaultPrevented) {\n          pswp.applyBgOpacity(bgOpacity);\n        }\n      } else {\n        // Apply the friction if zoom level is below the min\n        currZoomLevel = minZoomLevel - (minZoomLevel - currZoomLevel) * LOWER_ZOOM_FRICTION;\n      }\n    } else if (currZoomLevel > maxZoomLevel) {\n      // Apply the friction if zoom level is above the max\n      currZoomLevel = maxZoomLevel + (currZoomLevel - maxZoomLevel) * UPPER_ZOOM_FRICTION;\n    }\n\n    currSlide.pan.x = this._calculatePanForZoomLevel('x', currZoomLevel);\n    currSlide.pan.y = this._calculatePanForZoomLevel('y', currZoomLevel);\n\n    currSlide.setZoomLevel(currZoomLevel);\n    currSlide.applyCurrentZoomPan();\n\n\n    //_isZoomingIn = currZoomLevel > _currZoomLevel;\n    //_currZoomLevel = currZoomLevel;\n    //_applyCurrentZoomPan();\n    //_updatePrevPoints();\n  }\n\n  end() {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n    if (currSlide.currZoomLevel < currSlide.zoomLevels.initial\n        && !this._wasOverFitZoomLevel\n        && pswp.options.pinchToClose) {\n      pswp.close();\n    } else {\n      this.correctZoomPan();\n    }\n  }\n\n  _calculatePanForZoomLevel(axis, currZoomLevel) {\n    const zoomFactor = currZoomLevel / this._startZoomLevel;\n    return this._zoomPoint[axis]\n            - ((this._startZoomPoint[axis] - this._startPan[axis]) * zoomFactor);\n  }\n\n  /**\n   * Correct currZoomLevel and pan if they are\n   * beyond minimum or maximum values.\n   * With animation.\n   *\n   * @param {Boolean} ignoreGesture Wether gesture coordinates should be ignored\n   *                                when calculating destination pan position.\n   */\n  correctZoomPan(ignoreGesture) {\n    const { pswp } = this;\n    const { currSlide } = pswp;\n\n    if (!currSlide.isZoomable()) {\n      return;\n    }\n\n    if (this._zoomPoint.x === undefined) {\n      ignoreGesture = true;\n    }\n\n    const prevZoomLevel = currSlide.currZoomLevel;\n\n    let destinationZoomLevel;\n    let currZoomLevelNeedsChange = true;\n\n    if (prevZoomLevel < currSlide.zoomLevels.initial) {\n      destinationZoomLevel = currSlide.zoomLevels.initial;\n      // zoom to min\n    } else if (prevZoomLevel > currSlide.zoomLevels.max) {\n      destinationZoomLevel = currSlide.zoomLevels.max;\n      // zoom to max\n    } else {\n      currZoomLevelNeedsChange = false;\n      destinationZoomLevel = prevZoomLevel;\n    }\n\n    const initialBgOpacity = pswp.bgOpacity;\n    const restoreBgOpacity = pswp.bgOpacity < 1;\n\n    const initialPan = equalizePoints({}, currSlide.pan);\n    let destinationPan = equalizePoints({}, initialPan);\n\n    if (ignoreGesture) {\n      this._zoomPoint.x = 0;\n      this._zoomPoint.y = 0;\n      this._startZoomPoint.x = 0;\n      this._startZoomPoint.y = 0;\n      this._startZoomLevel = prevZoomLevel;\n      equalizePoints(this._startPan, initialPan);\n    }\n\n    if (currZoomLevelNeedsChange) {\n      destinationPan = {\n        x: this._calculatePanForZoomLevel('x', destinationZoomLevel),\n        y: this._calculatePanForZoomLevel('y', destinationZoomLevel)\n      };\n    }\n\n    // set zoom level, so pan bounds are updated according to it\n    currSlide.setZoomLevel(destinationZoomLevel);\n\n    destinationPan = {\n      x: currSlide.bounds.correctPan('x', destinationPan.x),\n      y: currSlide.bounds.correctPan('y', destinationPan.y)\n    };\n\n    // return zoom level and its bounds to initial\n    currSlide.setZoomLevel(prevZoomLevel);\n\n    let panNeedsChange = true;\n    if (pointsEqual(destinationPan, initialPan)) {\n      panNeedsChange = false;\n    }\n\n    if (!panNeedsChange && !currZoomLevelNeedsChange && !restoreBgOpacity) {\n      // update resolution after gesture\n      currSlide._setResolution(destinationZoomLevel);\n      currSlide.applyCurrentZoomPan();\n\n      // nothing to animate\n      return;\n    }\n\n    pswp.animations.stopAllPan();\n\n    pswp.animations.startSpring({\n      isPan: true,\n      start: 0,\n      end: 1000,\n      velocity: 0,\n      dampingRatio: 1,\n      naturalFrequency: 40,\n      onUpdate: (now) => {\n        now /= 1000; // 0 - start, 1 - end\n\n        if (panNeedsChange || currZoomLevelNeedsChange) {\n          if (panNeedsChange) {\n            currSlide.pan.x = initialPan.x + (destinationPan.x - initialPan.x) * now;\n            currSlide.pan.y = initialPan.y + (destinationPan.y - initialPan.y) * now;\n          }\n\n          if (currZoomLevelNeedsChange) {\n            const newZoomLevel = prevZoomLevel\n                        + (destinationZoomLevel - prevZoomLevel) * now;\n            currSlide.setZoomLevel(newZoomLevel);\n          }\n\n          currSlide.applyCurrentZoomPan();\n        }\n\n        // Restore background opacity\n        if (restoreBgOpacity && pswp.bgOpacity < 1) {\n          // We clamp opacity to keep it between 0 and 1.\n          // As progress ratio can be larger than 1 due to overshoot,\n          // and we do not want to bounce opacity.\n          pswp.applyBgOpacity(clamp(\n            initialBgOpacity + (1 - initialBgOpacity) * now, 0, 1\n          ));\n        }\n      },\n      onComplete: () => {\n        // update resolution after transition ends\n        currSlide._setResolution(destinationZoomLevel);\n        currSlide.applyCurrentZoomPan();\n      }\n    });\n  }\n}\n\n/**\n * Tap, double-tap handler.\n */\n\n/**\n * Whether the tap was performed on the main slide\n * (rather than controls or caption).\n *\n * @param {Event} event\n */\nfunction didTapOnMainContent(event) {\n  return !!(event.target.closest('.pswp__container'));\n}\n\nclass TapHandler {\n  constructor(gestures) {\n    this.gestures = gestures;\n  }\n\n\n  click(point, originalEvent) {\n    const targetClassList = originalEvent.target.classList;\n    const isImageClick = targetClassList.contains('pswp__img');\n    const isBackgroundClick = targetClassList.contains('pswp__item')\n                              || targetClassList.contains('pswp__zoom-wrap');\n\n    if (isImageClick) {\n      this._doClickOrTapAction('imageClick', point, originalEvent);\n    } else if (isBackgroundClick) {\n      this._doClickOrTapAction('bgClick', point, originalEvent);\n    }\n  }\n\n  tap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('tap', point, originalEvent);\n    }\n  }\n\n  doubleTap(point, originalEvent) {\n    if (didTapOnMainContent(originalEvent)) {\n      this._doClickOrTapAction('doubleTap', point, originalEvent);\n    }\n  }\n\n  _doClickOrTapAction(actionName, point, originalEvent) {\n    const { pswp } = this.gestures;\n    const { currSlide } = pswp;\n    const optionValue = pswp.options[actionName + 'Action'];\n\n    if (pswp.dispatch(actionName + 'Action', { point, originalEvent }).defaultPrevented) {\n      return;\n    }\n\n    if (typeof optionValue === 'function') {\n      optionValue.call(pswp, point, originalEvent);\n      return;\n    }\n\n    switch (optionValue) {\n      case 'close':\n      case 'next':\n        pswp[optionValue]();\n        break;\n      case 'zoom':\n        currSlide.toggleZoom(point);\n        break;\n      case 'zoom-or-close':\n        // by default click zooms current image,\n        // if it can not be zoomed - gallery will be closed\n        if (currSlide.isZoomable()\n            && currSlide.zoomLevels.secondary !== currSlide.zoomLevels.initial) {\n          currSlide.toggleZoom(point);\n        } else if (pswp.options.clickToCloseNonZoomable) {\n          pswp.close();\n        }\n        break;\n      case 'toggle-controls':\n        this.gestures.pswp.template.classList.toggle('pswp--ui-visible');\n        // if (_controlsVisible) {\n        //   _ui.hideControls();\n        // } else {\n        //   _ui.showControls();\n        // }\n        break;\n    }\n  }\n}\n\n/**\n * Gestures class bind touch, pointer or mouse events\n * and emits drag to drag-handler and zoom events zoom-handler.\n *\n * Drag and zoom events are emited in requestAnimationFrame,\n * and only when one of pointers was actually changed.\n */\n\n// How far should user should drag\n// until we can determine that the gesture is swipe and its direction\nconst AXIS_SWIPE_HYSTERISIS = 10;\n//const PAN_END_FRICTION = 0.35;\n\nconst DOUBLE_TAP_DELAY = 300; // ms\nconst MIN_TAP_DISTANCE = 25; // px\n\nclass Gestures {\n  constructor(pswp) {\n    this.pswp = pswp;\n\n\n    // point objects are defined once and reused\n    // PhotoSwipe keeps track only of two pointers, others are ignored\n    this.p1 = {}; // the first pressed pointer\n    this.p2 = {}; // the second pressed pointer\n    this.prevP1 = {};\n    this.prevP2 = {};\n    this.startP1 = {};\n    this.startP2 = {};\n    this.velocity = {};\n\n    this._lastStartP1 = {};\n    this._intervalP1 = {};\n    this._numActivePoints = 0;\n    this._ongoingPointers = [];\n\n    this._touchEventEnabled = 'ontouchstart' in window;\n    this._pointerEventEnabled = !!(window.PointerEvent);\n    this.supportsTouch = this._touchEventEnabled\n                          || (this._pointerEventEnabled && navigator.maxTouchPoints > 1);\n\n    if (!this.supportsTouch) {\n      // disable pan to next slide for non-touch devices\n      pswp.options.allowPanToNext = false;\n    }\n\n    this.drag = new DragHandler(this);\n    this.zoomLevels = new ZoomHandler(this);\n    this.tapHandler = new TapHandler(this);\n\n    pswp.on('bindEvents', () => {\n      pswp.events.add(pswp.scrollWrap, 'click', e => this._onClick(e));\n\n      if (this._pointerEventEnabled) {\n        this._bindEvents('pointer', 'down', 'up', 'cancel');\n      } else if (this._touchEventEnabled) {\n        this._bindEvents('touch', 'start', 'end', 'cancel');\n\n        // In previous versions we also bound mouse event here,\n        // in case device supports both touch and mouse events,\n        // but newer versions of browsers now support PointerEvent.\n\n        // on iOS10 if you bind touchmove/end after touchstart,\n        // and you don't preventDefault touchstart (which PhotoSwipe does),\n        // preventDefault will have no effect on touchmove and touchend.\n        // Unless you bind it previously.\n        pswp.scrollWrap.ontouchmove = () => {}; // eslint-disable-line\n        pswp.scrollWrap.ontouchend = () => {}; // eslint-disable-line\n      } else {\n        this._bindEvents('mouse', 'down', 'up');\n      }\n    });\n  }\n\n  _bindEvents(pref, down, up, cancel) {\n    const { pswp } = this;\n    const { events } = pswp;\n\n    const cancelEvent = cancel ? pref + cancel : '';\n\n    events.add(pswp.scrollWrap, pref + down, this.onPointerDown.bind(this));\n    events.add(window, pref + 'move', this.onPointerMove.bind(this));\n    events.add(window, pref + up, this.onPointerUp.bind(this));\n    if (cancelEvent) {\n      events.add(pswp.scrollWrap, cancelEvent, this.onPointerUp.bind(this));\n    }\n  }\n\n\n  onPointerDown(e) {\n    // We do not call preventDefault for touch events\n    // to allow browser to show native dialog on longpress\n    // (the one that allows to save image or open it in new tab).\n    //\n    // Desktop Safari allows to drag images when preventDefault isn't called on mousedown,\n    // even though preventDefault IS called on mousemove. That's why we preventDefault mousedown.\n    let isMousePointer;\n    if (e.type === 'mousedown' || e.pointerType === 'mouse') {\n      isMousePointer = true;\n    }\n\n    // Allow dragging only via left mouse button.\n    // http://www.quirksmode.org/js/events_properties.html\n    // https://developer.mozilla.org/en-US/docs/Web/API/event.button\n    if (isMousePointer && e.button > 0) {\n      return;\n    }\n\n    const { pswp } = this;\n\n    // if PhotoSwipe is opening or closing\n    if (!pswp.opener.isOpen) {\n      e.preventDefault();\n      return;\n    }\n\n    if (pswp.dispatch('pointerDown', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (isMousePointer) {\n      pswp.mouseDetected();\n\n      // preventDefault mouse event to prevent\n      // browser image drag feature\n      this._preventPointerEventBehaviour(e);\n    }\n\n    pswp.animations.stopAll();\n\n    this._updatePoints(e, 'down');\n\n    this.pointerDown = true;\n\n    if (this._numActivePoints === 1) {\n      this.dragAxis = null;\n      // we need to store initial point to determine the main axis,\n      // drag is activated only after the axis is determined\n      equalizePoints(this.startP1, this.p1);\n    }\n\n    if (this._numActivePoints > 1) {\n      // Tap or double tap should not trigger if more than one pointer\n      this._clearTapTimer();\n      this.isMultitouch = true;\n    } else {\n      this.isMultitouch = false;\n    }\n  }\n\n  onPointerMove(e) {\n    e.preventDefault(); // always preventDefault move event\n\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'move');\n\n    if (this.pswp.dispatch('pointerMove', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 1 && !this.isDragging) {\n      if (!this.dragAxis) {\n        this._calculateDragDirection();\n      }\n\n      // Drag axis was detected, emit drag.start\n      if (this.dragAxis && !this.isDragging) {\n        if (this.isZooming) {\n          this.isZooming = false;\n          this.zoomLevels.end();\n        }\n\n        this.isDragging = true;\n        this._clearTapTimer(); // Tap can not trigger after drag\n\n        // Adjust starting point\n        this._updateStartPoints();\n        this._intervalTime = Date.now();\n        //this._startTime = this._intervalTime;\n        this._velocityCalculated = false;\n        equalizePoints(this._intervalP1, this.p1);\n        this.velocity.x = 0;\n        this.velocity.y = 0;\n        this.drag.start();\n\n        this._rafStopLoop();\n        this._rafRenderLoop();\n      }\n    } else if (this._numActivePoints > 1 && !this.isZooming) {\n      this._finishDrag();\n\n      this.isZooming = true;\n\n      // Adjust starting points\n      this._updateStartPoints();\n\n      this.zoomLevels.start();\n\n      this._rafStopLoop();\n      this._rafRenderLoop();\n    }\n  }\n\n  _finishDrag() {\n    if (this.isDragging) {\n      this.isDragging = false;\n\n      // Try to calculate velocity,\n      // if it wasn't calculated yet in drag.change\n      if (!this._velocityCalculated) {\n        this._updateVelocity(true);\n      }\n\n      this.drag.end();\n      this.dragAxis = null;\n    }\n  }\n\n\n  onPointerUp(e) {\n    if (!this._numActivePoints) {\n      return;\n    }\n\n    this._updatePoints(e, 'up');\n\n    if (this.pswp.dispatch('pointerUp', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (this._numActivePoints === 0) {\n      this.pointerDown = false;\n      this._rafStopLoop();\n\n      if (this.isDragging) {\n        this._finishDrag();\n      } else if (!this.isZooming && !this.isMultitouch) {\n        //this.zoomLevels.correctZoomPan();\n        this._finishTap(e);\n      }\n    }\n\n    if (this._numActivePoints < 2 && this.isZooming) {\n      this.isZooming = false;\n      this.zoomLevels.end();\n\n      if (this._numActivePoints === 1) {\n        // Since we have 1 point left, we need to reinitiate drag\n        this.dragAxis = null;\n        this._updateStartPoints();\n      }\n    }\n  }\n\n\n  _rafRenderLoop() {\n    if (this.isDragging || this.isZooming) {\n      this._updateVelocity();\n\n      if (this.isDragging) {\n        // make sure that pointer moved since the last update\n        if (!pointsEqual(this.p1, this.prevP1)) {\n          this.drag.change();\n        }\n      } else /* if (this.isZooming) */ {\n        if (!pointsEqual(this.p1, this.prevP1)\n            || !pointsEqual(this.p2, this.prevP2)) {\n          this.zoomLevels.change();\n        }\n      }\n\n      this._updatePrevPoints();\n      this.raf = requestAnimationFrame(this._rafRenderLoop.bind(this));\n    }\n  }\n\n  /**\n   * Update velocity at 50ms interval\n   */\n  _updateVelocity(force) {\n    const time = Date.now();\n    const duration = time - this._intervalTime;\n\n    if (duration < 50 && !force) {\n      return;\n    }\n\n\n    this.velocity.x = this._getVelocity('x', duration);\n    this.velocity.y = this._getVelocity('y', duration);\n\n    this._intervalTime = time;\n    equalizePoints(this._intervalP1, this.p1);\n    this._velocityCalculated = true;\n  }\n\n  _finishTap(e) {\n    const { mainScroll } = this.pswp;\n\n    // Do not trigger tap events if main scroll is shifted\n    if (mainScroll.isShifted()) {\n      // restore main scroll position\n      // (usually happens if stopped in the middle of animation)\n      mainScroll.moveIndexBy(0, true);\n      return;\n    }\n\n    // Do not trigger tap for touchcancel or pointercancel\n    if (e.type.indexOf('cancel') > 0) {\n      return;\n    }\n\n    // Trigger click instead of tap for mouse events\n    if (e.type === 'mouseup' || e.pointerType === 'mouse') {\n      this.tapHandler.click(this.startP1, e);\n      return;\n    }\n\n    // Disable delay if there is no doubleTapAction\n    const tapDelay = this.pswp.options.doubleTapAction ? DOUBLE_TAP_DELAY : 0;\n\n    // If tapTimer is defined - we tapped recently,\n    // check if the current tap is close to the previous one,\n    // if yes - trigger double tap\n    if (this._tapTimer) {\n      this._clearTapTimer();\n      // Check if two taps were more or less on the same place\n      if (getDistanceBetween(this._lastStartP1, this.startP1) < MIN_TAP_DISTANCE) {\n        this.tapHandler.doubleTap(this.startP1, e);\n      }\n    } else {\n      equalizePoints(this._lastStartP1, this.startP1);\n      this._tapTimer = setTimeout(() => {\n        this.tapHandler.tap(this.startP1, e);\n        this._clearTapTimer();\n      }, tapDelay);\n    }\n  }\n\n  _clearTapTimer() {\n    if (this._tapTimer) {\n      clearTimeout(this._tapTimer);\n      this._tapTimer = null;\n    }\n  }\n\n  /**\n   * Get velocity for axis\n   *\n   * @param {Number} axis\n   * @param {Number} duration\n   */\n  _getVelocity(axis, duration) {\n    // displacement is like distance, but can be negative.\n    const displacement = this.p1[axis] - this._intervalP1[axis];\n\n    if (Math.abs(displacement) > 1 && duration > 5) {\n      return displacement / duration;\n    }\n\n    return 0;\n  }\n\n  _rafStopLoop() {\n    if (this.raf) {\n      cancelAnimationFrame(this.raf);\n      this.raf = null;\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  _preventPointerEventBehaviour(e) {\n    // TODO find a way to disable e.preventDefault on some elements\n    //      via event or some class or something\n    e.preventDefault();\n    return true;\n  }\n\n  /**\n   * Parses and normalizes points from the touch, mouse or pointer event.\n   * Updates p1 and p2.\n   *\n   * @param {Event} e\n   * @param {String} pointerType Normalized pointer type ('up', 'down' or 'move')\n   */\n  _updatePoints(e, pointerType) {\n    if (this._pointerEventEnabled) {\n      // Try to find the current pointer in ongoing pointers by its ID\n      const pointerIndex = this._ongoingPointers.findIndex((ongoingPoiner) => {\n        return ongoingPoiner.id === e.pointerId;\n      });\n\n      if (pointerType === 'up' && pointerIndex > -1) {\n        // release the pointer - remove it from ongoing\n        this._ongoingPointers.splice(pointerIndex, 1);\n      } else if (pointerType === 'down' && pointerIndex === -1) {\n        // add new pointer\n        this._ongoingPointers.push(this._convertEventPosToPoint(e, {}));\n      } else if (pointerIndex > -1) {\n        // update existing pointer\n        this._convertEventPosToPoint(e, this._ongoingPointers[pointerIndex]);\n      }\n\n      this._numActivePoints = this._ongoingPointers.length;\n\n      // update points that PhotoSwipe uses\n      // to calculate position and scale\n      if (this._numActivePoints > 0) {\n        equalizePoints(this.p1, this._ongoingPointers[0]);\n      }\n\n      if (this._numActivePoints > 1) {\n        equalizePoints(this.p2, this._ongoingPointers[1]);\n      }\n    } else {\n      this._numActivePoints = 0;\n      if (e.type.indexOf('touch') > -1) {\n        // Touch Event\n        // https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n        if (e.touches && e.touches.length > 0) {\n          this._convertEventPosToPoint(e.touches[0], this.p1);\n          this._numActivePoints++;\n          if (e.touches.length > 1) {\n            this._convertEventPosToPoint(e.touches[1], this.p2);\n            this._numActivePoints++;\n          }\n        }\n      } else {\n        // Mouse Event\n        this._convertEventPosToPoint(e, this.p1);\n        if (pointerType === 'up') {\n          // clear all points on mouseup\n          this._numActivePoints = 0;\n        } else {\n          this._numActivePoints++;\n        }\n      }\n    }\n  }\n\n  // update points that were used during previous rAF tick\n  _updatePrevPoints() {\n    equalizePoints(this.prevP1, this.p1);\n    equalizePoints(this.prevP2, this.p2);\n  }\n\n  // update points at the start of gesture\n  _updateStartPoints() {\n    equalizePoints(this.startP1, this.p1);\n    equalizePoints(this.startP2, this.p2);\n    this._updatePrevPoints();\n  }\n\n  _calculateDragDirection() {\n    if (this.pswp.mainScroll.isShifted()) {\n      // if main scroll position is shifted – direction is always horizontal\n      this.dragAxis = 'x';\n    } else {\n      // calculate delta of the last touchmove tick\n      const diff = Math.abs(this.p1.x - this.startP1.x) - Math.abs(this.p1.y - this.startP1.y);\n\n      if (diff !== 0) {\n        // check if pointer was shifted horizontally or vertically\n        const axisToCheck = diff > 0 ? 'x' : 'y';\n\n        if (Math.abs(this.p1[axisToCheck] - this.startP1[axisToCheck]) >= AXIS_SWIPE_HYSTERISIS) {\n          this.dragAxis = axisToCheck;\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts touch, pointer or mouse event\n   * to PhotoSwipe point.\n   *\n   * @param {Event} e\n   * @param {Point} p\n   */\n  _convertEventPosToPoint(e, p) {\n    p.x = e.pageX - this.pswp.offset.x;\n    p.y = e.pageY - this.pswp.offset.y;\n\n    // e.pointerId can be zero\n    if (e.pointerId !== undefined) {\n      p.id = e.pointerId;\n    } else if (e.identifier !== undefined) {\n      p.id = e.identifier;\n    }\n\n    return p;\n  }\n\n  _onClick(e) {\n    // Do not allow click event to pass through after drag\n    if (this.pswp.mainScroll.isShifted()) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n}\n\n/**\n * Handles movement of the main scrolling container\n * (for example, it repositions when user swipes left or right).\n *\n * Also stores its state.\n */\n\nconst MAIN_SCROLL_END_FRICTION = 0.35;\n\n\n// const MIN_SWIPE_TRANSITION_DURATION = 250;\n// const MAX_SWIPE_TRABSITION_DURATION = 500;\n// const DEFAULT_SWIPE_TRANSITION_DURATION = 333;\n\nclass MainScroll {\n  /**\n   * @param {PhotoSwipe} pswp\n   */\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.x = 0;\n\n    this.resetPosition();\n  }\n\n  /**\n   * Position the scroller and slide containers\n   * according to viewport size.\n   *\n   * @param {Boolean} resizeSlides Whether slides content should resized\n   */\n  resize(resizeSlides) {\n    const { pswp } = this;\n    const newSlideWidth = Math.round(\n      pswp.viewportSize.x + pswp.viewportSize.x * pswp.options.spacing\n    );\n    // Mobile browsers might trigger a resize event during a gesture.\n    // (due to toolbar appearing or hiding).\n    // Avoid re-adjusting main scroll position if width wasn't changed\n    const slideWidthChanged = (newSlideWidth !== this.slideWidth);\n\n    if (slideWidthChanged) {\n      this.slideWidth = newSlideWidth;\n      this.moveTo(this.getCurrSlideX());\n    }\n\n    this.itemHolders.forEach((itemHolder, index) => {\n      if (slideWidthChanged) {\n        setTransform(itemHolder.el, (index + this._containerShiftIndex)\n                                    * this.slideWidth);\n      }\n\n      if (resizeSlides && itemHolder.slide) {\n        itemHolder.slide.resize();\n      }\n    });\n  }\n\n  /**\n   * Reset X position of the main scroller to zero\n   */\n  resetPosition() {\n    // Position on the main scroller (offset)\n    // it is independent from slide index\n    this._currPositionIndex = 0;\n    this._prevPositionIndex = 0;\n\n    // This will force recalculation of size on next resize()\n    this.slideWidth = 0;\n\n    // _containerShiftIndex*viewportSize will give you amount of transform of the current slide\n    this._containerShiftIndex = -1;\n  }\n\n  /**\n   * Create and append array of three items\n   * that hold data about slides in DOM\n   */\n  appendHolders() {\n    this.itemHolders = [];\n\n    // append our three slide holders -\n    // previous, current, and next\n    for (let i = 0; i < 3; i++) {\n      const el = createElement('pswp__item', false, this.pswp.container);\n\n      // hide nearby item holders until initial zoom animation finishes (to avoid extra Paints)\n      el.style.display = (i === 1) ? 'block' : 'none';\n\n      this.itemHolders.push({\n        el,\n        //index: -1\n      });\n    }\n  }\n\n  /**\n   * Whether the main scroll can be horizontally swiped to the next or previous slide.\n   */\n  canBeSwiped() {\n    return this.pswp.getNumItems() > 1;\n  }\n\n  /**\n   * Move main scroll by X amount of slides.\n   * For example:\n   *   `-1` will move to the previous slide,\n   *    `0` will reset the scroll position of the current slide,\n   *    `3` will move three slides forward\n   *\n   * If loop option is enabled - index will be automatically looped too,\n   * (for example `-1` will move to the last slide of the gallery).\n   *\n   * @param {Integer} diff\n   * @returns {Boolean} whether index was changed or not\n   */\n  moveIndexBy(diff, animate, velocityX) {\n    const { pswp } = this;\n    let newIndex = pswp.potentialIndex + diff;\n\n    if (pswp.options.loop) {\n      newIndex = pswp.getLoopedIndex(newIndex);\n    } else {\n      if (newIndex < 0) {\n        newIndex = 0;\n      } else if (newIndex >= pswp.getNumItems()) {\n        newIndex = pswp.getNumItems() - 1;\n      }\n      diff = newIndex - pswp.potentialIndex;\n    }\n\n    pswp.potentialIndex = newIndex;\n    this._currPositionIndex -= diff;\n\n    pswp.animations.stopMainScroll();\n\n    const destinationX = this.getCurrSlideX();\n    if (!animate) {\n      this.moveTo(destinationX);\n      this.updateCurrItem();\n    } else {\n      pswp.animations.startSpring({\n        isMainScroll: true,\n        start: this.x,\n        end: destinationX,\n        velocity: velocityX || 0,\n        naturalFrequency: 30,\n        dampingRatio: 1, //0.7,\n        onUpdate: (x) => {\n          this.moveTo(x);\n        },\n        onComplete: () => {\n          this.updateCurrItem();\n          pswp.appendHeavy();\n        }\n      });\n\n      // Force-append new slides during transition\n      // if difference between slides is more than 1\n      if (Math.abs(pswp.potentialIndex - pswp.currIndex) > 1) {\n        this.updateCurrItem();\n      }\n    }\n\n    if (diff) {\n      return true;\n    }\n  }\n\n  /**\n   * X position of the main scroll for the current slide\n   * (ignores position during dragging)\n   */\n  getCurrSlideX() {\n    return this.slideWidth * this._currPositionIndex;\n  }\n\n  /**\n   * Whether scroll position is shifted.\n   * For example, it will return true if the scroll is being dragged or animated.\n   */\n  isShifted() {\n    return this.x !== this.getCurrSlideX();\n  }\n\n  /**\n   * Update slides X positions and set their content\n   */\n  updateCurrItem() {\n    const { pswp } = this;\n    const positionDifference = this._prevPositionIndex - this._currPositionIndex;\n\n    if (!positionDifference) {\n      return;\n    }\n\n    this._prevPositionIndex = this._currPositionIndex;\n\n    pswp.currIndex = pswp.potentialIndex;\n\n    let diffAbs = Math.abs(positionDifference);\n    let tempHolder;\n\n    if (diffAbs >= 3) {\n      this._containerShiftIndex += positionDifference + (positionDifference > 0 ? -3 : 3);\n      diffAbs = 3;\n    }\n\n    for (let i = 0; i < diffAbs; i++) {\n      if (positionDifference > 0) {\n        tempHolder = this.itemHolders.shift();\n        this.itemHolders[2] = tempHolder; // move first to last\n\n        this._containerShiftIndex++;\n\n        setTransform(tempHolder.el, (this._containerShiftIndex + 2) * this.slideWidth);\n\n        pswp.setContent(tempHolder, (pswp.currIndex - diffAbs) + i + 2);\n      } else {\n        tempHolder = this.itemHolders.pop();\n        this.itemHolders.unshift(tempHolder); // move last to first\n\n        this._containerShiftIndex--;\n\n        setTransform(tempHolder.el, this._containerShiftIndex * this.slideWidth);\n\n        pswp.setContent(tempHolder, (pswp.currIndex + diffAbs) - i - 2);\n      }\n    }\n\n    // Reset transfrom every 50ish navigations in one direction.\n    //\n    // Otherwise transform will keep growing indefinitely,\n    // which might cause issues as browsers have a maximum transform limit.\n    // I wasn't able to reach it, but just to be safe.\n    // This should not cause noticable lag.\n    if (Math.abs(this._containerShiftIndex) > 50 && !this.isShifted()) {\n      this.resetPosition();\n      this.resize();\n    }\n\n    // Pan transition might be running (and consntantly updating pan position)\n    pswp.animations.stopAllPan();\n\n    this.itemHolders.forEach((itemHolder, i) => {\n      if (itemHolder.slide) {\n        // Slide in the 2nd holder is always active\n        itemHolder.slide.setIsActive(i === 1);\n      }\n    });\n\n    pswp.currSlide = this.itemHolders[1].slide;\n    pswp.contentLoader.updateLazy(positionDifference);\n\n    pswp.currSlide.applyCurrentZoomPan();\n    pswp.dispatch('change');\n  }\n\n  /**\n   * Move the X position of the main scroll container\n   *\n   * @param {Number} x\n   * @param {Boolean} dragging\n   */\n  moveTo(x, dragging) {\n    let newSlideIndexOffset;\n    let delta;\n\n    if (!this.pswp.options.loop && dragging) {\n      // Apply friction\n      newSlideIndexOffset = ((this.slideWidth * this._currPositionIndex) - x) / this.slideWidth;\n      newSlideIndexOffset += this.pswp.currIndex;\n      delta = Math.round(x - this.x);\n\n      if ((newSlideIndexOffset < 0 && delta > 0)\n          || (newSlideIndexOffset >= this.pswp.getNumItems() - 1 && delta < 0)) {\n        x = this.x + (delta * MAIN_SCROLL_END_FRICTION);\n      }\n    }\n\n    this.x = x;\n    setTransform(this.pswp.container, x);\n\n    this.pswp.dispatch('moveMainScroll', { x, dragging });\n  }\n}\n\n/**\n *\n * keyboard.js\n *\n * - Manages keyboard shortcuts.\n * - Heps trap focus within photoswipe.\n *\n */\n\nclass Keyboard {\n  constructor(pswp) {\n    this.pswp = pswp;\n\n    pswp.on('bindEvents', () => {\n      // Dialog was likely opened by keyboard if initial point is not defined\n      if (!pswp.options.initialPointerPos) {\n        // focus causes layout,\n        // which causes lag during the animation,\n        // that's why we delay it until the opener transition ends\n        this._focusRoot();\n      }\n\n      pswp.events.add(document, 'focusin', this._onFocusIn.bind(this));\n      pswp.events.add(document, 'keydown', this._onKeyDown.bind(this));\n    });\n\n    const lastActiveElement = document.activeElement;\n    pswp.on('destroy', () => {\n      if (pswp.options.returnFocus\n          && lastActiveElement\n          && this._wasFocused) {\n        lastActiveElement.focus();\n      }\n    });\n  }\n\n  _focusRoot() {\n    if (!this._wasFocused) {\n      this.pswp.template.focus();\n      this._wasFocused = true;\n    }\n  }\n\n  _onKeyDown(e) {\n    const { pswp } = this;\n\n    if (pswp.dispatch('keydown', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (specialKeyUsed(e)) {\n      // don't do anything if special key pressed\n      // to prevent from overriding default browser actions\n      // for example, in Chrome on Mac cmd+arrow-left returns to previous page\n      return;\n    }\n\n    let keydownAction;\n    let axis;\n    let isForward;\n\n    switch (e.keyCode) {\n      case 27: // esc\n        if (pswp.options.escKey) {\n          keydownAction = 'close';\n        }\n        break;\n      case 90: // z key\n        keydownAction = 'toggleZoom';\n        break;\n      case 37: // left\n        axis = 'x';\n        break;\n      case 38: // top\n        axis = 'y';\n        break;\n      case 39: // right\n        axis = 'x';\n        isForward = true;\n        break;\n      case 40: // bottom\n        isForward = true;\n        axis = 'y';\n        break;\n      case 9: // tab\n        this._focusRoot();\n        break;\n    }\n\n    // if left/right/top/bottom key\n    if (axis) {\n      // prevent page scroll\n      e.preventDefault();\n\n      const { currSlide } = pswp;\n\n      if (pswp.options.arrowKeys\n          && axis === 'x'\n          && pswp.getNumItems() > 1) {\n        keydownAction = isForward ? 'next' : 'prev';\n      } else if (currSlide && currSlide.currZoomLevel > currSlide.zoomLevels.fit) {\n        // up/down arrow keys pan the image vertically\n        // left/right arrow keys pan horizontally.\n        // Unless there is only one image,\n        // or arrowKeys option is disabled\n        currSlide.pan[axis] += isForward ? -80 : 80;\n        currSlide.panTo(currSlide.pan.x, currSlide.pan.y);\n      }\n    }\n\n    if (keydownAction) {\n      e.preventDefault();\n      pswp[keydownAction]();\n    }\n  }\n\n  /**\n   * Trap focus inside photoswipe\n   *\n   * @param {Event} e\n   */\n  _onFocusIn(e) {\n    const { template } = this.pswp;\n    if (document !== e.target\n        && template !== e.target\n        && !template.contains(e.target)) {\n      // focus root element\n      template.focus();\n    }\n  }\n}\n\n/**\n * Runs CSS transition.\n */\n\nconst DEFAULT_EASING = 'cubic-bezier(.4,0,.22,1)';\n\nclass CSSAnimation {\n  // onComplete can be unpredictable, be careful about current state\n  constructor(props) {\n    this.props = props;\n    const {\n      target,\n      onComplete,\n      transform,\n      // opacity\n    } = props;\n\n    let {\n      duration,\n      easing,\n    } = props;\n\n    // support only transform and opacity\n    const prop = transform ? 'transform' : 'opacity';\n    const propValue = props[prop];\n\n    this._target = target;\n    this._onComplete = onComplete;\n\n    duration = duration || 333;\n    easing = easing || DEFAULT_EASING;\n\n    this._onTransitionEnd = this._onTransitionEnd.bind(this);\n\n    // Using timeout hack to make sure that animation\n    // starts even if the animated property was changed recently,\n    // otherwise transitionend might not fire or transiton won't start.\n    // https://drafts.csswg.org/css-transitions/#starting\n    //\n    // ¯\\_(ツ)_/¯\n    this._firstFrameTimeout = setTimeout(() => {\n      setTransitionStyle(target, prop, duration, easing);\n      this._firstFrameTimeout = setTimeout(() => {\n        target.addEventListener('transitionend', this._onTransitionEnd, false);\n        target.addEventListener('transitioncancel', this._onTransitionEnd, false);\n        target.style[prop] = propValue;\n      }, 30); // Do not reduce this number\n    }, 0);\n  }\n\n  _onTransitionEnd(e) {\n    if (e.target === this._target) {\n      this._finalizeAnimation();\n    }\n  }\n\n  _finalizeAnimation() {\n    if (!this._finished) {\n      this._finished = true;\n      this.onFinish();\n      if (this._onComplete) {\n        this._onComplete();\n      }\n    }\n  }\n\n  // Destroy is called automatically onFinish\n  destroy() {\n    if (this._firstFrameTimeout) {\n      clearTimeout(this._firstFrameTimeout);\n    }\n    removeTransitionStyle(this._target);\n    this._target.removeEventListener('transitionend', this._onTransitionEnd, false);\n    this._target.removeEventListener('transitioncancel', this._onTransitionEnd, false);\n    if (!this._finished) {\n      this._finalizeAnimation();\n    }\n  }\n}\n\n/**\n * Spring easing helper\n */\n\nconst DEFAULT_NATURAL_FREQUENCY = 12;\nconst DEFAULT_DAMPING_RATIO = 0.75;\n\nclass SpringEaser {\n  /**\n   * @param {Number} initialVelocity Initial velocity, px per ms.\n   *\n   * @param {Number} dampingRatio Determines how bouncy animation will be.\n   *                              From 0 to 1, 0 - always overshoot, 1 - do not overshoot.\n   *                              \"overshoot\" refers to part of animation that\n   *                              goes beyond the final value.\n   *\n   * @param {Number} naturalFrequency Determines how fast animation will slow down.\n   *                                  The higher value - the stiffer the transition will be,\n   *                                  and the faster it will slow down.\n   *                                  Recommended value from 10 to 50\n   */\n  constructor(initialVelocity, dampingRatio, naturalFrequency) {\n    this.velocity = initialVelocity * 1000; // convert to \"pixels per second\"\n\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    this._dampingRatio = dampingRatio || DEFAULT_DAMPING_RATIO;\n\n    // https://en.wikipedia.org/wiki/Natural_frequency\n    this._naturalFrequency = naturalFrequency || DEFAULT_NATURAL_FREQUENCY;\n\n    if (this._dampingRatio < 1) {\n      this._dampedFrequency = this._naturalFrequency\n                         * Math.sqrt(1 - this._dampingRatio * this._dampingRatio);\n    }\n  }\n\n  /**\n   * @param {Number} deltaPosition Difference between current and end position of the animation\n   * @param {Number} deltaTime Frame duration in milliseconds\n   *\n   * @returns {Number} Displacement, relative to the end position.\n   */\n  easeFrame(deltaPosition, deltaTime) {\n    // Inspired by Apple Webkit and Android spring function implementation\n    // https://en.wikipedia.org/wiki/Oscillation\n    // https://en.wikipedia.org/wiki/Damping_ratio\n    // we ignore mass (assume that it's 1kg)\n\n    let displacement = 0;\n    let coeff;\n\n    deltaTime /= 1000;\n\n    const naturalDumpingPow = Math.E ** (-this._dampingRatio * this._naturalFrequency * deltaTime);\n\n    if (this._dampingRatio === 1) {\n      coeff = this.velocity + this._naturalFrequency * deltaPosition;\n\n      displacement = (deltaPosition + coeff * deltaTime) * naturalDumpingPow;\n\n      this.velocity = displacement\n                        * (-this._naturalFrequency) + coeff\n                        * naturalDumpingPow;\n    } else if (this._dampingRatio < 1) {\n      coeff = (1 / this._dampedFrequency)\n                * (this._dampingRatio * this._naturalFrequency * deltaPosition + this.velocity);\n\n      const dumpedFCos = Math.cos(this._dampedFrequency * deltaTime);\n      const dumpedFSin = Math.sin(this._dampedFrequency * deltaTime);\n\n      displacement = naturalDumpingPow\n                       * (deltaPosition * dumpedFCos + coeff * dumpedFSin);\n\n      this.velocity = displacement\n                        * (-this._naturalFrequency)\n                        * this._dampingRatio\n                        + naturalDumpingPow\n                        * (-this._dampedFrequency * deltaPosition * dumpedFSin\n                        + this._dampedFrequency * coeff * dumpedFCos);\n    }\n\n    // Overdamped (>1) damping ratio is not supported\n\n    return displacement;\n  }\n}\n\nclass SpringAnimation {\n  constructor(props) {\n    this.props = props;\n\n    const {\n      start,\n      end,\n      velocity,\n      onUpdate,\n      onComplete,\n      onFinish,\n      dampingRatio,\n      naturalFrequency\n    } = props;\n\n    const easer = new SpringEaser(velocity, dampingRatio, naturalFrequency);\n    let prevTime = Date.now();\n    let deltaPosition = start - end;\n\n    this._onFinish = onFinish;\n\n    const animationLoop = () => {\n      if (this._raf) {\n        deltaPosition = easer.easeFrame(deltaPosition, Date.now() - prevTime);\n\n        // Stop the animation if velocity is low and position is close to end\n        if (Math.abs(deltaPosition) < 1 && Math.abs(easer.velocity) < 50) {\n          // Finalize the animation\n          onUpdate(end);\n          if (onComplete) {\n            onComplete();\n          }\n          this.onFinish();\n        } else {\n          prevTime = Date.now();\n          onUpdate(deltaPosition + end);\n          this._raf = requestAnimationFrame(animationLoop);\n        }\n      }\n    };\n\n    this._raf = requestAnimationFrame(animationLoop);\n  }\n\n  // Destroy is called automatically onFinish\n  destroy() {\n    if (this._raf >= 0) {\n      cancelAnimationFrame(this._raf);\n    }\n    this._raf = null;\n  }\n}\n\n/**\n * Manages animations\n */\n\nclass Animations {\n  constructor() {\n    this.activeAnimations = [];\n  }\n\n  startSpring(props) {\n    this._start(props, true);\n  }\n\n  startTransition(props) {\n    this._start(props);\n  }\n\n  _start(props, isSpring) {\n    // if (!props.name) {\n    //   props.name = this._uid++;\n    // }\n\n    // const { name } = props;\n\n    // if (!name || this.activeAnimations[name]) {\n    //   // Animation already running or no name provided\n    //   return;\n    // }\n\n    let animation;\n    if (isSpring) {\n      animation = new SpringAnimation(props);\n    } else {\n      animation = new CSSAnimation(props);\n    }\n\n    this.activeAnimations.push(animation);\n    animation.onFinish = () => this.stop(animation);\n\n    return animation;\n  }\n\n  stop(animation) {\n    animation.destroy();\n    const index = this.activeAnimations.indexOf(animation);\n    if (index > -1) {\n      this.activeAnimations.splice(index, 1);\n    }\n  }\n\n  stopAll() { // _stopAllAnimations\n    this.activeAnimations.forEach((animation) => {\n      animation.destroy();\n    });\n    this.activeAnimations = [];\n  }\n\n  /**\n   * Stop all pan or zoom transitions\n   */\n  stopAllPan() {\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\n      if (animation.props.isPan) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  stopMainScroll() {\n    this.activeAnimations = this.activeAnimations.filter((animation) => {\n      if (animation.props.isMainScroll) {\n        animation.destroy();\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  /**\n   * Returns true if main scroll transition is running\n   */\n  // isMainScrollRunning() {\n  //   return this.activeAnimations.some((animation) => {\n  //     return animation.props.isMainScroll;\n  //   });\n  // }\n\n  /**\n   * Returns true if any pan or zoom transition is running\n   */\n  isPanRunning() {\n    return this.activeAnimations.some((animation) => {\n      return animation.props.isPan;\n    });\n  }\n}\n\n/**\n * Handles scroll wheel.\n * Can pan and zoom current slide image.\n */\nclass ScrollWheel {\n  constructor(pswp) {\n    this.pswp = pswp;\n    pswp.events.add(pswp.template, 'wheel', this._onWheel.bind(this));\n  }\n\n  _onWheel(e) {\n    e.preventDefault();\n    const { currSlide } = this.pswp;\n    let { deltaX, deltaY } = e;\n\n    if (!currSlide) {\n      return;\n    }\n\n    if (this.pswp.dispatch('wheel', { originalEvent: e }).defaultPrevented) {\n      return;\n    }\n\n    if (e.ctrlKey || this.pswp.options.wheelToZoom) {\n      // zoom\n      if (currSlide.isZoomable()) {\n        let zoomFactor = -deltaY;\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\n          zoomFactor *= 0.05;\n        } else {\n          zoomFactor *= e.deltaMode ? 1 : 0.002;\n        }\n        zoomFactor = 2 ** zoomFactor;\n\n        if (this.pswp.options.getWheelZoomFactorFn) {\n          zoomFactor = this.pswp.options.getWheelZoomFactorFn(e, this.pswp);\n        }\n\n        const destZoomLevel = currSlide.currZoomLevel * zoomFactor;\n        currSlide.zoomTo(destZoomLevel, {\n          x: e.clientX,\n          y: e.clientY\n        });\n      }\n    } else {\n      // pan\n      if (currSlide.isPannable()) {\n        if (e.deltaMode === 1 /* DOM_DELTA_LINE */) {\n          // 18 - average line height\n          deltaX *= 18;\n          deltaY *= 18;\n        }\n\n        currSlide.panTo(\n          currSlide.pan.x - deltaX,\n          currSlide.pan.y - deltaY\n        );\n      }\n    }\n  }\n}\n\nfunction addButtonHTML(htmlData) {\n  if (typeof htmlData === 'string') {\n    // Allow developers to provide full svg,\n    // For example:\n    // <svg viewBox=\"0 0 32 32\" width=\"32\" height=\"32\" aria-hidden=\"true\" class=\"pswp__icn\">\n    //   <path d=\"...\" />\n    //   <circle ... />\n    // </svg>\n    // Can also be any HTML string.\n    return htmlData;\n  }\n\n  if (!htmlData || !htmlData.isCustomSVG) {\n    return '';\n  }\n\n  const svgData = htmlData;\n  let out = '<svg aria-hidden=\"true\" class=\"pswp__icn\" viewBox=\"0 0 %d %d\" width=\"%d\" height=\"%d\">';\n  out = out.split('%d').join(svgData.size || 32); // replace all %d with size\n\n  // Icons may contain outline/shadow,\n  // to make it we \"clone\" base icon shape and add border to it.\n  // Icon itself and border are styled via CSS.\n  //\n  // Property shadowID defines ID of element that should be cloned.\n  if (svgData.outlineID) {\n    out += '<use class=\"pswp__icn-shadow\" xlink:href=\"#' + svgData.outlineID + '\"/>';\n  }\n\n  out += svgData.inner;\n\n  out += '</svg>';\n\n  return out;\n}\n\nclass UIElement {\n  constructor(pswp, data) {\n    const name = data.name || data.class;\n    let elementHTML = data.html;\n\n    if (pswp.options[name] === false) {\n      // exit if element is disabled from options\n      return;\n    }\n\n    // Allow to override SVG icons from options\n    if (typeof pswp.options[name + 'SVG'] === 'string') {\n      // arrowPrevSVG\n      // arrowNextSVG\n      // closeSVG\n      // zoomSVG\n      elementHTML = pswp.options[name + 'SVG'];\n    }\n\n    pswp.dispatch('uiElementCreate', { data });\n\n    let className = 'pswp__';\n    if (data.isButton) {\n      className += 'button pswp__button--';\n    }\n    className += (data.class || data.name);\n\n    let element;\n    if (data.isButton) {\n      // create button element\n      element = createElement(className, 'button');\n      element.type = 'button';\n      // add either html or svg inside it\n      element.innerHTML = addButtonHTML(elementHTML);\n\n      if (typeof pswp.options[name + 'Title'] === 'string') {\n        element.title = pswp.options[name + 'Title'];\n      } else if (data.title) {\n        element.title = data.title;\n      }\n    } else {\n      element = createElement(className);\n    }\n\n    if (data.onInit) {\n      data.onInit(element, pswp);\n    }\n\n    if (data.onClick) {\n      element.onclick = (e) => {\n        if (typeof data.onClick === 'string') {\n          pswp[data.onClick]();\n        } else {\n          data.onClick(e, element, pswp);\n        }\n      };\n    }\n\n    // Top bar is default position\n    const appendTo = data.appendTo || 'bar';\n    let container;\n    if (appendTo === 'bar') {\n      if (!pswp.topBar) {\n        pswp.topBar = createElement('pswp__top-bar pswp__hide-on-close', false, pswp.scrollWrap);\n      }\n      container = pswp.topBar;\n    } else {\n      // element outside of top bar gets a secondary class\n      // that makes element fade out on close\n      element.classList.add('pswp__hide-on-close');\n\n      if (appendTo === 'wrapper') {\n        container = pswp.scrollWrap;\n      } else {\n        // root element\n        container = pswp.template;\n      }\n    }\n\n    container.appendChild(element);\n  }\n}\n\n/*\n  Backward and forward arrow buttons\n */\n\nfunction initArrowButton(element, pswp, isNextButton) {\n  element.classList.add('pswp__button--arrow');\n  pswp.on('change', () => {\n    if (!pswp.options.loop) {\n      if (isNextButton) {\n        element.disabled = !(pswp.currIndex < pswp.getNumItems() - 1);\n      } else {\n        element.disabled = !(pswp.currIndex > 0);\n      }\n    }\n  });\n}\n\nconst arrowPrev = {\n  name: 'arrowPrev',\n  class: 'arrow--prev',\n  title: 'Previous',\n  order: 10,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<path d=\"M29 43l-3 3-16-16 16-16 3 3-13 13 13 13z\" id=\"pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'prev',\n  onInit: initArrowButton\n};\n\nconst arrowNext = {\n  name: 'arrowNext',\n  class: 'arrow--next',\n  title: 'Next',\n  order: 11,\n  isButton: true,\n  appendTo: 'wrapper',\n  html: {\n    isCustomSVG: true,\n    size: 60,\n    inner: '<use xlink:href=\"#pswp__icn-arrow\"/>',\n    outlineID: 'pswp__icn-arrow'\n  },\n  onClick: 'next',\n  onInit: (el, pswp) => {\n    initArrowButton(el, pswp, true);\n  }\n};\n\nconst closeButton = {\n  name: 'close',\n  title: 'Close',\n  order: 20,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M24 10l-2-2-6 6-6-6-2 2 6 6-6 6 2 2 6-6 6 6 2-2-6-6z\" id=\"pswp__icn-close\"/>',\n    outlineID: 'pswp__icn-close'\n  },\n  onClick: 'close'\n};\n\nconst zoomButton = {\n  name: 'zoom',\n  title: 'Zoom (z)',\n  order: 10,\n  isButton: true,\n  html: {\n    isCustomSVG: true,\n    inner: '<path d=\"M17.426 19.926a6 6 0 1 1 1.5-1.5L23 22.5 21.5 24l-4.074-4.074z\" id=\"pswp__icn-zoom\"/>'\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-h\" d=\"M11 16v-2h6v2z\"/>'\n          + '<path fill=\"currentColor\" class=\"pswp__zoom-icn-bar-v\" d=\"M13 12h2v6h-2z\"/>',\n    outlineID: 'pswp__icn-zoom'\n  },\n  onClick: 'toggleZoom'\n};\n\n// Delay before indicator will be shown\n// (if image is loaded during it - the indicator will not be displayed at all)\nconst SHOW_DELAY = 1100; // ms\n\n// Loading indicator fade-out duration\nconst FADE_OUT_DURATION = 350; // ms\n\n// Indicator width/height, used for centering\n// (it can not be centered via CSS,\n//  as viewport might be adjusted via JS padding option)\nconst INDICATOR_SIZE = 24;\n\nconst loadingIndicator = {\n  name: 'preloader',\n  appendTo: 'wrapper',\n  onInit: (indicatorElement, pswp) => {\n    let isVisible;\n    let delayTimeout;\n    let hidingTimeout;\n\n    const updateIndicatorPosition = () => {\n      if (isVisible) {\n        indicatorElement.style.left = Math.round((pswp.viewportSize.x - INDICATOR_SIZE) / 2) + 'px';\n        indicatorElement.style.top = Math.round((pswp.viewportSize.y - INDICATOR_SIZE) / 2) + 'px';\n      }\n    };\n\n    const toggleIndicatorClass = (className, add) => {\n      indicatorElement.classList[add ? 'add' : 'remove']('pswp__preloader--' + className);\n    };\n\n    const setIndicatorVisibility = (visible) => {\n      if (isVisible !== visible) {\n        isVisible = visible;\n\n        clearTimeout(hidingTimeout);\n        toggleIndicatorClass('hiding', !visible);\n\n        if (!visible) {\n          // Fade out\n          hidingTimeout = setTimeout(() => {\n            toggleIndicatorClass('active', false);\n          }, FADE_OUT_DURATION);\n        } else {\n          updateIndicatorPosition();\n          // Fade in\n          toggleIndicatorClass('active', true);\n        }\n      }\n    };\n\n    pswp.on('change', () => {\n      if (!pswp.currSlide.isLoading) {\n        setIndicatorVisibility(false);\n        return;\n      }\n\n      clearTimeout(delayTimeout);\n\n      // display loading indicator with delay\n      delayTimeout = setTimeout(() => {\n        setIndicatorVisibility(pswp.currSlide.isLoading);\n      }, SHOW_DELAY);\n    });\n\n    pswp.on('loadComplete', (e) => {\n      if (pswp.currSlide === e.slide) {\n        setIndicatorVisibility(false);\n      }\n    });\n\n    pswp.on('resize', updateIndicatorPosition);\n  }\n};\n\nconst counterIndicator = {\n  name: 'counter',\n  order: 5,\n  onInit: (counterElement, pswp) => {\n    pswp.on('change', () => {\n      counterElement.innerHTML = (pswp.currIndex + 1)\n                                  + pswp.options.indexIndicatorSep\n                                  + pswp.getNumItems();\n    });\n  }\n};\n\n/**\n * Set special class on element when image is zoomed.\n *\n * By default it is used to adjust\n * zoom icon and zoom cursor via CSS.\n *\n * @param {Boolean} isZoomedIn\n */\nfunction setZoomedIn(el, isZoomedIn) {\n  el.classList[isZoomedIn ? 'add' : 'remove']('pswp--zoomed-in');\n}\n\nclass UI {\n  constructor(pswp) {\n    this.pswp = pswp;\n  }\n\n  init() {\n    const { pswp } = this;\n    this.isRegistered = false;\n    this.uiElementsData = [\n      closeButton,\n      arrowPrev,\n      arrowNext,\n      zoomButton,\n      loadingIndicator,\n      counterIndicator\n    ];\n\n    pswp.dispatch('uiRegister');\n\n    // sort by order\n    this.uiElementsData.sort((a, b) => {\n      // default order is 0\n      return (a.order || 0) - (b.order || 0);\n    });\n\n    this.items = [];\n\n    this.isRegistered = true;\n    this.uiElementsData.forEach((uiElementData) => {\n      this.registerElement(uiElementData);\n    });\n\n    // TODO: ensure this works when dynamically adding or removing slides\n    if (pswp.getNumItems() === 1) {\n      pswp.template.classList.add('pswp--one-slide');\n    }\n\n    pswp.on('zoomPanUpdate', () => this._onZoomPanUpdate());\n  }\n\n  registerElement(elementData) {\n    if (this.isRegistered) {\n      this.items.push(\n        new UIElement(this.pswp, elementData)\n      );\n    } else {\n      this.uiElementsData.push(elementData);\n    }\n  }\n\n  /**\n   * Fired each time zoom or pan position is changed.\n   * Update classes that control visibility of zoom button and cursor icon.\n   */\n  _onZoomPanUpdate() {\n    const { template, currSlide, options } = this.pswp;\n    let { currZoomLevel } = currSlide;\n\n    if (this.pswp.opener.isClosing) {\n      return;\n    }\n\n    // if not open yet - check against initial zoom level\n    if (!this.pswp.opener.isOpen) {\n      currZoomLevel = currSlide.zoomLevels.initial;\n    }\n\n    if (currZoomLevel === this._lastUpdatedZoomLevel) {\n      return;\n    }\n    this._lastUpdatedZoomLevel = currZoomLevel;\n\n    const currZoomLevelDiff = currSlide.zoomLevels.initial - currSlide.zoomLevels.secondary;\n\n    // Initial and secondary zoom levels are almost equal\n    if (Math.abs(currZoomLevelDiff) < 0.01 || !currSlide.isZoomable()) {\n      // disable zoom\n      setZoomedIn(template, false);\n      template.classList.remove('pswp--zoom-allowed');\n      return;\n    }\n\n    template.classList.add('pswp--zoom-allowed');\n    const secondaryIsHigher = (currZoomLevelDiff < 0);\n\n    if (currZoomLevel === currSlide.zoomLevels.secondary) {\n      setZoomedIn(template, secondaryIsHigher);\n    } else if (currZoomLevel > currSlide.zoomLevels.secondary) {\n      setZoomedIn(template, true);\n    } else {\n      //  if (currZoomLevel < currSlide.zoomLevels.secondary)\n      setZoomedIn(template, false);\n    }\n\n    if (options.imageClickAction === 'zoom'\n        || options.imageClickAction === 'zoom-or-close') {\n      template.classList.add('pswp--click-to-zoom');\n    }\n  }\n}\n\nfunction getBoundsByElement(el) {\n  const thumbAreaRect = el.getBoundingClientRect();\n  return {\n    x: thumbAreaRect.left,\n    y: thumbAreaRect.top,\n    w: thumbAreaRect.width\n  };\n}\n\nfunction getCroppedBoundsByElement(el, imageWidth, imageHeight) {\n  const thumbAreaRect = el.getBoundingClientRect();\n\n  // fill image into the area\n  // (do they same as object-fit:cover does to retrieve coordinates)\n  const hRatio = thumbAreaRect.width / imageWidth;\n  const vRatio = thumbAreaRect.height / imageHeight;\n  const fillZoomLevel = hRatio > vRatio ? hRatio : vRatio;\n\n  const offsetX = (thumbAreaRect.width - imageWidth * fillZoomLevel) / 2;\n  const offsetY = (thumbAreaRect.height - imageHeight * fillZoomLevel) / 2;\n\n  // Coordinates of the image,\n  // as if it was not cropped,\n  // height is calculated automatically\n  const bounds = {\n    x: thumbAreaRect.left + offsetX,\n    y: thumbAreaRect.top + offsetY,\n    w: imageWidth * fillZoomLevel\n  };\n\n  // Coordinates of inner crop area\n  // relative to the image\n  bounds.innerRect = {\n    w: thumbAreaRect.width,\n    h: thumbAreaRect.height,\n    x: offsetX,\n    y: offsetY\n  };\n\n  return bounds;\n}\n\n/**\n * Get dimensions of thumbnail image\n * (click on which opens photoswipe or closes photoswipe to)\n *\n * @param {Integer} index\n * @param {Object} itemData\n * @param {PhotoSwipe} instance PhotoSwipe instance\n * @returns Object|undefined\n */\nfunction getThumbBounds(index, itemData, instance) {\n  // legacy event, before filters were introduced\n  const event = instance.dispatch('thumbBounds', {\n    index,\n    itemData,\n    instance\n  });\n  if (event.thumbBounds) {\n    return event.thumbBounds;\n  }\n\n  const { element } = itemData;\n  let thumbBounds;\n\n  if (element && instance.options.thumbSelector !== false) {\n    const thumbSelector = instance.options.thumbSelector || 'img';\n    const thumbnail = element.matches(thumbSelector)\n      ? element : element.querySelector(thumbSelector);\n\n    if (thumbnail) {\n      if (!itemData.thumbCropped) {\n        thumbBounds = getBoundsByElement(thumbnail);\n      } else {\n        thumbBounds = getCroppedBoundsByElement(\n          thumbnail,\n          itemData.w,\n          itemData.h\n        );\n      }\n    }\n  }\n\n  return instance.applyFilters('thumbBounds', thumbBounds, itemData, index);\n}\n\n/**\n * Base PhotoSwipe event object\n */\nclass PhotoSwipeEvent {\n  constructor(type, details) {\n    this.type = type;\n    if (details) {\n      Object.assign(this, details);\n    }\n  }\n\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n}\n\n/**\n * PhotoSwipe base class that can listen and dispatch for events.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox, extended by base.js\n */\nclass Eventable {\n  constructor() {\n    this._listeners = {};\n    this._filters = {};\n  }\n\n  addFilter(name, fn, priority = 100) {\n    if (!this._filters[name]) {\n      this._filters[name] = [];\n    }\n\n    this._filters[name].push({ fn, priority });\n    this._filters[name].sort((f1, f2) => f1.priority - f2.priority);\n\n    if (this.pswp) {\n      this.pswp.addFilter(name, fn, priority);\n    }\n  }\n\n  removeFilter(name, fn) {\n    if (this._filters[name]) {\n      this._filters[name] = this._filters[name].filter(filter => (filter.fn !== fn));\n    }\n\n    if (this.pswp) {\n      this.pswp.removeFilter(name, fn);\n    }\n  }\n\n  applyFilters(name, ...args) {\n    if (this._filters[name]) {\n      this._filters[name].forEach((filter) => {\n        args[0] = filter.fn.apply(this, args);\n      });\n    }\n    return args[0];\n  }\n\n  on(name, fn) {\n    if (!this._listeners[name]) {\n      this._listeners[name] = [];\n    }\n    this._listeners[name].push(fn);\n\n    // When binding events to lightbox,\n    // also bind events to PhotoSwipe Core,\n    // if it's open.\n    if (this.pswp) {\n      this.pswp.on(name, fn);\n    }\n  }\n\n  off(name, fn) {\n    if (this._listeners[name]) {\n      this._listeners[name] = this._listeners[name].filter(listener => (fn !== listener));\n    }\n\n    if (this.pswp) {\n      this.pswp.off(name, fn);\n    }\n  }\n\n  dispatch(name, details) {\n    if (this.pswp) {\n      return this.pswp.dispatch(name, details);\n    }\n\n    const event = new PhotoSwipeEvent(name, details);\n\n    if (!this._listeners) {\n      return event;\n    }\n\n    if (this._listeners[name]) {\n      this._listeners[name].forEach((listener) => {\n        listener.call(this, event);\n      });\n    }\n\n    return event;\n  }\n}\n\nclass Content {\n  /**\n   * @param {Object} itemData Slide data\n   * @param {PhotoSwipeBase} instance PhotoSwipe or PhotoSwipeLightbox instance\n   * @param {Slide|undefined} slide Slide that requested the image,\n   *                                can be undefined if image was requested by something else\n   *                                (for example by lazy-loader)\n   */\n  constructor(itemData, instance) {\n    this.options = instance.options;\n    this.instance = instance;\n    this.data = itemData;\n\n    this.width = Number(this.data.w) || Number(this.data.width) || 0;\n    this.height = Number(this.data.h) || Number(this.data.height) || 0;\n\n    this.isAttached = false;\n    this.state = LOAD_STATE.IDLE;\n  }\n\n  setSlide(slide) {\n    this.slide = slide;\n    this.pswp = slide.pswp;\n  }\n\n  /**\n   * Load the content\n   *\n   * @param {Boolean} isLazy If method is executed by lazy-loader\n   */\n  load(/* isLazy */) {\n    if (!this.element) {\n      this.element = createElement('pswp__content');\n      this.element.style.position = 'absolute';\n      this.element.style.left = 0;\n      this.element.style.top = 0;\n      this.element.innerHTML = this.data.html || '';\n    }\n  }\n\n  isZoomable() {\n    return false;\n  }\n\n  usePlaceholder() {\n    return false;\n  }\n\n  activate() {\n\n  }\n\n  deactivate() {\n\n  }\n\n  setDisplayedSize(width, height) {\n    if (this.element) {\n      setWidthHeight(this.element, width, height);\n    }\n  }\n\n  onLoaded() {\n    this.state = LOAD_STATE.LOADED;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide });\n    }\n  }\n\n  // If the placeholder should be kept in DOM\n  keepPlaceholder() {\n    return (this.state === LOAD_STATE.LOADING);\n  }\n\n  onError() {\n    this.state = LOAD_STATE.ERROR;\n\n    if (this.slide) {\n      this.pswp.dispatch('loadComplete', { slide: this.slide, isError: true });\n      this.pswp.dispatch('loadError', { slide: this.slide });\n    }\n  }\n\n  getErrorElement() {\n    return false;\n  }\n\n\n  remove() {\n    this.isAttached = false;\n    if (this.element && this.element.parentNode) {\n      this.element.remove();\n    }\n  }\n\n  appendTo(container) {\n    this.isAttached = true;\n    if (this.element && !this.element.parentNode) {\n      container.appendChild(this.element);\n    }\n  }\n\n  destroy() {\n\n  }\n}\n\nclass ImageContent extends Content {\n  load(/* isLazy */) {\n    if (this.element) {\n      return;\n    }\n\n    const imageSrc = this.data.src;\n\n    if (!imageSrc) {\n      return;\n    }\n\n    this.element = createElement('pswp__img', 'img');\n\n    if (this.data.srcset) {\n      this.element.srcset = this.data.srcset;\n    }\n\n    this.element.src = imageSrc;\n\n    this.element.alt = this.data.alt || '';\n\n    this.state = LOAD_STATE.LOADING;\n\n    if (this.element.complete) {\n      this.onLoaded();\n    } else {\n      this.element.onload = () => {\n        this.onLoaded();\n      };\n\n      this.element.onerror = () => {\n        this.onError();\n      };\n    }\n  }\n\n  setDisplayedSize(width, height) {\n    const image = this.element;\n    if (image) {\n      setWidthHeight(image, width, 'auto');\n\n      // Handle srcset sizes attribute.\n      //\n      // Never lower quality, if it was increased previously.\n      // Chrome does this automatically, Firefox and Safari do not,\n      // so we store largest used size in dataset.\n      if (image.srcset\n          && (!image.dataset.largestUsedSize || width > image.dataset.largestUsedSize)) {\n        image.sizes = width + 'px';\n        image.dataset.largestUsedSize = width;\n      }\n\n      if (this.slide) {\n        this.pswp.dispatch('imageSizeChange', { slide: this.slide, width, height });\n      }\n    }\n  }\n\n  isZoomable() {\n    return (this.state !== LOAD_STATE.ERROR);\n  }\n\n  usePlaceholder() {\n    return true;\n  }\n\n  lazyLoad() {\n    this.load();\n  }\n\n  destroy() {\n    if (this.element) {\n      this.element.onload = null;\n      this.element.onerror = null;\n      this.element = null;\n    }\n  }\n\n  appendTo(container) {\n    this.isAttached = true;\n\n    // Use decode() on nearby slides\n    //\n    // Nearby slide images are in DOM and not hidden via display:none.\n    // However, they are placed offscreen (to the left and right side).\n    //\n    // Some browsers do not composite the image until it's actually visible,\n    // using decode() helps.\n    //\n    // You might ask \"why dont you just decode() and then append all images\",\n    // that's because I want to show image before it's fully loaded,\n    // as browser can render parts of image while it is loading.\n    if (this.slide && !this.slide.isActive && ('decode' in this.element)) {\n      this.isDecoding = true;\n      // Make sure that we start decoding on the next frame\n      requestAnimationFrame(() => {\n        if (this.element) {\n          this.element.decode().then(() => {\n            this.isDecoding = false;\n            requestAnimationFrame(() => {\n              this.appendImageTo(container);\n            });\n          }).catch(() => {});\n        }\n      });\n    } else {\n      this.appendImageTo(container);\n    }\n  }\n\n  activate() {\n    if (this.slide && this.slide.container && this.isDecoding) {\n      // add image to slide when it becomes active,\n      // even if it's not finished decoding\n      this.appendImageTo(this.slide.container);\n    }\n  }\n\n  getErrorElement() {\n    const el = createElement('pswp__error-msg-container');\n    el.innerHTML = this.options.errorMsg;\n    const linkEl = el.querySelector('a');\n    if (linkEl) {\n      linkEl.href = this.data.src;\n    }\n    return el;\n  }\n\n  appendImageTo(container) {\n    // ensure that element exists and is not already appended\n    if (this.element && !this.element.parentNode && this.isAttached) {\n      container.appendChild(this.element);\n    }\n  }\n}\n\n/**\n * PhotoSwipe base class that can retrieve data about every slide.\n * Shared by PhotoSwipe Core and PhotoSwipe Lightbox\n */\n\nclass PhotoSwipeBase extends Eventable {\n  constructor() {\n    super();\n    this.contentTypes = {\n      image: ImageContent,\n      html: Content\n    };\n  }\n\n  /**\n   * Get total number of slides\n   */\n  getNumItems() {\n    let numItems;\n    const { dataSource } = this.options;\n    if (!dataSource) {\n      numItems = 0;\n    } else if (dataSource.length) {\n      // may be an array or just object with length property\n      numItems = dataSource.length;\n    } else if (dataSource.gallery) {\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      if (dataSource.items) {\n        numItems = dataSource.items.length;\n      }\n    }\n\n    // legacy event, before filters were introduced\n    const event = this.dispatch('numItems', {\n      dataSource,\n      numItems\n    });\n    return this.applyFilters('numItems', event.numItems, dataSource);\n  }\n\n  /**\n   * Add or set slide content type\n   *\n   * @param {String} type\n   * @param {Class} ContentClass\n   */\n  addContentType(type, ContentClass) {\n    this.contentTypes[type] = ContentClass;\n  }\n\n  /**\n   * Get slide content class based on its data\n   *\n   * @param {Object} slideData\n   * @param {Integer} slideIndex\n   * @returns Class\n   */\n  getContentClass(slideData) {\n    if (slideData.type) {\n      return this.contentTypes[slideData.type];\n    } else if (slideData.src) {\n      return this.contentTypes.image;\n    } else if (slideData.html) {\n      return this.contentTypes.html;\n    }\n  }\n\n  createContentFromData(slideData) {\n    const ContentClass = this.getContentClass(slideData);\n    const content = new ContentClass(slideData, this);\n    return content;\n  }\n\n  /**\n   * Get item data by index.\n   *\n   * \"item data\" should contain normalized information that PhotoSwipe needs to generate a slide.\n   * For example, it may contain properties like\n   * `src`, `srcset`, `w`, `h`, which will be used to generate a slide with image.\n   *\n   * @param {Integer} index\n   */\n  getItemData(index) {\n    const { dataSource } = this.options;\n    let dataSourceItem;\n    if (Array.isArray(dataSource)) {\n      // Datasource is an array of elements\n      dataSourceItem = dataSource[index];\n    } else if (dataSource && dataSource.gallery) {\n      // dataSource has gallery property,\n      // thus it was created by Lightbox, based on\n      // gallerySelecor and childSelector options\n\n      // query DOM elements\n      if (!dataSource.items) {\n        dataSource.items = this._getGalleryDOMElements(dataSource.gallery);\n      }\n\n      dataSourceItem = dataSource.items[index];\n    }\n\n    let itemData = dataSourceItem;\n\n    if (itemData instanceof Element) {\n      itemData = this._domElementToItemData(itemData);\n    }\n\n    // Dispatching the itemData event,\n    // it's a legacy verion before filters were introduced\n    const event = this.dispatch('itemData', {\n      itemData: itemData || {},\n      index\n    });\n\n    return this.applyFilters('itemData', event.itemData, index);\n  }\n\n  /**\n   * Get array of gallery DOM elements,\n   * based on childSelector and gallery element.\n   *\n   * @param {Element} galleryElement\n   */\n  _getGalleryDOMElements(galleryElement) {\n    if (this.options.children || this.options.childSelector) {\n      return getElementsFromOption(\n        this.options.children,\n        this.options.childSelector,\n        galleryElement\n      ) || [];\n    }\n\n    return [galleryElement];\n  }\n\n  /**\n   * Converts DOM element to item data object.\n   *\n   * @param {Element} element DOM element\n   */\n  // eslint-disable-next-line class-methods-use-this\n  _domElementToItemData(element) {\n    const itemData = {\n      element\n    };\n\n    const linkEl = element.tagName === 'A' ? element : element.querySelector('a');\n\n    if (linkEl) {\n      // src comes from data-pswp-src attribute,\n      // if it's empty link href is used\n      itemData.src = linkEl.dataset.pswpSrc || linkEl.href;\n\n      itemData.srcset = linkEl.dataset.pswpSrcset;\n\n      itemData.w = parseInt(linkEl.dataset.pswpWidth, 10);\n      itemData.h = parseInt(linkEl.dataset.pswpHeight, 10);\n\n      if (linkEl.dataset.pswpType) {\n        itemData.type = linkEl.dataset.pswpType;\n      }\n\n      const thumbnailEl = element.querySelector('img');\n\n      if (thumbnailEl) {\n        // define msrc only if it's the first slide,\n        // as rendering (even small stretched thumbnail) is an expensive operation\n        itemData.msrc = thumbnailEl.currentSrc || thumbnailEl.src;\n        itemData.alt = thumbnailEl.getAttribute('alt');\n      }\n\n      if (linkEl.dataset.pswpCropped || linkEl.dataset.cropped) {\n        itemData.thumbCropped = true;\n      }\n    }\n\n    this.applyFilters('domItemData', itemData, element, linkEl);\n\n    return itemData;\n  }\n}\n\n/**\n * Manages opening and closing transitions of the PhotoSwipe.\n *\n * It can perform zoom, fade or no transition.\n */\n\n// some browsers do not paint\n// elements which opacity is set to 0,\n// since we need to pre-render elements for the animation -\n// we set it to the minimum amount\nconst MIN_OPACITY = 0.003;\n\n// Transitions for slides wider than this will be discarded\nconst MAX_SLIDE_WIDTH_TO_ANIMATE = 4000;\n\nclass Opener {\n  constructor(pswp) {\n    this.pswp = pswp;\n    this.isClosed = true;\n    this._prepareOpen = this._prepareOpen.bind(this);\n\n    // Override initial zoom and pan position\n    pswp.on('firstZoomPan', this._prepareOpen);\n  }\n\n  open() {\n    this._prepareOpen();\n    this._start();\n  }\n\n  close() {\n    if (this.isClosed || this.isClosing || this.isOpening) {\n      // if we close during opening animation\n      // for now do nothing,\n      // browsers aren't good at changing the direction of the CSS transition\n      return false;\n    }\n\n    const slide = this.pswp.currSlide;\n\n    this.isOpen = false;\n    this.isOpening = false;\n    this.isClosing = true;\n    this._duration = this.pswp.options.hideAnimationDuration;\n\n    // Automatically disable transition if the current slide\n    // is at MAX_SLIDE_WIDTH_TO_ANIMATE or wider\n    if (slide && slide.currZoomLevel * slide.width >= MAX_SLIDE_WIDTH_TO_ANIMATE) {\n      this._duration = 0;\n    }\n\n    this._applyStartProps();\n    setTimeout(() => {\n      this._start();\n    }, this._croppedZoom ? 30 : 0);\n\n    return true;\n  }\n\n  _prepareOpen() {\n    this.pswp.off('firstZoomPan', this._prepareOpen);\n    if (!this.isOpening) {\n      this.isOpening = true;\n      this.isClosing = false;\n      this._duration = this.pswp.options.showAnimationDuration;\n      this._applyStartProps();\n    }\n  }\n\n  _applyStartProps() {\n    const { pswp } = this;\n    const slide = this.pswp.currSlide;\n    const { options } = pswp;\n\n    if (options.showHideAnimationType === 'fade') {\n      options.showHideOpacity = true;\n      this._thumbBounds = false;\n    } else if (options.showHideAnimationType === 'none') {\n      options.showHideOpacity = false;\n      this._duration = 0;\n      this._thumbBounds = false;\n    } else if (this.isOpening && pswp._initialThumbBounds) {\n      // Use initial bounds if defined\n      this._thumbBounds = pswp._initialThumbBounds;\n    } else {\n      this._thumbBounds = this.pswp.getThumbBounds();\n    }\n\n    this._placeholder = slide.getPlaceholderElement();\n\n    pswp.animations.stopAll();\n\n    // Discard animations when duration is less than 50ms\n    this._useAnimation = (this._duration > 50);\n    this._animateZoom = Boolean(this._thumbBounds)\n                        && (!this.isClosing || !pswp.mainScroll.isShifted());\n    if (!this._animateZoom) {\n      this._animateRootOpacity = true;\n\n      if (this.isOpening) {\n        slide.zoomAndPanToInitial();\n        slide.applyCurrentZoomPan();\n      }\n    } else {\n      this._animateRootOpacity = options.showHideOpacity;\n    }\n    this._animateBgOpacity = !this._animateRootOpacity;\n    this._opacityElement = this._animateRootOpacity ? pswp.template : pswp.bg;\n\n    if (!this._useAnimation) {\n      this._duration = 0;\n      this._animateZoom = false;\n      this._animateBgOpacity = false;\n      this._animateRootOpacity = true;\n      if (this.isOpening) {\n        pswp.template.style.opacity = MIN_OPACITY;\n        pswp.applyBgOpacity(1);\n      }\n      return;\n    }\n\n    if (this._animateZoom && this._thumbBounds.innerRect) {\n      // Properties are used when animation from cropped thumbnail\n      this._croppedZoom = true;\n      this._cropContainer1 = this.pswp.container;\n      this._cropContainer2 = this.pswp.currSlide.holderElement;\n\n      pswp.container.style.overflow = 'hidden';\n      pswp.container.style.width = pswp.viewportSize.x + 'px';\n    } else {\n      this._croppedZoom = false;\n    }\n\n    if (this.isOpening) {\n      // Apply styles before opening transition\n      if (this._animateBgOpacity) {\n        pswp.bg.style.opacity = MIN_OPACITY;\n        pswp.template.style.opacity = 1;\n      }\n\n      if (this._animateRootOpacity) {\n        pswp.template.style.opacity = MIN_OPACITY;\n        pswp.applyBgOpacity(1);\n      }\n\n      if (this._animateZoom) {\n        this._setClosedStateZoomPan();\n        if (this._placeholder) {\n          // tell browser that we plan to animate the placeholder\n          this._placeholder.willChange = 'transform';\n\n          // hide placeholder to allow hiding of\n          // elements that overlap it (such as icons over the thumbnail)\n          this._placeholder.style.opacity = MIN_OPACITY;\n        }\n      }\n    } else if (this.isClosing) {\n      // hide nearby slides to make sure that\n      // they are not painted during the transition\n      pswp.mainScroll.itemHolders[0].el.style.display = 'none';\n      pswp.mainScroll.itemHolders[2].el.style.display = 'none';\n\n      if (this._croppedZoom) {\n        if (pswp.mainScroll.x !== 0) {\n          // shift the main scroller to zero position\n          pswp.mainScroll.resetPosition();\n          pswp.mainScroll.resize();\n        }\n      }\n    }\n  }\n\n  _start() {\n    if (this.isOpening\n        && this._useAnimation\n        && this._placeholder\n        && this._placeholder.tagName === 'IMG') {\n      // To ensure smooth animation\n      // we wait till the current slide image placeholder is decoded,\n      // but no longer than 250ms,\n      // and no shorter than 50ms\n      // (just using requestanimationframe is not enough in Firefox,\n      // for some reason)\n      new Promise((resolve) => {\n        let decoded = false;\n        let isDelaying = true;\n        decodeImage(this._placeholder).finally(() => {\n          decoded = true;\n          if (!isDelaying) {\n            resolve();\n          }\n        });\n        setTimeout(() => {\n          isDelaying = false;\n          if (decoded) {\n            resolve();\n          }\n        }, 50);\n        setTimeout(resolve, 250);\n      }).finally(() => this._initiate());\n    } else {\n      this._initiate();\n    }\n  }\n\n  _initiate() {\n    this.pswp.template.style.setProperty('--pswp-transition-duration', this._duration + 'ms');\n\n    this.pswp.dispatch('initialZoom' + (this.isOpening ? 'In' : 'Out'));\n    this.pswp.template.classList[this.isOpening ? 'add' : 'remove']('pswp--ui-visible');\n\n    if (this.isOpening) {\n      if (this._placeholder) {\n        // unhide the placeholder\n        this._placeholder.style.opacity = 1;\n      }\n      this._animateToOpenState();\n    } else if (this.isClosing) {\n      this._animateToClosedState();\n    }\n\n    if (!this._useAnimation) {\n      this._onAnimationComplete();\n    }\n  }\n\n  _onAnimationComplete() {\n    const { pswp } = this;\n    this.isOpen = this.isOpening;\n    this.isClosed = this.isClosing;\n    this.isOpening = false;\n    this.isClosing = false;\n\n    pswp.dispatch('initialZoom' + (this.isOpen ? 'InEnd' : 'OutEnd'));\n\n    if (this.isClosed) {\n      pswp.destroy();\n    } else if (this.isOpen) {\n      if (this._animateZoom) {\n        pswp.container.style.overflow = 'visible';\n        pswp.container.style.width = '100%';\n      }\n      pswp.currSlide.applyCurrentZoomPan();\n    }\n  }\n\n  _animateToOpenState() {\n    const { pswp } = this;\n    if (this._animateZoom) {\n      if (this._croppedZoom) {\n        this._animateTo(this._cropContainer1, 'transform', 'translate3d(0,0,0)');\n        this._animateTo(this._cropContainer2, 'transform', 'none');\n      }\n\n      pswp.currSlide.zoomAndPanToInitial();\n      this._animateTo(\n        pswp.currSlide.container,\n        'transform',\n        pswp.currSlide.getCurrentTransform()\n      );\n    }\n\n    if (this._animateBgOpacity) {\n      this._animateTo(pswp.bg, 'opacity', pswp.options.bgOpacity);\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.template, 'opacity', 1);\n    }\n  }\n\n  _animateToClosedState() {\n    const { pswp } = this;\n\n    if (this._animateZoom) {\n      this._setClosedStateZoomPan(true);\n    }\n\n    if (this._animateBgOpacity\n        && pswp.bgOpacity > 0.01) { // do not animate opacity if it's already at 0\n      this._animateTo(pswp.bg, 'opacity', 0);\n    }\n\n    if (this._animateRootOpacity) {\n      this._animateTo(pswp.template, 'opacity', 0);\n    }\n  }\n\n  _setClosedStateZoomPan(animate) {\n    const { pswp } = this;\n    const { innerRect } = this._thumbBounds;\n    const { currSlide, viewportSize } = pswp;\n\n    if (this._croppedZoom) {\n      const containerOnePanX = -viewportSize.x + (this._thumbBounds.x - innerRect.x) + innerRect.w;\n      const containerOnePanY = -viewportSize.y + (this._thumbBounds.y - innerRect.y) + innerRect.h;\n      const containerTwoPanX = viewportSize.x - innerRect.w;\n      const containerTwoPanY = viewportSize.y - innerRect.h;\n\n\n      if (animate) {\n        this._animateTo(\n          this._cropContainer1,\n          'transform',\n          toTransformString(containerOnePanX, containerOnePanY)\n        );\n\n        this._animateTo(\n          this._cropContainer2,\n          'transform',\n          toTransformString(containerTwoPanX, containerTwoPanY)\n        );\n      } else {\n        setTransform(this._cropContainer1, containerOnePanX, containerOnePanY);\n        setTransform(this._cropContainer2, containerTwoPanX, containerTwoPanY);\n      }\n    }\n\n    equalizePoints(currSlide.pan, innerRect || this._thumbBounds);\n    currSlide.currZoomLevel = this._thumbBounds.w / currSlide.width;\n\n    if (animate) {\n      this._animateTo(currSlide.container, 'transform', currSlide.getCurrentTransform());\n    } else {\n      currSlide.applyCurrentZoomPan();\n    }\n  }\n\n  /**\n   * @param {Element} target\n   * @param {String} prop\n   * @param {String} propValue\n   */\n  _animateTo(target, prop, propValue) {\n    if (!this._duration) {\n      target.style[prop] = propValue;\n      return;\n    }\n\n    const { animations } = this.pswp;\n    const animProps = {\n      duration: this._duration,\n      easing: this.pswp.options.easing,\n      onComplete: () => {\n        if (!animations.activeAnimations.length) {\n          this._onAnimationComplete();\n        }\n      },\n      target,\n    };\n    animProps[prop] = propValue;\n    animations.startTransition(animProps);\n  }\n}\n\nconst MIN_SLIDES_TO_CACHE = 5;\n\n/**\n * Returns cache key by slide index and data\n *\n * @param {Object} itemData\n * @param {Integer} index\n * @returns {String}\n */\nfunction getKey(itemData, index) {\n  if (itemData && itemData.src) {\n    return itemData.src + '_' + index;\n  }\n  return index;\n}\n\n\n/**\n * Lazy-load an image\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * @param {Object} itemData Data about the slide\n * @param {PhotoSwipeBase}  instance PhotoSwipe or PhotoSwipeLightbox\n * @param {Integer} index\n * @returns {Object|Boolean} Image that is being decoded or false.\n */\nfunction lazyLoadData(itemData, instance, index) {\n  // src/slide/content/content.js\n  const content = instance.createContentFromData(itemData);\n\n  if (!content || !content.lazyLoad) {\n    return;\n  }\n\n  content.key = getKey(itemData, index);\n\n  const { options } = instance;\n\n  // We need to know dimensions of the image to preload it,\n  // as it might use srcset and we need to define sizes\n  const viewportSize = instance.viewportSize || getViewportSize(options);\n  const panAreaSize = getPanAreaSize(options, viewportSize);\n\n  const zoomLevel = new ZoomLevel(options, itemData, -1);\n  zoomLevel.update(content.width, content.height, panAreaSize);\n\n  content.lazyLoad();\n  content.setDisplayedSize(\n    Math.ceil(content.width * zoomLevel.initial),\n    Math.ceil(content.height * zoomLevel.initial)\n  );\n\n  return content;\n}\n\n\n/**\n * Lazy-loads specific slide.\n * This function is used both by Lightbox and PhotoSwipe core,\n * thus it can be called before dialog is opened.\n *\n * By default it loads image based on viewport size and initial zoom level.\n *\n * @param {Integer} index Slide index\n * @param {Object}  instance PhotoSwipe or PhotoSwipeLightbox eventable instance\n */\nfunction lazyLoadSlide(index, instance) {\n  const itemData = instance.getItemData(index);\n\n  if (instance.dispatch('lazyLoadSlide', { index, itemData }).defaultPrevented) {\n    return;\n  }\n\n  return lazyLoadData(itemData, instance, index);\n}\n\n\nclass ContentLoader {\n  constructor(pswp) {\n    this.pswp = pswp;\n    // Total amount of cached images\n    this.limit = Math.max(\n      pswp.options.preload[0] + pswp.options.preload[1] + 1,\n      MIN_SLIDES_TO_CACHE\n    );\n    this._cachedItems = [];\n  }\n\n  /**\n   * Lazy load nearby slides based on `preload` option.\n   *\n   * @param {Integer} diff Difference between slide indexes that was changed recently, or 0.\n   */\n  updateLazy(diff) {\n    const { pswp } = this;\n\n    if (pswp.dispatch('lazyLoad').defaultPrevented) {\n      return;\n    }\n\n    const { preload } = pswp.options;\n    const isForward = diff === undefined ? true : (diff >= 0);\n    let i;\n\n    // preload[1] - num items to preload in forward direction\n    for (i = 0; i <= preload[1]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? i : (-i)));\n    }\n\n    // preload[0] - num items to preload in backward direction\n    for (i = 1; i <= preload[0]; i++) {\n      this.loadSlideByIndex(pswp.currIndex + (isForward ? (-i) : i));\n    }\n  }\n\n  loadSlideByIndex(index) {\n    index = this.pswp.getLoopedIndex(index);\n    const itemData = this.pswp.getItemData(index);\n    const key = getKey(itemData, index);\n    let content = this.getContentByKey(key);\n    if (!content) {\n      content = lazyLoadSlide(index, this.pswp);\n      content.key = key;\n      this.addToCache(content);\n    }\n  }\n\n  getContentBySlide(slide) {\n    let content = this.getContentByKey(this.getKeyBySlide(slide));\n    if (!content) {\n      // create content if not found in cache\n      content = this.pswp.createContentFromData(slide.data);\n      content.key = this.getKeyBySlide(slide);\n      this.addToCache(content);\n    }\n    // assign slide to content\n    content.setSlide(slide);\n    return content;\n  }\n\n  /**\n   * @param {Content} content\n   */\n  addToCache(content) {\n    // move to the end of array\n    this.removeByKey(content.key);\n    this._cachedItems.push(content);\n\n    if (this._cachedItems.length > this.limit) {\n      // Destroy the first content that's not attached\n      const indexToRemove = this._cachedItems.findIndex(item => !item.isAttached);\n      if (indexToRemove !== -1) {\n        const removedItem = this._cachedItems.splice(indexToRemove, 1)[0];\n        removedItem.destroy();\n      }\n    }\n  }\n\n  /**\n   * Removes an image from cache, does not destroy() it, just removes.\n   *\n   * @param {String} key\n   */\n  removeByKey(key) {\n    const indexToRemove = this._cachedItems.findIndex(item => item.key === key);\n    if (indexToRemove !== -1) {\n      this._cachedItems.splice(indexToRemove, 1);\n    }\n  }\n\n  getContentByKey(key) {\n    return this._cachedItems.find(content => content.key === key);\n  }\n\n  getKeyBySlide(slide) {\n    return getKey(slide.data, slide.index);\n  }\n\n  destroy() {\n    this._cachedItems.forEach(content => content.destroy());\n    this._cachedItems = null;\n  }\n}\n\nconst defaultOptions = {\n  allowPanToNext: true,\n  spacing: 0.1,\n  loop: true,\n  pinchToClose: true,\n  closeOnVerticalDrag: true,\n  hideAnimationDuration: 333,\n  showAnimationDuration: 333,\n  zoomAnimationDuration: 333,\n  escKey: true,\n  arrowKeys: true,\n  returnFocus: true,\n  limitMaxZoom: true,\n\n  clickToCloseNonZoomable: true,\n  imageClickAction: 'zoom-or-close',\n  bgClickAction: 'close',\n  tapAction: 'toggle-controls',\n  doubleTapAction: 'zoom',\n\n  indexIndicatorSep: ' / ',\n\n  bgOpacity: 0.8,\n\n  index: 0,\n  errorMsg: '<div class=\"pswp__error-msg\"><a href=\"\" target=\"_blank\">The image</a> could not be loaded.</div>',\n  preload: [1, 2],\n  easing: 'cubic-bezier(.4,0,.22,1)'\n};\n\nclass PhotoSwipe extends PhotoSwipeBase {\n  constructor(items, options) {\n    super();\n\n    this.items = items;\n\n    this._prepareOptions(options);\n\n    // offset of viewport relative to document\n    this.offset = {};\n\n    this._prevViewportSize = {};\n\n    // Size of scrollable PhotoSwipe viewport\n    this.viewportSize = {};\n\n    // background (backdrop) opacity\n    this.bgOpacity = 1;\n\n    this.events = new DOMEvents();\n\n    /** @type {Animations} */\n    this.animations = new Animations();\n\n    this.mainScroll = new MainScroll(this);\n    this.gestures = new Gestures(this);\n    this.opener = new Opener(this);\n    this.keyboard = new Keyboard(this);\n    this.contentLoader = new ContentLoader(this);\n  }\n\n  init() {\n    if (this.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isOpen = true;\n\n    if (this.getNumItems() < 3) {\n      // disable loop if less than 3 items,\n      // as we do not clone slides\n      this.options.loop = false;\n    }\n\n    this.dispatch('init');\n\n    this._createMainStructure();\n\n    // init modules\n    // _modules.forEach(function (module) {\n    //   module();\n    // });\n\n    // add classes to the root element of PhotoSwipe\n    let rootClasses = 'pswp--open';\n    if (this.gestures.supportsTouch) {\n      rootClasses += ' pswp--touch';\n    }\n    if (!this.options.allowMouseDrag) {\n      rootClasses += ' pswp--no-mouse-drag';\n    }\n    if (this.options.mainClass) {\n      rootClasses += ' ' + this.options.mainClass;\n    }\n    this.template.className += ' ' + rootClasses;\n\n    this.currIndex = this.options.index || 0;\n    this.potentialIndex = this.currIndex;\n    this.dispatch('firstUpdate'); // starting index can be modified here\n\n    // initialize scroll wheel handler to block the scroll\n    this.scrollWheel = new ScrollWheel(this);\n\n    // sanitize index\n    if (Number.isNaN(this.currIndex)\n        || this.currIndex < 0\n        || this.currIndex >= this.getNumItems()) {\n      this.currIndex = 0;\n    }\n\n    if (!this.gestures.supportsTouch) {\n      // enable mouse features if no touch support detected\n      this.mouseDetected();\n    }\n\n    // causes forced synchronous layout\n    this.updateSize();\n\n    this.offset.y = window.pageYOffset;\n\n    this._initialItemData = this.getItemData(this.currIndex);\n    this.dispatch('gettingData', this.currIndex, this._initialItemData, true);\n\n    // *Layout* - calculate size and position of elements here\n    this._initialThumbBounds = this.getThumbBounds();\n    this.dispatch('initialLayout');\n\n    this.on('initialZoomInEnd', () => {\n      // Add content to the previous and next slide\n      this.setContent(this.mainScroll.itemHolders[0], this.currIndex - 1);\n      this.setContent(this.mainScroll.itemHolders[2], this.currIndex + 1);\n\n      this.mainScroll.itemHolders[0].el.style.display = 'block';\n      this.mainScroll.itemHolders[2].el.style.display = 'block';\n\n      this.appendHeavy();\n\n      this.contentLoader.updateLazy();\n\n      this.events.add(window, 'resize', this._handlePageResize.bind(this));\n      this.events.add(window, 'scroll', this._updatePageScrollOffset.bind(this));\n      this.dispatch('bindEvents');\n    });\n\n    // remove placeholder when slide is loaded\n    this.on('loadComplete', (e) => {\n      if (e.slide.heavyAppended) {\n        e.slide.removePlaceholder();\n      }\n    });\n\n    this.on('loadError', (e) => {\n      if (e.slide.heavyAppended) {\n        e.slide.removePlaceholder();\n        e.slide.displayError();\n      }\n    });\n\n    // set content for center slide (first time)\n    this.setContent(this.mainScroll.itemHolders[1], this.currIndex);\n    this.dispatch('change');\n\n    this.opener.open();\n\n    this.dispatch('afterInit');\n\n    return true;\n  }\n\n  /**\n   * Get looped slide index\n   * (for example, -1 will return the last slide)\n   *\n   * @param {Integer} index\n   */\n  getLoopedIndex(index) {\n    const numSlides = this.getNumItems();\n\n    if (this.options.loop) {\n      if (index > numSlides - 1) {\n        index -= numSlides;\n      }\n\n      if (index < 0) {\n        index += numSlides;\n      }\n    }\n\n    index = clamp(index, 0, numSlides - 1);\n\n    return index;\n  }\n\n  /**\n   * Get the difference between current index and provided index.\n   * Used to determine the direction of movement\n   * or if slide should be moved at all.\n   *\n   * @param {Integer} index\n   */\n  getIndexDiff(index) {\n    if (this.options.loop) {\n      const lastItemIndex = this.getNumItems() - 1;\n      // Moving from the last to the first or vice-versa:\n      if (this.currIndex === 0 && index === lastItemIndex) {\n        // go back one slide\n        return -1;\n      } if (this.currIndex === lastItemIndex && index === 0) {\n        // go forward one slide\n        return 1;\n      }\n    }\n\n    return index - this.currIndex;\n  }\n\n  appendHeavy() {\n    this.mainScroll.itemHolders.forEach((itemHolder) => {\n      if (itemHolder.slide) {\n        itemHolder.slide.appendHeavy();\n      }\n    });\n  }\n\n  /**\n   * Change the slide\n   * @param  {Integer} New index\n   */\n  goTo(index) {\n    index = this.getLoopedIndex(index);\n\n    // TODO: allow to pause the event propagation?\n\n    const indexChanged = this.mainScroll.moveIndexBy(index - this.potentialIndex);\n    if (indexChanged) {\n      this.dispatch('afterGoto');\n    }\n  }\n\n  /**\n   * Go to the next slide.\n   */\n  next() {\n    this.goTo(this.potentialIndex + 1);\n  }\n\n  /**\n   * Go to the next slide.\n   */\n  prev() {\n    this.goTo(this.potentialIndex - 1);\n  }\n\n  /**\n   * @see slide/slide.js zoomTo\n   */\n  zoomTo(...args) {\n    this.currSlide.zoomTo(...args);\n  }\n\n  /**\n   * @see slide/slide.js toggleZoom\n   */\n  toggleZoom() {\n    this.currSlide.toggleZoom();\n  }\n\n  /**\n   * Close the gallery.\n   * After closing transition ends - destroy it\n   */\n  close() {\n    if (!this.opener.isOpen || this.isDestroying) {\n      return;\n    }\n\n    this.isDestroying = true;\n\n    this.dispatch('close');\n\n    this.events.removeAll();\n    this.opener.close();\n  }\n\n  /**\n   * Destroys the gallery:\n   * - unbinds events,\n   * - cleans intervals and timeouts\n   * - removes elements from DOM\n   */\n  destroy() {\n    if (!this.isDestroying) {\n      this.close();\n      return;\n    }\n\n    this.dispatch('destroy');\n\n    this.listeners = null;\n\n    this.scrollWrap.ontouchmove = null;\n    this.scrollWrap.ontouchend = null;\n\n    this.template.remove();\n    this.contentLoader.destroy();\n    this.events.removeAll();\n  }\n\n  setContent(holder, index) {\n    // destroy previous slide to clean the memory\n    if (holder.slide) {\n      holder.slide.destroy();\n    }\n\n    if (this.options.loop) {\n      index = this.getLoopedIndex(index);\n    } else if (index < 0 || index >= this.getNumItems()) {\n      // empty holder\n      holder.el.innerHTML = '';\n      return;\n    }\n\n    const itemData = this.getItemData(index);\n    holder.slide = new Slide(itemData, index, this);\n\n    // set current slide\n    if (index === this.currIndex) {\n      this.currSlide = holder.slide;\n    }\n\n    holder.slide.append(holder.el);\n  }\n\n  getViewportCenterPoint() {\n    return {\n      x: this.viewportSize.x / 2,\n      y: this.viewportSize.y / 2\n    };\n  }\n\n  /**\n   * Update size of all elements.\n   * Executed on init and on page resize.\n   *\n   * @param  {Boolean} force Update size even if size of viewport was not changed.\n   */\n  updateSize(force) {\n    // let item;\n    // let itemIndex;\n\n    if (this.isDestroying) {\n      // exit if PhotoSwipe is closed or closing\n      // (to avoid errors, as resize event might be delayed)\n      return;\n    }\n\n    //const newWidth = this.scrollWrap.clientWidth;\n    //const newHeight = this.scrollWrap.clientHeight;\n\n    const newViewportSize = getViewportSize(this.options, this);\n\n    if (!force && pointsEqual(newViewportSize, this._prevViewportSize)) {\n      // Exit if dimensions were not changed\n      return;\n    }\n\n    //this._prevViewportSize.x = newWidth;\n    //this._prevViewportSize.y = newHeight;\n    equalizePoints(this._prevViewportSize, newViewportSize);\n\n    this.dispatch('beforeResize');\n\n    equalizePoints(this.viewportSize, this._prevViewportSize);\n\n    this._updatePageScrollOffset();\n\n    this.dispatch('viewportSize');\n\n    // Resize slides only after opener animation is finished\n    // and don't re-calculate size on inital size update\n    this.mainScroll.resize(this.opener.isOpen);\n\n    if (!this.hasMouse && window.matchMedia('(any-hover: hover)').matches) {\n      this.mouseDetected();\n    }\n\n    this.dispatch('resize');\n  }\n\n  applyBgOpacity(opacity) {\n    this.bgOpacity = Math.max(opacity, 0);\n    this.bg.style.opacity = this.bgOpacity * this.options.bgOpacity;\n  }\n\n  /**\n   * Whether mouse is detected\n   */\n  mouseDetected() {\n    if (!this.hasMouse) {\n      this.hasMouse = true;\n      this.template.classList.add('pswp--has_mouse');\n    }\n  }\n\n  /**\n   * Page resize event handler\n   */\n  _handlePageResize() {\n    this.updateSize();\n\n    // In iOS webview, if element size depends on document size,\n    // it'll be measured incorrectly in resize event\n    //\n    // https://bugs.webkit.org/show_bug.cgi?id=170595\n    // https://hackernoon.com/onresize-event-broken-in-mobile-safari-d8469027bf4d\n    if (/iPhone|iPad|iPod/i.test(window.navigator.userAgent)) {\n      setTimeout(() => {\n        this.updateSize();\n      }, 500);\n    }\n  }\n\n  /**\n   * Page scroll offset is used\n   * to get correct coordinates\n   * relative to PhotoSwipe viewport.\n   */\n  _updatePageScrollOffset() {\n    this.setScrollOffset(0, window.pageYOffset);\n  }\n\n  setScrollOffset(x, y) {\n    this.offset.x = x;\n    this.offset.y = y;\n    this.dispatch('updateScrollOffset');\n  }\n\n  /**\n   * Create main HTML structure of PhotoSwipe,\n   * and add it to DOM\n   */\n  _createMainStructure() {\n    // root DOM element of PhotoSwipe (.pswp)\n    this.template = createElement('pswp');\n    this.template.setAttribute('tabindex', -1);\n    this.template.setAttribute('role', 'dialog');\n\n    // Background is added as a separate element,\n    // as animating opacity is faster than animating rgba()\n    this.bg = createElement('pswp__bg', false, this.template);\n    this.scrollWrap = createElement('pswp__scroll-wrap', false, this.template);\n    this.container = createElement('pswp__container', false, this.scrollWrap);\n\n    this.mainScroll.appendHolders();\n\n    this.ui = new UI(this);\n    this.ui.init();\n\n    // append to DOM\n    (this.options.appendToEl || document.body).appendChild(this.template);\n  }\n\n\n  /**\n   * Get position and dimensions of small thumbnail\n   *   {x:,y:,w:}\n   *\n   * Height is optional (calculated based on the large image)\n   */\n  getThumbBounds() {\n    return getThumbBounds(\n      this.currIndex,\n      this.currSlide ? this.currSlide.data : this._initialItemData,\n      this\n    );\n  }\n\n  _prepareOptions(options) {\n    if (window.matchMedia('(prefers-reduced-motion), (update: slow)').matches) {\n      options.showHideAnimationType = 'none';\n      options.zoomAnimationDuration = 0;\n    }\n\n    this.options = {\n      ...defaultOptions,\n      ...options\n    };\n  }\n}\n\nexport { Content, ImageContent, PhotoSwipe as default };\n//# sourceMappingURL=photoswipe.esm.js.map\n","// pswp.js ... load Photoswiper plugin and initial my images gallery\n\n// document.addEventListener(\"DOMContentLoaded\", () => {});\n\nimport PhotoSwipeLightbox from 'photoswipe/dist/photoswipe-lightbox.esm.js'\nimport PhotoSwipe from 'photoswipe/dist/photoswipe.esm.js'\n\n// don't forget to include CSS in some way\n// import 'photoswipe/dist/photoswipe.css';\n\nconst lightbox = new PhotoSwipeLightbox({\n  gallerySelector: '.pswp-gallery',\n  childSelector: 'figure a',\n  pswpModule: PhotoSwipe,\n})\nlightbox.init()\n\nconst onelightbox = new PhotoSwipeLightbox({\n  gallerySelector: '.pswp-img a',\n  showHideAnimationType: 'fade',\n  pswpModule: PhotoSwipe,\n})\nonelightbox.init()\n","/*! Magnific Popup - v1.1.0 - 2016-02-20\r\n* http://dimsemenov.com/plugins/magnific-popup/\r\n* Copyright (c) 2016 Dmitry Semenov; */\r\n;(function (factory) { \r\n  if (typeof define === 'function' && define.amd) { \r\n   // AMD. Register as an anonymous module. \r\n   define(['jquery'], factory); \r\n   } else if (typeof exports === 'object') { \r\n   // Node/CommonJS \r\n   factory(require('jquery')); \r\n   } else { \r\n   // Browser globals \r\n   factory(window.jQuery || window.Zepto); \r\n   } \r\n   }(function($) { \r\n  \r\n  /*>>core*/\r\n  /**\r\n   * \r\n   * Magnific Popup Core JS file\r\n   * \r\n   */\r\n  \r\n  \r\n  /**\r\n   * Private static constants\r\n   */\r\n  var CLOSE_EVENT = 'Close',\r\n    BEFORE_CLOSE_EVENT = 'BeforeClose',\r\n    AFTER_CLOSE_EVENT = 'AfterClose',\r\n    BEFORE_APPEND_EVENT = 'BeforeAppend',\r\n    MARKUP_PARSE_EVENT = 'MarkupParse',\r\n    OPEN_EVENT = 'Open',\r\n    CHANGE_EVENT = 'Change',\r\n    NS = 'mfp',\r\n    EVENT_NS = '.' + NS,\r\n    READY_CLASS = 'mfp-ready',\r\n    REMOVING_CLASS = 'mfp-removing',\r\n    PREVENT_CLOSE_CLASS = 'mfp-prevent-close';\r\n  \r\n  \r\n  /**\r\n   * Private vars \r\n   */\r\n  /*jshint -W079 */\r\n  var mfp, // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'\r\n    MagnificPopup = function(){},\r\n    _isJQ = !!(window.jQuery),\r\n    _prevStatus,\r\n    _window = $(window),\r\n    _document,\r\n    _prevContentType,\r\n    _wrapClasses,\r\n    _currPopupType;\r\n  \r\n  \r\n  /**\r\n   * Private functions\r\n   */\r\n  var _mfpOn = function(name, f) {\r\n      mfp.ev.on(NS + name + EVENT_NS, f);\r\n    },\r\n    _getEl = function(className, appendTo, html, raw) {\r\n      var el = document.createElement('div');\r\n      el.className = 'mfp-'+className;\r\n      if(html) {\r\n        el.innerHTML = html;\r\n      }\r\n      if(!raw) {\r\n        el = $(el);\r\n        if(appendTo) {\r\n          el.appendTo(appendTo);\r\n        }\r\n      } else if(appendTo) {\r\n        appendTo.appendChild(el);\r\n      }\r\n      return el;\r\n    },\r\n    _mfpTrigger = function(e, data) {\r\n      mfp.ev.triggerHandler(NS + e, data);\r\n  \r\n      if(mfp.st.callbacks) {\r\n        // converts \"mfpEventName\" to \"eventName\" callback and triggers it if it's present\r\n        e = e.charAt(0).toLowerCase() + e.slice(1);\r\n        if(mfp.st.callbacks[e]) {\r\n          mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);\r\n        }\r\n      }\r\n    },\r\n    _getCloseBtn = function(type) {\r\n      if(type !== _currPopupType || !mfp.currTemplate.closeBtn) {\r\n        mfp.currTemplate.closeBtn = $( mfp.st.closeMarkup.replace('%title%', mfp.st.tClose ) );\r\n        _currPopupType = type;\r\n      }\r\n      return mfp.currTemplate.closeBtn;\r\n    },\r\n    // Initialize Magnific Popup only when called at least once\r\n    _checkInstance = function() {\r\n      if(!$.magnificPopup.instance) {\r\n        /*jshint -W020 */\r\n        mfp = new MagnificPopup();\r\n        mfp.init();\r\n        $.magnificPopup.instance = mfp;\r\n      }\r\n    },\r\n    // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr\r\n    supportsTransitions = function() {\r\n      var s = document.createElement('p').style, // 's' for style. better to create an element if body yet to exist\r\n        v = ['ms','O','Moz','Webkit']; // 'v' for vendor\r\n  \r\n      if( s['transition'] !== undefined ) {\r\n        return true; \r\n      }\r\n        \r\n      while( v.length ) {\r\n        if( v.pop() + 'Transition' in s ) {\r\n          return true;\r\n        }\r\n      }\r\n          \r\n      return false;\r\n    };\r\n  \r\n  \r\n  \r\n  /**\r\n   * Public functions\r\n   */\r\n  MagnificPopup.prototype = {\r\n  \r\n    constructor: MagnificPopup,\r\n  \r\n    /**\r\n     * Initializes Magnific Popup plugin. \r\n     * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed\r\n     */\r\n    init: function() {\r\n      var appVersion = navigator.appVersion;\r\n      mfp.isLowIE = mfp.isIE8 = document.all && !document.addEventListener;\r\n      mfp.isAndroid = (/android/gi).test(appVersion);\r\n      mfp.isIOS = (/iphone|ipad|ipod/gi).test(appVersion);\r\n      mfp.supportsTransition = supportsTransitions();\r\n  \r\n      // We disable fixed positioned lightbox on devices that don't handle it nicely.\r\n      // If you know a better way of detecting this - let me know.\r\n      mfp.probablyMobile = (mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent) );\r\n      _document = $(document);\r\n  \r\n      mfp.popupsCache = {};\r\n    },\r\n  \r\n    /**\r\n     * Opens popup\r\n     * @param  data [description]\r\n     */\r\n    open: function(data) {\r\n  \r\n      var i;\r\n  \r\n      if(data.isObj === false) { \r\n        // convert jQuery collection to array to avoid conflicts later\r\n        mfp.items = data.items.toArray();\r\n  \r\n        mfp.index = 0;\r\n        var items = data.items,\r\n          item;\r\n        for(i = 0; i < items.length; i++) {\r\n          item = items[i];\r\n          if(item.parsed) {\r\n            item = item.el[0];\r\n          }\r\n          if(item === data.el[0]) {\r\n            mfp.index = i;\r\n            break;\r\n          }\r\n        }\r\n      } else {\r\n        mfp.items = $.isArray(data.items) ? data.items : [data.items];\r\n        mfp.index = data.index || 0;\r\n      }\r\n  \r\n      // if popup is already opened - we just update the content\r\n      if(mfp.isOpen) {\r\n        mfp.updateItemHTML();\r\n        return;\r\n      }\r\n      \r\n      mfp.types = []; \r\n      _wrapClasses = '';\r\n      if(data.mainEl && data.mainEl.length) {\r\n        mfp.ev = data.mainEl.eq(0);\r\n      } else {\r\n        mfp.ev = _document;\r\n      }\r\n  \r\n      if(data.key) {\r\n        if(!mfp.popupsCache[data.key]) {\r\n          mfp.popupsCache[data.key] = {};\r\n        }\r\n        mfp.currTemplate = mfp.popupsCache[data.key];\r\n      } else {\r\n        mfp.currTemplate = {};\r\n      }\r\n  \r\n  \r\n  \r\n      mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data ); \r\n      mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;\r\n  \r\n      if(mfp.st.modal) {\r\n        mfp.st.closeOnContentClick = false;\r\n        mfp.st.closeOnBgClick = false;\r\n        mfp.st.showCloseBtn = false;\r\n        mfp.st.enableEscapeKey = false;\r\n      }\r\n      \r\n  \r\n      // Building markup\r\n      // main containers are created only once\r\n      if(!mfp.bgOverlay) {\r\n  \r\n        // Dark overlay\r\n        mfp.bgOverlay = _getEl('bg').on('click'+EVENT_NS, function() {\r\n          mfp.close();\r\n        });\r\n  \r\n        mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click'+EVENT_NS, function(e) {\r\n          if(mfp._checkIfClose(e.target)) {\r\n            mfp.close();\r\n          }\r\n        });\r\n  \r\n        mfp.container = _getEl('container', mfp.wrap);\r\n      }\r\n  \r\n      mfp.contentContainer = _getEl('content');\r\n      if(mfp.st.preloader) {\r\n        mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);\r\n      }\r\n  \r\n  \r\n      // Initializing modules\r\n      var modules = $.magnificPopup.modules;\r\n      for(i = 0; i < modules.length; i++) {\r\n        var n = modules[i];\r\n        n = n.charAt(0).toUpperCase() + n.slice(1);\r\n        mfp['init'+n].call(mfp);\r\n      }\r\n      _mfpTrigger('BeforeOpen');\r\n  \r\n  \r\n      if(mfp.st.showCloseBtn) {\r\n        // Close button\r\n        if(!mfp.st.closeBtnInside) {\r\n          mfp.wrap.append( _getCloseBtn() );\r\n        } else {\r\n          _mfpOn(MARKUP_PARSE_EVENT, function(e, template, values, item) {\r\n            values.close_replaceWith = _getCloseBtn(item.type);\r\n          });\r\n          _wrapClasses += ' mfp-close-btn-in';\r\n        }\r\n      }\r\n  \r\n      if(mfp.st.alignTop) {\r\n        _wrapClasses += ' mfp-align-top';\r\n      }\r\n  \r\n    \r\n  \r\n      if(mfp.fixedContentPos) {\r\n        mfp.wrap.css({\r\n          overflow: mfp.st.overflowY,\r\n          overflowX: 'hidden',\r\n          overflowY: mfp.st.overflowY\r\n        });\r\n      } else {\r\n        mfp.wrap.css({ \r\n          top: _window.scrollTop(),\r\n          position: 'absolute'\r\n        });\r\n      }\r\n      if( mfp.st.fixedBgPos === false || (mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) ) {\r\n        mfp.bgOverlay.css({\r\n          height: _document.height(),\r\n          position: 'absolute'\r\n        });\r\n      }\r\n  \r\n      \r\n  \r\n      if(mfp.st.enableEscapeKey) {\r\n        // Close on ESC key\r\n        _document.on('keyup' + EVENT_NS, function(e) {\r\n          if(e.keyCode === 27) {\r\n            mfp.close();\r\n          }\r\n        });\r\n      }\r\n  \r\n      _window.on('resize' + EVENT_NS, function() {\r\n        mfp.updateSize();\r\n      });\r\n  \r\n  \r\n      if(!mfp.st.closeOnContentClick) {\r\n        _wrapClasses += ' mfp-auto-cursor';\r\n      }\r\n      \r\n      if(_wrapClasses)\r\n        mfp.wrap.addClass(_wrapClasses);\r\n  \r\n  \r\n      // this triggers recalculation of layout, so we get it once to not to trigger twice\r\n      var windowHeight = mfp.wH = _window.height();\r\n  \r\n      \r\n      var windowStyles = {};\r\n  \r\n      if( mfp.fixedContentPos ) {\r\n              if(mfp._hasScrollBar(windowHeight)){\r\n                  var s = mfp._getScrollbarSize();\r\n                  if(s) {\r\n                      windowStyles.marginRight = s;\r\n                  }\r\n              }\r\n          }\r\n  \r\n      if(mfp.fixedContentPos) {\r\n        if(!mfp.isIE7) {\r\n          windowStyles.overflow = 'hidden';\r\n        } else {\r\n          // ie7 double-scroll bug\r\n          $('body, html').css('overflow', 'hidden');\r\n        }\r\n      }\r\n  \r\n      \r\n      \r\n      var classesToadd = mfp.st.mainClass;\r\n      if(mfp.isIE7) {\r\n        classesToadd += ' mfp-ie7';\r\n      }\r\n      if(classesToadd) {\r\n        mfp._addClassToMFP( classesToadd );\r\n      }\r\n  \r\n      // add content\r\n      mfp.updateItemHTML();\r\n  \r\n      _mfpTrigger('BuildControls');\r\n  \r\n      // remove scrollbar, add margin e.t.c\r\n      $('html').css(windowStyles);\r\n      \r\n      // add everything to DOM\r\n      mfp.bgOverlay.add(mfp.wrap).prependTo( mfp.st.prependTo || $(document.body) );\r\n  \r\n      // Save last focused element\r\n      mfp._lastFocusedEl = document.activeElement;\r\n      \r\n      // Wait for next cycle to allow CSS transition\r\n      setTimeout(function() {\r\n        \r\n        if(mfp.content) {\r\n          mfp._addClassToMFP(READY_CLASS);\r\n          mfp._setFocus();\r\n        } else {\r\n          // if content is not defined (not loaded e.t.c) we add class only for BG\r\n          mfp.bgOverlay.addClass(READY_CLASS);\r\n        }\r\n        \r\n        // Trap the focus in popup\r\n        _document.on('focusin' + EVENT_NS, mfp._onFocusIn);\r\n  \r\n      }, 16);\r\n  \r\n      mfp.isOpen = true;\r\n      mfp.updateSize(windowHeight);\r\n      _mfpTrigger(OPEN_EVENT);\r\n  \r\n      return data;\r\n    },\r\n  \r\n    /**\r\n     * Closes the popup\r\n     */\r\n    close: function() {\r\n      if(!mfp.isOpen) return;\r\n      _mfpTrigger(BEFORE_CLOSE_EVENT);\r\n  \r\n      mfp.isOpen = false;\r\n      // for CSS3 animation\r\n      if(mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition )  {\r\n        mfp._addClassToMFP(REMOVING_CLASS);\r\n        setTimeout(function() {\r\n          mfp._close();\r\n        }, mfp.st.removalDelay);\r\n      } else {\r\n        mfp._close();\r\n      }\r\n    },\r\n  \r\n    /**\r\n     * Helper for close() function\r\n     */\r\n    _close: function() {\r\n      _mfpTrigger(CLOSE_EVENT);\r\n  \r\n      var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';\r\n  \r\n      mfp.bgOverlay.detach();\r\n      mfp.wrap.detach();\r\n      mfp.container.empty();\r\n  \r\n      if(mfp.st.mainClass) {\r\n        classesToRemove += mfp.st.mainClass + ' ';\r\n      }\r\n  \r\n      mfp._removeClassFromMFP(classesToRemove);\r\n  \r\n      if(mfp.fixedContentPos) {\r\n        var windowStyles = {marginRight: ''};\r\n        if(mfp.isIE7) {\r\n          $('body, html').css('overflow', '');\r\n        } else {\r\n          windowStyles.overflow = '';\r\n        }\r\n        $('html').css(windowStyles);\r\n      }\r\n      \r\n      _document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);\r\n      mfp.ev.off(EVENT_NS);\r\n  \r\n      // clean up DOM elements that aren't removed\r\n      mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');\r\n      mfp.bgOverlay.attr('class', 'mfp-bg');\r\n      mfp.container.attr('class', 'mfp-container');\r\n  \r\n      // remove close button from target element\r\n      if(mfp.st.showCloseBtn &&\r\n      (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {\r\n        if(mfp.currTemplate.closeBtn)\r\n          mfp.currTemplate.closeBtn.detach();\r\n      }\r\n  \r\n  \r\n      if(mfp.st.autoFocusLast && mfp._lastFocusedEl) {\r\n        $(mfp._lastFocusedEl).focus(); // put tab focus back\r\n      }\r\n      mfp.currItem = null;\t\r\n      mfp.content = null;\r\n      mfp.currTemplate = null;\r\n      mfp.prevHeight = 0;\r\n  \r\n      _mfpTrigger(AFTER_CLOSE_EVENT);\r\n    },\r\n    \r\n    updateSize: function(winHeight) {\r\n  \r\n      if(mfp.isIOS) {\r\n        // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2\r\n        var zoomLevel = document.documentElement.clientWidth / window.innerWidth;\r\n        var height = window.innerHeight * zoomLevel;\r\n        mfp.wrap.css('height', height);\r\n        mfp.wH = height;\r\n      } else {\r\n        mfp.wH = winHeight || _window.height();\r\n      }\r\n      // Fixes #84: popup incorrectly positioned with position:relative on body\r\n      if(!mfp.fixedContentPos) {\r\n        mfp.wrap.css('height', mfp.wH);\r\n      }\r\n  \r\n      _mfpTrigger('Resize');\r\n  \r\n    },\r\n  \r\n    /**\r\n     * Set content of popup based on current index\r\n     */\r\n    updateItemHTML: function() {\r\n      var item = mfp.items[mfp.index];\r\n  \r\n      // Detach and perform modifications\r\n      mfp.contentContainer.detach();\r\n  \r\n      if(mfp.content)\r\n        mfp.content.detach();\r\n  \r\n      if(!item.parsed) {\r\n        item = mfp.parseEl( mfp.index );\r\n      }\r\n  \r\n      var type = item.type;\r\n  \r\n      _mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);\r\n      // BeforeChange event works like so:\r\n      // _mfpOn('BeforeChange', function(e, prevType, newType) { });\r\n  \r\n      mfp.currItem = item;\r\n  \r\n      if(!mfp.currTemplate[type]) {\r\n        var markup = mfp.st[type] ? mfp.st[type].markup : false;\r\n  \r\n        // allows to modify markup\r\n        _mfpTrigger('FirstMarkupParse', markup);\r\n  \r\n        if(markup) {\r\n          mfp.currTemplate[type] = $(markup);\r\n        } else {\r\n          // if there is no markup found we just define that template is parsed\r\n          mfp.currTemplate[type] = true;\r\n        }\r\n      }\r\n  \r\n      if(_prevContentType && _prevContentType !== item.type) {\r\n        mfp.container.removeClass('mfp-'+_prevContentType+'-holder');\r\n      }\r\n  \r\n      var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);\r\n      mfp.appendContent(newContent, type);\r\n  \r\n      item.preloaded = true;\r\n  \r\n      _mfpTrigger(CHANGE_EVENT, item);\r\n      _prevContentType = item.type;\r\n  \r\n      // Append container back after its content changed\r\n      mfp.container.prepend(mfp.contentContainer);\r\n  \r\n      _mfpTrigger('AfterChange');\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Set HTML content of popup\r\n     */\r\n    appendContent: function(newContent, type) {\r\n      mfp.content = newContent;\r\n  \r\n      if(newContent) {\r\n        if(mfp.st.showCloseBtn && mfp.st.closeBtnInside &&\r\n          mfp.currTemplate[type] === true) {\r\n          // if there is no markup, we just append close button element inside\r\n          if(!mfp.content.find('.mfp-close').length) {\r\n            mfp.content.append(_getCloseBtn());\r\n          }\r\n        } else {\r\n          mfp.content = newContent;\r\n        }\r\n      } else {\r\n        mfp.content = '';\r\n      }\r\n  \r\n      _mfpTrigger(BEFORE_APPEND_EVENT);\r\n      mfp.container.addClass('mfp-'+type+'-holder');\r\n  \r\n      mfp.contentContainer.append(mfp.content);\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Creates Magnific Popup data object based on given data\r\n     * @param  {int} index Index of item to parse\r\n     */\r\n    parseEl: function(index) {\r\n      var item = mfp.items[index],\r\n        type;\r\n  \r\n      if(item.tagName) {\r\n        item = { el: $(item) };\r\n      } else {\r\n        type = item.type;\r\n        item = { data: item, src: item.src };\r\n      }\r\n  \r\n      if(item.el) {\r\n        var types = mfp.types;\r\n  \r\n        // check for 'mfp-TYPE' class\r\n        for(var i = 0; i < types.length; i++) {\r\n          if( item.el.hasClass('mfp-'+types[i]) ) {\r\n            type = types[i];\r\n            break;\r\n          }\r\n        }\r\n  \r\n        item.src = item.el.attr('data-mfp-src');\r\n        if(!item.src) {\r\n          item.src = item.el.attr('href');\r\n        }\r\n      }\r\n  \r\n      item.type = type || mfp.st.type || 'inline';\r\n      item.index = index;\r\n      item.parsed = true;\r\n      mfp.items[index] = item;\r\n      _mfpTrigger('ElementParse', item);\r\n  \r\n      return mfp.items[index];\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Initializes single popup or a group of popups\r\n     */\r\n    addGroup: function(el, options) {\r\n      var eHandler = function(e) {\r\n        e.mfpEl = this;\r\n        mfp._openClick(e, el, options);\r\n      };\r\n  \r\n      if(!options) {\r\n        options = {};\r\n      }\r\n  \r\n      var eName = 'click.magnificPopup';\r\n      options.mainEl = el;\r\n  \r\n      if(options.items) {\r\n        options.isObj = true;\r\n        el.off(eName).on(eName, eHandler);\r\n      } else {\r\n        options.isObj = false;\r\n        if(options.delegate) {\r\n          el.off(eName).on(eName, options.delegate , eHandler);\r\n        } else {\r\n          options.items = el;\r\n          el.off(eName).on(eName, eHandler);\r\n        }\r\n      }\r\n    },\r\n    _openClick: function(e, el, options) {\r\n      var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;\r\n  \r\n  \r\n      if(!midClick && ( e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey ) ) {\r\n        return;\r\n      }\r\n  \r\n      var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;\r\n  \r\n      if(disableOn) {\r\n        if($.isFunction(disableOn)) {\r\n          if( !disableOn.call(mfp) ) {\r\n            return true;\r\n          }\r\n        } else { // else it's number\r\n          if( _window.width() < disableOn ) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n  \r\n      if(e.type) {\r\n        e.preventDefault();\r\n  \r\n        // This will prevent popup from closing if element is inside and popup is already opened\r\n        if(mfp.isOpen) {\r\n          e.stopPropagation();\r\n        }\r\n      }\r\n  \r\n      options.el = $(e.mfpEl);\r\n      if(options.delegate) {\r\n        options.items = el.find(options.delegate);\r\n      }\r\n      mfp.open(options);\r\n    },\r\n  \r\n  \r\n    /**\r\n     * Updates text on preloader\r\n     */\r\n    updateStatus: function(status, text) {\r\n  \r\n      if(mfp.preloader) {\r\n        if(_prevStatus !== status) {\r\n          mfp.container.removeClass('mfp-s-'+_prevStatus);\r\n        }\r\n  \r\n        if(!text && status === 'loading') {\r\n          text = mfp.st.tLoading;\r\n        }\r\n  \r\n        var data = {\r\n          status: status,\r\n          text: text\r\n        };\r\n        // allows to modify status\r\n        _mfpTrigger('UpdateStatus', data);\r\n  \r\n        status = data.status;\r\n        text = data.text;\r\n  \r\n        mfp.preloader.html(text);\r\n  \r\n        mfp.preloader.find('a').on('click', function(e) {\r\n          e.stopImmediatePropagation();\r\n        });\r\n  \r\n        mfp.container.addClass('mfp-s-'+status);\r\n        _prevStatus = status;\r\n      }\r\n    },\r\n  \r\n  \r\n    /*\r\n      \"Private\" helpers that aren't private at all\r\n     */\r\n    // Check to close popup or not\r\n    // \"target\" is an element that was clicked\r\n    _checkIfClose: function(target) {\r\n  \r\n      if($(target).hasClass(PREVENT_CLOSE_CLASS)) {\r\n        return;\r\n      }\r\n  \r\n      var closeOnContent = mfp.st.closeOnContentClick;\r\n      var closeOnBg = mfp.st.closeOnBgClick;\r\n  \r\n      if(closeOnContent && closeOnBg) {\r\n        return true;\r\n      } else {\r\n  \r\n        // We close the popup if click is on close button or on preloader. Or if there is no content.\r\n        if(!mfp.content || $(target).hasClass('mfp-close') || (mfp.preloader && target === mfp.preloader[0]) ) {\r\n          return true;\r\n        }\r\n  \r\n        // if click is outside the content\r\n        if(  (target !== mfp.content[0] && !$.contains(mfp.content[0], target))  ) {\r\n          if(closeOnBg) {\r\n            // last check, if the clicked element is in DOM, (in case it's removed onclick)\r\n            if( $.contains(document, target) ) {\r\n              return true;\r\n            }\r\n          }\r\n        } else if(closeOnContent) {\r\n          return true;\r\n        }\r\n  \r\n      }\r\n      return false;\r\n    },\r\n    _addClassToMFP: function(cName) {\r\n      mfp.bgOverlay.addClass(cName);\r\n      mfp.wrap.addClass(cName);\r\n    },\r\n    _removeClassFromMFP: function(cName) {\r\n      this.bgOverlay.removeClass(cName);\r\n      mfp.wrap.removeClass(cName);\r\n    },\r\n    _hasScrollBar: function(winHeight) {\r\n      return (  (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height()) );\r\n    },\r\n    _setFocus: function() {\r\n      (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();\r\n    },\r\n    _onFocusIn: function(e) {\r\n      if( e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target) ) {\r\n        mfp._setFocus();\r\n        return false;\r\n      }\r\n    },\r\n    _parseMarkup: function(template, values, item) {\r\n      var arr;\r\n      if(item.data) {\r\n        values = $.extend(item.data, values);\r\n      }\r\n      _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item] );\r\n  \r\n      $.each(values, function(key, value) {\r\n        if(value === undefined || value === false) {\r\n          return true;\r\n        }\r\n        arr = key.split('_');\r\n        if(arr.length > 1) {\r\n          var el = template.find(EVENT_NS + '-'+arr[0]);\r\n  \r\n          if(el.length > 0) {\r\n            var attr = arr[1];\r\n            if(attr === 'replaceWith') {\r\n              if(el[0] !== value[0]) {\r\n                el.replaceWith(value);\r\n              }\r\n            } else if(attr === 'img') {\r\n              if(el.is('img')) {\r\n                el.attr('src', value);\r\n              } else {\r\n                el.replaceWith( $('<img>').attr('src', value).attr('class', el.attr('class')) );\r\n              }\r\n            } else {\r\n              el.attr(arr[1], value);\r\n            }\r\n          }\r\n  \r\n        } else {\r\n          template.find(EVENT_NS + '-'+key).html(value);\r\n        }\r\n      });\r\n    },\r\n  \r\n    _getScrollbarSize: function() {\r\n      // thx David\r\n      if(mfp.scrollbarSize === undefined) {\r\n        var scrollDiv = document.createElement(\"div\");\r\n        scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';\r\n        document.body.appendChild(scrollDiv);\r\n        mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;\r\n        document.body.removeChild(scrollDiv);\r\n      }\r\n      return mfp.scrollbarSize;\r\n    }\r\n  \r\n  }; /* MagnificPopup core prototype end */\r\n  \r\n  \r\n  \r\n  \r\n  /**\r\n   * Public static functions\r\n   */\r\n  $.magnificPopup = {\r\n    instance: null,\r\n    proto: MagnificPopup.prototype,\r\n    modules: [],\r\n  \r\n    open: function(options, index) {\r\n      _checkInstance();\r\n  \r\n      if(!options) {\r\n        options = {};\r\n      } else {\r\n        options = $.extend(true, {}, options);\r\n      }\r\n  \r\n      options.isObj = true;\r\n      options.index = index || 0;\r\n      return this.instance.open(options);\r\n    },\r\n  \r\n    close: function() {\r\n      return $.magnificPopup.instance && $.magnificPopup.instance.close();\r\n    },\r\n  \r\n    registerModule: function(name, module) {\r\n      if(module.options) {\r\n        $.magnificPopup.defaults[name] = module.options;\r\n      }\r\n      $.extend(this.proto, module.proto);\r\n      this.modules.push(name);\r\n    },\r\n  \r\n    defaults: {\r\n  \r\n      // Info about options is in docs:\r\n      // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options\r\n  \r\n      disableOn: 0,\r\n  \r\n      key: null,\r\n  \r\n      midClick: false,\r\n  \r\n      mainClass: '',\r\n  \r\n      preloader: true,\r\n  \r\n      focus: '', // CSS selector of input to focus after popup is opened\r\n  \r\n      closeOnContentClick: false,\r\n  \r\n      closeOnBgClick: true,\r\n  \r\n      closeBtnInside: true,\r\n  \r\n      showCloseBtn: true,\r\n  \r\n      enableEscapeKey: true,\r\n  \r\n      modal: false,\r\n  \r\n      alignTop: false,\r\n  \r\n      removalDelay: 0,\r\n  \r\n      prependTo: null,\r\n  \r\n      fixedContentPos: 'auto',\r\n  \r\n      fixedBgPos: 'auto',\r\n  \r\n      overflowY: 'auto',\r\n  \r\n      closeMarkup: '<button title=\"%title%\" type=\"button\" class=\"mfp-close\">&#215;</button>',\r\n  \r\n      tClose: 'Close (Esc)',\r\n  \r\n      tLoading: 'Loading...',\r\n  \r\n      autoFocusLast: true\r\n  \r\n    }\r\n  };\r\n  \r\n  \r\n  \r\n  $.fn.magnificPopup = function(options) {\r\n    _checkInstance();\r\n  \r\n    var jqEl = $(this);\r\n  \r\n    // We call some API method of first param is a string\r\n    if (typeof options === \"string\" ) {\r\n  \r\n      if(options === 'open') {\r\n        var items,\r\n          itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,\r\n          index = parseInt(arguments[1], 10) || 0;\r\n  \r\n        if(itemOpts.items) {\r\n          items = itemOpts.items[index];\r\n        } else {\r\n          items = jqEl;\r\n          if(itemOpts.delegate) {\r\n            items = items.find(itemOpts.delegate);\r\n          }\r\n          items = items.eq( index );\r\n        }\r\n        mfp._openClick({mfpEl:items}, jqEl, itemOpts);\r\n      } else {\r\n        if(mfp.isOpen)\r\n          mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));\r\n      }\r\n  \r\n    } else {\r\n      // clone options obj\r\n      options = $.extend(true, {}, options);\r\n  \r\n      /*\r\n       * As Zepto doesn't support .data() method for objects\r\n       * and it works only in normal browsers\r\n       * we assign \"options\" object directly to the DOM element. FTW!\r\n       */\r\n      if(_isJQ) {\r\n        jqEl.data('magnificPopup', options);\r\n      } else {\r\n        jqEl[0].magnificPopup = options;\r\n      }\r\n  \r\n      mfp.addGroup(jqEl, options);\r\n  \r\n    }\r\n    return jqEl;\r\n  };\r\n  \r\n  /*>>core*/\r\n  \r\n  /*>>inline*/\r\n  \r\n  var INLINE_NS = 'inline',\r\n    _hiddenClass,\r\n    _inlinePlaceholder,\r\n    _lastInlineElement,\r\n    _putInlineElementsBack = function() {\r\n      if(_lastInlineElement) {\r\n        _inlinePlaceholder.after( _lastInlineElement.addClass(_hiddenClass) ).detach();\r\n        _lastInlineElement = null;\r\n      }\r\n    };\r\n  \r\n  $.magnificPopup.registerModule(INLINE_NS, {\r\n    options: {\r\n      hiddenClass: 'hide', // will be appended with `mfp-` prefix\r\n      markup: '',\r\n      tNotFound: 'Content not found'\r\n    },\r\n    proto: {\r\n  \r\n      initInline: function() {\r\n        mfp.types.push(INLINE_NS);\r\n  \r\n        _mfpOn(CLOSE_EVENT+'.'+INLINE_NS, function() {\r\n          _putInlineElementsBack();\r\n        });\r\n      },\r\n  \r\n      getInline: function(item, template) {\r\n  \r\n        _putInlineElementsBack();\r\n  \r\n        if(item.src) {\r\n          var inlineSt = mfp.st.inline,\r\n            el = $(item.src);\r\n  \r\n          if(el.length) {\r\n  \r\n            // If target element has parent - we replace it with placeholder and put it back after popup is closed\r\n            var parent = el[0].parentNode;\r\n            if(parent && parent.tagName) {\r\n              if(!_inlinePlaceholder) {\r\n                _hiddenClass = inlineSt.hiddenClass;\r\n                _inlinePlaceholder = _getEl(_hiddenClass);\r\n                _hiddenClass = 'mfp-'+_hiddenClass;\r\n              }\r\n              // replace target inline element with placeholder\r\n              _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);\r\n            }\r\n  \r\n            mfp.updateStatus('ready');\r\n          } else {\r\n            mfp.updateStatus('error', inlineSt.tNotFound);\r\n            el = $('<div>');\r\n          }\r\n  \r\n          item.inlineElement = el;\r\n          return el;\r\n        }\r\n  \r\n        mfp.updateStatus('ready');\r\n        mfp._parseMarkup(template, {}, item);\r\n        return template;\r\n      }\r\n    }\r\n  });\r\n  \r\n  /*>>inline*/\r\n  \r\n  /*>>ajax*/\r\n  var AJAX_NS = 'ajax',\r\n    _ajaxCur,\r\n    _removeAjaxCursor = function() {\r\n      if(_ajaxCur) {\r\n        $(document.body).removeClass(_ajaxCur);\r\n      }\r\n    },\r\n    _destroyAjaxRequest = function() {\r\n      _removeAjaxCursor();\r\n      if(mfp.req) {\r\n        mfp.req.abort();\r\n      }\r\n    };\r\n  \r\n  $.magnificPopup.registerModule(AJAX_NS, {\r\n  \r\n    options: {\r\n      settings: null,\r\n      cursor: 'mfp-ajax-cur',\r\n      tError: '<a href=\"%url%\">The content</a> could not be loaded.'\r\n    },\r\n  \r\n    proto: {\r\n      initAjax: function() {\r\n        mfp.types.push(AJAX_NS);\r\n        _ajaxCur = mfp.st.ajax.cursor;\r\n  \r\n        _mfpOn(CLOSE_EVENT+'.'+AJAX_NS, _destroyAjaxRequest);\r\n        _mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);\r\n      },\r\n      getAjax: function(item) {\r\n  \r\n        if(_ajaxCur) {\r\n          $(document.body).addClass(_ajaxCur);\r\n        }\r\n  \r\n        mfp.updateStatus('loading');\r\n  \r\n        var opts = $.extend({\r\n          url: item.src,\r\n          success: function(data, textStatus, jqXHR) {\r\n            var temp = {\r\n              data:data,\r\n              xhr:jqXHR\r\n            };\r\n  \r\n            _mfpTrigger('ParseAjax', temp);\r\n  \r\n            mfp.appendContent( $(temp.data), AJAX_NS );\r\n  \r\n            item.finished = true;\r\n  \r\n            _removeAjaxCursor();\r\n  \r\n            mfp._setFocus();\r\n  \r\n            setTimeout(function() {\r\n              mfp.wrap.addClass(READY_CLASS);\r\n            }, 16);\r\n  \r\n            mfp.updateStatus('ready');\r\n  \r\n            _mfpTrigger('AjaxContentAdded');\r\n          },\r\n          error: function() {\r\n            _removeAjaxCursor();\r\n            item.finished = item.loadError = true;\r\n            mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));\r\n          }\r\n        }, mfp.st.ajax.settings);\r\n  \r\n        mfp.req = $.ajax(opts);\r\n  \r\n        return '';\r\n      }\r\n    }\r\n  });\r\n  \r\n  /*>>ajax*/\r\n  \r\n  /*>>image*/\r\n  var _imgInterval,\r\n    _getTitle = function(item) {\r\n      if(item.data && item.data.title !== undefined)\r\n        return item.data.title;\r\n  \r\n      var src = mfp.st.image.titleSrc;\r\n  \r\n      if(src) {\r\n        if($.isFunction(src)) {\r\n          return src.call(mfp, item);\r\n        } else if(item.el) {\r\n          return item.el.attr(src) || '';\r\n        }\r\n      }\r\n      return '';\r\n    };\r\n  \r\n  $.magnificPopup.registerModule('image', {\r\n  \r\n    options: {\r\n      markup: '<div class=\"mfp-figure\">'+\r\n            '<div class=\"mfp-close\"></div>'+\r\n            '<figure>'+\r\n              '<div class=\"mfp-img\"></div>'+\r\n              '<figcaption>'+\r\n                '<div class=\"mfp-bottom-bar\">'+\r\n                  '<div class=\"mfp-title\"></div>'+\r\n                  '<div class=\"mfp-counter\"></div>'+\r\n                '</div>'+\r\n              '</figcaption>'+\r\n            '</figure>'+\r\n          '</div>',\r\n      cursor: 'mfp-zoom-out-cur',\r\n      titleSrc: 'title',\r\n      verticalFit: true,\r\n      tError: '<a href=\"%url%\">The image</a> could not be loaded.'\r\n    },\r\n  \r\n    proto: {\r\n      initImage: function() {\r\n        var imgSt = mfp.st.image,\r\n          ns = '.image';\r\n  \r\n        mfp.types.push('image');\r\n  \r\n        _mfpOn(OPEN_EVENT+ns, function() {\r\n          if(mfp.currItem.type === 'image' && imgSt.cursor) {\r\n            $(document.body).addClass(imgSt.cursor);\r\n          }\r\n        });\r\n  \r\n        _mfpOn(CLOSE_EVENT+ns, function() {\r\n          if(imgSt.cursor) {\r\n            $(document.body).removeClass(imgSt.cursor);\r\n          }\r\n          _window.off('resize' + EVENT_NS);\r\n        });\r\n  \r\n        _mfpOn('Resize'+ns, mfp.resizeImage);\r\n        if(mfp.isLowIE) {\r\n          _mfpOn('AfterChange', mfp.resizeImage);\r\n        }\r\n      },\r\n      resizeImage: function() {\r\n        var item = mfp.currItem;\r\n        if(!item || !item.img) return;\r\n  \r\n        if(mfp.st.image.verticalFit) {\r\n          var decr = 0;\r\n          // fix box-sizing in ie7/8\r\n          if(mfp.isLowIE) {\r\n            decr = parseInt(item.img.css('padding-top'), 10) + parseInt(item.img.css('padding-bottom'),10);\r\n          }\r\n          item.img.css('max-height', mfp.wH-decr);\r\n        }\r\n      },\r\n      _onImageHasSize: function(item) {\r\n        if(item.img) {\r\n  \r\n          item.hasSize = true;\r\n  \r\n          if(_imgInterval) {\r\n            clearInterval(_imgInterval);\r\n          }\r\n  \r\n          item.isCheckingImgSize = false;\r\n  \r\n          _mfpTrigger('ImageHasSize', item);\r\n  \r\n          if(item.imgHidden) {\r\n            if(mfp.content)\r\n              mfp.content.removeClass('mfp-loading');\r\n  \r\n            item.imgHidden = false;\r\n          }\r\n  \r\n        }\r\n      },\r\n  \r\n      /**\r\n       * Function that loops until the image has size to display elements that rely on it asap\r\n       */\r\n      findImageSize: function(item) {\r\n  \r\n        var counter = 0,\r\n          img = item.img[0],\r\n          mfpSetInterval = function(delay) {\r\n  \r\n            if(_imgInterval) {\r\n              clearInterval(_imgInterval);\r\n            }\r\n            // decelerating interval that checks for size of an image\r\n            _imgInterval = setInterval(function() {\r\n              if(img.naturalWidth > 0) {\r\n                mfp._onImageHasSize(item);\r\n                return;\r\n              }\r\n  \r\n              if(counter > 200) {\r\n                clearInterval(_imgInterval);\r\n              }\r\n  \r\n              counter++;\r\n              if(counter === 3) {\r\n                mfpSetInterval(10);\r\n              } else if(counter === 40) {\r\n                mfpSetInterval(50);\r\n              } else if(counter === 100) {\r\n                mfpSetInterval(500);\r\n              }\r\n            }, delay);\r\n          };\r\n  \r\n        mfpSetInterval(1);\r\n      },\r\n  \r\n      getImage: function(item, template) {\r\n  \r\n        var guard = 0,\r\n  \r\n          // image load complete handler\r\n          onLoadComplete = function() {\r\n            if(item) {\r\n              if (item.img[0].complete) {\r\n                item.img.off('.mfploader');\r\n  \r\n                if(item === mfp.currItem){\r\n                  mfp._onImageHasSize(item);\r\n  \r\n                  mfp.updateStatus('ready');\r\n                }\r\n  \r\n                item.hasSize = true;\r\n                item.loaded = true;\r\n  \r\n                _mfpTrigger('ImageLoadComplete');\r\n  \r\n              }\r\n              else {\r\n                // if image complete check fails 200 times (20 sec), we assume that there was an error.\r\n                guard++;\r\n                if(guard < 200) {\r\n                  setTimeout(onLoadComplete,100);\r\n                } else {\r\n                  onLoadError();\r\n                }\r\n              }\r\n            }\r\n          },\r\n  \r\n          // image error handler\r\n          onLoadError = function() {\r\n            if(item) {\r\n              item.img.off('.mfploader');\r\n              if(item === mfp.currItem){\r\n                mfp._onImageHasSize(item);\r\n                mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src) );\r\n              }\r\n  \r\n              item.hasSize = true;\r\n              item.loaded = true;\r\n              item.loadError = true;\r\n            }\r\n          },\r\n          imgSt = mfp.st.image;\r\n  \r\n  \r\n        var el = template.find('.mfp-img');\r\n        if(el.length) {\r\n          var img = document.createElement('img');\r\n          img.className = 'mfp-img';\r\n          if(item.el && item.el.find('img').length) {\r\n            img.alt = item.el.find('img').attr('alt');\r\n          }\r\n          item.img = $(img).on('load.mfploader', onLoadComplete).on('error.mfploader', onLoadError);\r\n          img.src = item.src;\r\n  \r\n          // without clone() \"error\" event is not firing when IMG is replaced by new IMG\r\n          // TODO: find a way to avoid such cloning\r\n          if(el.is('img')) {\r\n            item.img = item.img.clone();\r\n          }\r\n  \r\n          img = item.img[0];\r\n          if(img.naturalWidth > 0) {\r\n            item.hasSize = true;\r\n          } else if(!img.width) {\r\n            item.hasSize = false;\r\n          }\r\n        }\r\n  \r\n        mfp._parseMarkup(template, {\r\n          title: _getTitle(item),\r\n          img_replaceWith: item.img\r\n        }, item);\r\n  \r\n        mfp.resizeImage();\r\n  \r\n        if(item.hasSize) {\r\n          if(_imgInterval) clearInterval(_imgInterval);\r\n  \r\n          if(item.loadError) {\r\n            template.addClass('mfp-loading');\r\n            mfp.updateStatus('error', imgSt.tError.replace('%url%', item.src) );\r\n          } else {\r\n            template.removeClass('mfp-loading');\r\n            mfp.updateStatus('ready');\r\n          }\r\n          return template;\r\n        }\r\n  \r\n        mfp.updateStatus('loading');\r\n        item.loading = true;\r\n  \r\n        if(!item.hasSize) {\r\n          item.imgHidden = true;\r\n          template.addClass('mfp-loading');\r\n          mfp.findImageSize(item);\r\n        }\r\n  \r\n        return template;\r\n      }\r\n    }\r\n  });\r\n  \r\n  /*>>image*/\r\n  \r\n  /*>>zoom*/\r\n  var hasMozTransform,\r\n    getHasMozTransform = function() {\r\n      if(hasMozTransform === undefined) {\r\n        hasMozTransform = document.createElement('p').style.MozTransform !== undefined;\r\n      }\r\n      return hasMozTransform;\r\n    };\r\n  \r\n  $.magnificPopup.registerModule('zoom', {\r\n  \r\n    options: {\r\n      enabled: false,\r\n      easing: 'ease-in-out',\r\n      duration: 300,\r\n      opener: function(element) {\r\n        return element.is('img') ? element : element.find('img');\r\n      }\r\n    },\r\n  \r\n    proto: {\r\n  \r\n      initZoom: function() {\r\n        var zoomSt = mfp.st.zoom,\r\n          ns = '.zoom',\r\n          image;\r\n  \r\n        if(!zoomSt.enabled || !mfp.supportsTransition) {\r\n          return;\r\n        }\r\n  \r\n        var duration = zoomSt.duration,\r\n          getElToAnimate = function(image) {\r\n            var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),\r\n              transition = 'all '+(zoomSt.duration/1000)+'s ' + zoomSt.easing,\r\n              cssObj = {\r\n                position: 'fixed',\r\n                zIndex: 9999,\r\n                left: 0,\r\n                top: 0,\r\n                '-webkit-backface-visibility': 'hidden'\r\n              },\r\n              t = 'transition';\r\n  \r\n            cssObj['-webkit-'+t] = cssObj['-moz-'+t] = cssObj['-o-'+t] = cssObj[t] = transition;\r\n  \r\n            newImg.css(cssObj);\r\n            return newImg;\r\n          },\r\n          showMainContent = function() {\r\n            mfp.content.css('visibility', 'visible');\r\n          },\r\n          openTimeout,\r\n          animatedImg;\r\n  \r\n        _mfpOn('BuildControls'+ns, function() {\r\n          if(mfp._allowZoom()) {\r\n  \r\n            clearTimeout(openTimeout);\r\n            mfp.content.css('visibility', 'hidden');\r\n  \r\n            // Basically, all code below does is clones existing image, puts in on top of the current one and animated it\r\n  \r\n            image = mfp._getItemToZoom();\r\n  \r\n            if(!image) {\r\n              showMainContent();\r\n              return;\r\n            }\r\n  \r\n            animatedImg = getElToAnimate(image);\r\n  \r\n            animatedImg.css( mfp._getOffset() );\r\n  \r\n            mfp.wrap.append(animatedImg);\r\n  \r\n            openTimeout = setTimeout(function() {\r\n              animatedImg.css( mfp._getOffset( true ) );\r\n              openTimeout = setTimeout(function() {\r\n  \r\n                showMainContent();\r\n  \r\n                setTimeout(function() {\r\n                  animatedImg.remove();\r\n                  image = animatedImg = null;\r\n                  _mfpTrigger('ZoomAnimationEnded');\r\n                }, 16); // avoid blink when switching images\r\n  \r\n              }, duration); // this timeout equals animation duration\r\n  \r\n            }, 16); // by adding this timeout we avoid short glitch at the beginning of animation\r\n  \r\n  \r\n            // Lots of timeouts...\r\n          }\r\n        });\r\n        _mfpOn(BEFORE_CLOSE_EVENT+ns, function() {\r\n          if(mfp._allowZoom()) {\r\n  \r\n            clearTimeout(openTimeout);\r\n  \r\n            mfp.st.removalDelay = duration;\r\n  \r\n            if(!image) {\r\n              image = mfp._getItemToZoom();\r\n              if(!image) {\r\n                return;\r\n              }\r\n              animatedImg = getElToAnimate(image);\r\n            }\r\n  \r\n            animatedImg.css( mfp._getOffset(true) );\r\n            mfp.wrap.append(animatedImg);\r\n            mfp.content.css('visibility', 'hidden');\r\n  \r\n            setTimeout(function() {\r\n              animatedImg.css( mfp._getOffset() );\r\n            }, 16);\r\n          }\r\n  \r\n        });\r\n  \r\n        _mfpOn(CLOSE_EVENT+ns, function() {\r\n          if(mfp._allowZoom()) {\r\n            showMainContent();\r\n            if(animatedImg) {\r\n              animatedImg.remove();\r\n            }\r\n            image = null;\r\n          }\r\n        });\r\n      },\r\n  \r\n      _allowZoom: function() {\r\n        return mfp.currItem.type === 'image';\r\n      },\r\n  \r\n      _getItemToZoom: function() {\r\n        if(mfp.currItem.hasSize) {\r\n          return mfp.currItem.img;\r\n        } else {\r\n          return false;\r\n        }\r\n      },\r\n  \r\n      // Get element postion relative to viewport\r\n      _getOffset: function(isLarge) {\r\n        var el;\r\n        if(isLarge) {\r\n          el = mfp.currItem.img;\r\n        } else {\r\n          el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);\r\n        }\r\n  \r\n        var offset = el.offset();\r\n        var paddingTop = parseInt(el.css('padding-top'),10);\r\n        var paddingBottom = parseInt(el.css('padding-bottom'),10);\r\n        offset.top -= ( $(window).scrollTop() - paddingTop );\r\n  \r\n  \r\n        /*\r\n  \r\n        Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.\r\n  \r\n         */\r\n        var obj = {\r\n          width: el.width(),\r\n          // fix Zepto height+padding issue\r\n          height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop\r\n        };\r\n  \r\n        // I hate to do this, but there is no another option\r\n        if( getHasMozTransform() ) {\r\n          obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';\r\n        } else {\r\n          obj.left = offset.left;\r\n          obj.top = offset.top;\r\n        }\r\n        return obj;\r\n      }\r\n  \r\n    }\r\n  });\r\n  \r\n  \r\n  \r\n  /*>>zoom*/\r\n  \r\n  /*>>iframe*/\r\n  \r\n  var IFRAME_NS = 'iframe',\r\n    _emptyPage = '//about:blank',\r\n  \r\n    _fixIframeBugs = function(isShowing) {\r\n      if(mfp.currTemplate[IFRAME_NS]) {\r\n        var el = mfp.currTemplate[IFRAME_NS].find('iframe');\r\n        if(el.length) {\r\n          // reset src after the popup is closed to avoid \"video keeps playing after popup is closed\" bug\r\n          if(!isShowing) {\r\n            el[0].src = _emptyPage;\r\n          }\r\n  \r\n          // IE8 black screen bug fix\r\n          if(mfp.isIE8) {\r\n            el.css('display', isShowing ? 'block' : 'none');\r\n          }\r\n        }\r\n      }\r\n    };\r\n  \r\n  $.magnificPopup.registerModule(IFRAME_NS, {\r\n  \r\n    options: {\r\n      markup: '<div class=\"mfp-iframe-scaler\">'+\r\n            '<div class=\"mfp-close\"></div>'+\r\n            '<iframe class=\"mfp-iframe\" src=\"//about:blank\" frameborder=\"0\" allowfullscreen></iframe>'+\r\n          '</div>',\r\n  \r\n      srcAction: 'iframe_src',\r\n  \r\n      // we don't care and support only one default type of URL by default\r\n      patterns: {\r\n        youtube: {\r\n          index: 'youtube.com',\r\n          id: 'v=',\r\n          src: '//www.youtube.com/embed/%id%?autoplay=1'\r\n        },\r\n        vimeo: {\r\n          index: 'vimeo.com/',\r\n          id: '/',\r\n          src: '//player.vimeo.com/video/%id%?autoplay=1'\r\n        },\r\n        gmaps: {\r\n          index: '//maps.google.',\r\n          src: '%id%&output=embed'\r\n        }\r\n      }\r\n    },\r\n  \r\n    proto: {\r\n      initIframe: function() {\r\n        mfp.types.push(IFRAME_NS);\r\n  \r\n        _mfpOn('BeforeChange', function(e, prevType, newType) {\r\n          if(prevType !== newType) {\r\n            if(prevType === IFRAME_NS) {\r\n              _fixIframeBugs(); // iframe if removed\r\n            } else if(newType === IFRAME_NS) {\r\n              _fixIframeBugs(true); // iframe is showing\r\n            }\r\n          }// else {\r\n            // iframe source is switched, don't do anything\r\n          //}\r\n        });\r\n  \r\n        _mfpOn(CLOSE_EVENT + '.' + IFRAME_NS, function() {\r\n          _fixIframeBugs();\r\n        });\r\n      },\r\n  \r\n      getIframe: function(item, template) {\r\n        var embedSrc = item.src;\r\n        var iframeSt = mfp.st.iframe;\r\n  \r\n        $.each(iframeSt.patterns, function() {\r\n          if(embedSrc.indexOf( this.index ) > -1) {\r\n            if(this.id) {\r\n              if(typeof this.id === 'string') {\r\n                embedSrc = embedSrc.substr(embedSrc.lastIndexOf(this.id)+this.id.length, embedSrc.length);\r\n              } else {\r\n                embedSrc = this.id.call( this, embedSrc );\r\n              }\r\n            }\r\n            embedSrc = this.src.replace('%id%', embedSrc );\r\n            return false; // break;\r\n          }\r\n        });\r\n  \r\n        var dataObj = {};\r\n        if(iframeSt.srcAction) {\r\n          dataObj[iframeSt.srcAction] = embedSrc;\r\n        }\r\n        mfp._parseMarkup(template, dataObj, item);\r\n  \r\n        mfp.updateStatus('ready');\r\n  \r\n        return template;\r\n      }\r\n    }\r\n  });\r\n  \r\n  \r\n  \r\n  /*>>iframe*/\r\n  \r\n  /*>>gallery*/\r\n  /**\r\n   * Get looped index depending on number of slides\r\n   */\r\n  var _getLoopedId = function(index) {\r\n      var numSlides = mfp.items.length;\r\n      if(index > numSlides - 1) {\r\n        return index - numSlides;\r\n      } else  if(index < 0) {\r\n        return numSlides + index;\r\n      }\r\n      return index;\r\n    },\r\n    _replaceCurrTotal = function(text, curr, total) {\r\n      return text.replace(/%curr%/gi, curr + 1).replace(/%total%/gi, total);\r\n    };\r\n  \r\n  $.magnificPopup.registerModule('gallery', {\r\n  \r\n    options: {\r\n      enabled: false,\r\n      arrowMarkup: '<button title=\"%title%\" type=\"button\" class=\"mfp-arrow mfp-arrow-%dir%\"></button>',\r\n      preload: [0,2],\r\n      navigateByImgClick: true,\r\n      arrows: true,\r\n  \r\n      tPrev: 'Previous (Left arrow key)',\r\n      tNext: 'Next (Right arrow key)',\r\n      tCounter: '%curr% - %total%'\r\n    },\r\n  \r\n    proto: {\r\n      initGallery: function() {\r\n  \r\n        var gSt = mfp.st.gallery,\r\n          ns = '.mfp-gallery';\r\n  \r\n        mfp.direction = true; // true - next, false - prev\r\n  \r\n        if(!gSt || !gSt.enabled ) return false;\r\n  \r\n        _wrapClasses += ' mfp-gallery';\r\n  \r\n        _mfpOn(OPEN_EVENT+ns, function() {\r\n  \r\n          if(gSt.navigateByImgClick) {\r\n            mfp.wrap.on('click'+ns, '.mfp-img', function() {\r\n              if(mfp.items.length > 1) {\r\n                mfp.next();\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n  \r\n          _document.on('keydown'+ns, function(e) {\r\n            if (e.keyCode === 37) {\r\n              mfp.prev();\r\n            } else if (e.keyCode === 39) {\r\n              mfp.next();\r\n            }\r\n          });\r\n        });\r\n  \r\n        _mfpOn('UpdateStatus'+ns, function(e, data) {\r\n          if(data.text) {\r\n            data.text = _replaceCurrTotal(data.text, mfp.currItem.index, mfp.items.length);\r\n          }\r\n        });\r\n  \r\n        _mfpOn(MARKUP_PARSE_EVENT+ns, function(e, element, values, item) {\r\n          var l = mfp.items.length;\r\n          values.counter = l > 1 ? _replaceCurrTotal(gSt.tCounter, item.index, l) : '';\r\n        });\r\n  \r\n        _mfpOn('BuildControls' + ns, function() {\r\n          if(mfp.items.length > 1 && gSt.arrows && !mfp.arrowLeft) {\r\n            var markup = gSt.arrowMarkup,\r\n              arrowLeft = mfp.arrowLeft = $( markup.replace(/%title%/gi, gSt.tPrev).replace(/%dir%/gi, 'left') ).addClass(PREVENT_CLOSE_CLASS),\r\n              arrowRight = mfp.arrowRight = $( markup.replace(/%title%/gi, gSt.tNext).replace(/%dir%/gi, 'right') ).addClass(PREVENT_CLOSE_CLASS);\r\n  \r\n            arrowLeft.click(function() {\r\n              mfp.prev();\r\n            });\r\n            arrowRight.click(function() {\r\n              mfp.next();\r\n            });\r\n  \r\n            mfp.container.append(arrowLeft.add(arrowRight));\r\n          }\r\n        });\r\n  \r\n        _mfpOn(CHANGE_EVENT+ns, function() {\r\n          if(mfp._preloadTimeout) clearTimeout(mfp._preloadTimeout);\r\n  \r\n          mfp._preloadTimeout = setTimeout(function() {\r\n            mfp.preloadNearbyImages();\r\n            mfp._preloadTimeout = null;\r\n          }, 16);\r\n        });\r\n  \r\n  \r\n        _mfpOn(CLOSE_EVENT+ns, function() {\r\n          _document.off(ns);\r\n          mfp.wrap.off('click'+ns);\r\n          mfp.arrowRight = mfp.arrowLeft = null;\r\n        });\r\n  \r\n      },\r\n      next: function() {\r\n        mfp.direction = true;\r\n        mfp.index = _getLoopedId(mfp.index + 1);\r\n        mfp.updateItemHTML();\r\n      },\r\n      prev: function() {\r\n        mfp.direction = false;\r\n        mfp.index = _getLoopedId(mfp.index - 1);\r\n        mfp.updateItemHTML();\r\n      },\r\n      goTo: function(newIndex) {\r\n        mfp.direction = (newIndex >= mfp.index);\r\n        mfp.index = newIndex;\r\n        mfp.updateItemHTML();\r\n      },\r\n      preloadNearbyImages: function() {\r\n        var p = mfp.st.gallery.preload,\r\n          preloadBefore = Math.min(p[0], mfp.items.length),\r\n          preloadAfter = Math.min(p[1], mfp.items.length),\r\n          i;\r\n  \r\n        for(i = 1; i <= (mfp.direction ? preloadAfter : preloadBefore); i++) {\r\n          mfp._preloadItem(mfp.index+i);\r\n        }\r\n        for(i = 1; i <= (mfp.direction ? preloadBefore : preloadAfter); i++) {\r\n          mfp._preloadItem(mfp.index-i);\r\n        }\r\n      },\r\n      _preloadItem: function(index) {\r\n        index = _getLoopedId(index);\r\n  \r\n        if(mfp.items[index].preloaded) {\r\n          return;\r\n        }\r\n  \r\n        var item = mfp.items[index];\r\n        if(!item.parsed) {\r\n          item = mfp.parseEl( index );\r\n        }\r\n  \r\n        _mfpTrigger('LazyLoad', item);\r\n  \r\n        if(item.type === 'image') {\r\n          item.img = $('<img class=\"mfp-img\" />').on('load.mfploader', function() {\r\n            item.hasSize = true;\r\n          }).on('error.mfploader', function() {\r\n            item.hasSize = true;\r\n            item.loadError = true;\r\n            _mfpTrigger('LazyLoadError', item);\r\n          }).attr('src', item.src);\r\n        }\r\n  \r\n  \r\n        item.preloaded = true;\r\n      }\r\n    }\r\n  });\r\n  \r\n  /*>>gallery*/\r\n  \r\n  /*>>retina*/\r\n  \r\n  var RETINA_NS = 'retina';\r\n  \r\n  $.magnificPopup.registerModule(RETINA_NS, {\r\n    options: {\r\n      replaceSrc: function(item) {\r\n        return item.src.replace(/\\.\\w+$/, function(m) { return '@2x' + m; });\r\n      },\r\n      ratio: 1 // Function or number.  Set to 1 to disable.\r\n    },\r\n    proto: {\r\n      initRetina: function() {\r\n        if(window.devicePixelRatio > 1) {\r\n  \r\n          var st = mfp.st.retina,\r\n            ratio = st.ratio;\r\n  \r\n          ratio = !isNaN(ratio) ? ratio : ratio();\r\n  \r\n          if(ratio > 1) {\r\n            _mfpOn('ImageHasSize' + '.' + RETINA_NS, function(e, item) {\r\n              item.img.css({\r\n                'max-width': item.img[0].naturalWidth / ratio,\r\n                'width': '100%'\r\n              });\r\n            });\r\n            _mfpOn('ElementParse' + '.' + RETINA_NS, function(e, item) {\r\n              item.src = st.replaceSrc(item, ratio);\r\n            });\r\n          }\r\n        }\r\n  \r\n      }\r\n    }\r\n  });\r\n  \r\n  /*>>retina*/\r\n   _checkInstance(); }));","// mp.js\n\n//--------- jQuery: plugins section after full DOM load ----------\n$(document).ready(function () {\n  //--------- jQuery: magnific-popup-gallery  ----------\n  const titleText = `<p>Made with <span style=\"color: #e60f0a;\">&#10084;</span> of monumental architecture.</p>`\n  const titleError = '<a href=\"%url%\">Изображение #%curr%</a> загрузить нельзя.'\n\n  $('.popup-gallery').magnificPopup({\n    delegate: 'a',\n    type: 'image',\n    tLoading: 'Loading image #%curr%...',\n    mainClass: 'mfp-img-mobile',\n    gallery: {\n      enabled: true,\n      navigateByImgClick: true,\n      preload: [0, 1], // Will preload 0 - before current, and 1 after the current image\n    },\n    image: {\n      tError: titleError,\n      titleSrc: function (item) {\n        return item.el.attr('title') + titleText\n      },\n    },\n  })\n\n  //--------- jQuery: magnific-popup single image view --------\n  $('.link-popup').magnificPopup({\n    type: 'image',\n    image: {\n      tError: titleError,\n      titleSrc: function (item) {\n        return item.el.attr('title') + titleText\n      },\n    },\n    // other options\n  })\n\n  //--------- jQuery: magnific-popup viewing content of different types ---------\n  $('#open-popup').magnificPopup({\n    items: [\n      {\n        src: '/themes/winter/assets/images/b3.jpg',\n        title: 'Made with <span style=\"color: #e60f0a;\">&#10084;</span> for the best architecture.',\n      },\n      {\n        src: 'https://vimeo.com/video/141995089',\n        type: 'iframe', // this overrides default type\n      },\n      {\n        src: $('<div class=\"white-popup\">Dynamically created element</div>'), // Dynamically created element\n        type: 'inline',\n      },\n      {\n        src: '<div class=\"white-popup\">Popup from HTML string</div>', // HTML string\n        type: 'inline',\n      },\n      {\n        src: '#popup', // CSS selector of an element on page that should be used as a popup\n        type: 'inline',\n      },\n    ],\n    gallery: {\n      enabled: true,\n    },\n    type: 'image', // this is a default type\n  })\n\n  // -------- jQuery: add-remove class ------------\n\n  // $(\".view-img\").hover(function () {\n  //   $(this).toggleClass(\"shadow\");\n  // });\n})\n//--- end: jQuery: plugins section after full DOM load ---\n"],"names":["createElement","className","tagName","appendToEl","el","document","appendChild","setWidthHeight","w","h","style","width","height","addEventListener","header","querySelector","scrolling","previousTop","autoHideHeader","currentTop","documentElement","scrollTop","body","classList","remove","add","window","requestAnimationFrame","setTimeout","innerWidth","getElementsByTagName","length","insertAdjacentHTML","scrollToTopLoader","flag","arrowUp","getElementById","counter","this","scrollY","onclick","event","scrollTo","left","scrollX","top","behavior","eventScrollToTop","LOAD_STATE","getElementsFromOption","option","legacySelector","parent","elements","Element","NodeList","Array","isArray","from","selector","querySelectorAll","e","which","ctrlKey","metaKey","altKey","shiftKey","equalizePoints","p1","p2","x","y","undefined","id","roundPoint","p","Math","round","getDistanceBetween","abs","sqrt","pointsEqual","clamp","val","min","max","toTransformString","scale","propValue","setTransform","transform","setTransitionStyle","prop","duration","ease","transition","img","decode","complete","Promise","resolve","reject","onload","onerror","PhotoSwipeLightbox","gallerySelector","childSelector","pswpModule","PhotoSwipe","init","factory","showHideAnimationType","$","mfp","_prevStatus","_document","_prevContentType","_wrapClasses","_currPopupType","CLOSE_EVENT","BEFORE_CLOSE_EVENT","MARKUP_PARSE_EVENT","OPEN_EVENT","CHANGE_EVENT","NS","EVENT_NS","READY_CLASS","REMOVING_CLASS","PREVENT_CLOSE_CLASS","MagnificPopup","_isJQ","jQuery","_window","_mfpOn","name","f","ev","on","_getEl","appendTo","html","raw","innerHTML","_mfpTrigger","data","triggerHandler","st","callbacks","charAt","toLowerCase","slice","apply","_getCloseBtn","type","currTemplate","closeBtn","closeMarkup","replace","tClose","_checkInstance","magnificPopup","instance","prototype","constructor","appVersion","navigator","isLowIE","isIE8","all","isAndroid","test","isIOS","supportsTransition","s","v","pop","supportsTransitions","probablyMobile","userAgent","popupsCache","open","i","isObj","items","toArray","index","item","parsed","isOpen","types","mainEl","eq","key","extend","defaults","fixedContentPos","modal","closeOnContentClick","closeOnBgClick","showCloseBtn","enableEscapeKey","bgOverlay","close","wrap","attr","_checkIfClose","target","container","contentContainer","preloader","tLoading","modules","n","toUpperCase","call","closeBtnInside","template","values","close_replaceWith","append","alignTop","css","overflow","overflowY","overflowX","position","fixedBgPos","keyCode","updateSize","addClass","windowHeight","wH","windowStyles","_hasScrollBar","_getScrollbarSize","marginRight","isIE7","classesToadd","mainClass","_addClassToMFP","updateItemHTML","prependTo","_lastFocusedEl","activeElement","content","_setFocus","_onFocusIn","removalDelay","_close","classesToRemove","detach","empty","_removeClassFromMFP","off","removeAttr","currItem","autoFocusLast","focus","prevHeight","winHeight","zoomLevel","clientWidth","innerHeight","parseEl","markup","removeClass","newContent","appendContent","preloaded","prepend","find","src","hasClass","addGroup","options","eHandler","mfpEl","_openClick","eName","delegate","midClick","disableOn","isFunction","preventDefault","stopPropagation","updateStatus","status","text","stopImmediatePropagation","closeOnContent","closeOnBg","contains","cName","scrollHeight","_parseMarkup","arr","each","value","split","replaceWith","is","scrollbarSize","scrollDiv","cssText","offsetWidth","removeChild","proto","registerModule","module","push","fn","jqEl","itemOpts","parseInt","arguments","_hiddenClass","_inlinePlaceholder","_lastInlineElement","INLINE_NS","_putInlineElementsBack","after","hiddenClass","tNotFound","initInline","getInline","inlineSt","inline","parentNode","inlineElement","_ajaxCur","AJAX_NS","_removeAjaxCursor","_destroyAjaxRequest","req","abort","settings","cursor","tError","initAjax","ajax","getAjax","opts","url","success","textStatus","jqXHR","temp","xhr","finished","error","loadError","_imgInterval","hasMozTransform","_getTitle","title","image","titleSrc","verticalFit","initImage","imgSt","ns","resizeImage","decr","_onImageHasSize","hasSize","clearInterval","isCheckingImgSize","imgHidden","findImageSize","mfpSetInterval","delay","setInterval","naturalWidth","getImage","guard","onLoadComplete","loaded","onLoadError","alt","clone","img_replaceWith","loading","enabled","easing","opener","element","initZoom","zoomSt","zoom","openTimeout","animatedImg","getElToAnimate","newImg","cssObj","zIndex","t","showMainContent","_allowZoom","clearTimeout","_getItemToZoom","_getOffset","isLarge","offset","paddingTop","paddingBottom","obj","offsetHeight","MozTransform","IFRAME_NS","_fixIframeBugs","isShowing","srcAction","patterns","youtube","vimeo","gmaps","initIframe","prevType","newType","getIframe","embedSrc","iframeSt","iframe","indexOf","substr","lastIndexOf","dataObj","_getLoopedId","numSlides","_replaceCurrTotal","curr","total","arrowMarkup","preload","navigateByImgClick","arrows","tPrev","tNext","tCounter","initGallery","gSt","gallery","direction","next","prev","l","arrowLeft","arrowRight","click","_preloadTimeout","preloadNearbyImages","goTo","newIndex","preloadBefore","preloadAfter","_preloadItem","RETINA_NS","replaceSrc","m","ratio","initRetina","devicePixelRatio","retina","isNaN","define","amd","exports","require","Zepto","ready","titleText","titleError"],"mappings":"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"}